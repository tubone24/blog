{"componentChunkName":"component---src-templates-index-tsx","path":"/pages/3","result":{"pageContext":{"totalCount":110,"group":[{"node":{"id":"1b2d3705-f7be-5506-9c7d-94ff92eb264c","html":"<p>ウマ娘プリティーダービーについてお話しするくそどうでもいい記事です。</p>\n<p>読まなくていいです。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E3%81%8B%E3%82%8F%E3%81%84%E3%81%84\">かわいい</a></li>\n<li><a href=\"#%E6%93%AC%E4%BA%BA%E5%8C%96%E3%82%A2%E3%83%8B%E3%83%A1%E3%81%A8%E3%81%8B%E3%81%A3%E3%81%A6%E4%B8%80%E7%99%BA%E5%BD%93%E3%81%A6%E3%82%8B%E3%81%A8%E3%81%84%E3%81%91%E3%82%8B%E3%81%8B%E3%82%82\">擬人化アニメとかって一発当てるといけるかも？</a></li>\n<li><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></li>\n</ul>\n</div>\n<h2 id=\"かわいい\" style=\"position:relative;\"><a href=\"#%E3%81%8B%E3%82%8F%E3%81%84%E3%81%84\" aria-label=\"かわいい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>かわいい</h2>\n<p>みなさん、<strong>ウマ娘 プリティーダービー</strong>やってますか？</p>\n<p>たぶん9割のエンジニア諸君がプレーしているであろう（大偏見）大人気ゲームですが、みなさんは<strong>担当ウマ娘</strong>はいらっしゃいますか？</p>\n<p>私はアニメ一期を見たとき、<strong>グラスワンダーちゃん</strong>にびびっときました。かわいい。</p>\n<p><img src=\"https://i.imgur.com/KKMG6O8.png\" alt=\"img\"></p>\n<p>かわいい。</p>\n<p><img src=\"https://i.imgur.com/1kCUabp.jpg\" alt=\"img\"></p>\n<p>かわいい。</p>\n<p><img src=\"https://i.imgur.com/a3frRje.jpg\" alt=\"img\"></p>\n<p>かわいい。</p>\n<p><img src=\"https://i.imgur.com/uRTSfud.jpg\" alt=\"img\"></p>\n<p>かわいいので、やはり真っ先に育成を始めましたが、まだ一度もグラスワンダーちゃんをURAファイナルズで優勝させてあげられてません。ごめんね。</p>\n<p>ということで、先週から今週の個人開発進捗が全くないです。進捗ダメです。</p>\n<p>そろそろ本腰入れてコードを書かないといけないと思いつつ、もうどうにも心はグラスワンダーちゃん。</p>\n<p>嗚呼。これが恋なんだね。</p>\n<p><img src=\"https://i.imgur.com/iRsPXRP.jpg\" alt=\"img\"></p>\n<p>グラスワンダーを養うためにコード書かなきゃ!!</p>\n<h2 id=\"擬人化アニメとかって一発当てるといけるかも\" style=\"position:relative;\"><a href=\"#%E6%93%AC%E4%BA%BA%E5%8C%96%E3%82%A2%E3%83%8B%E3%83%A1%E3%81%A8%E3%81%8B%E3%81%A3%E3%81%A6%E4%B8%80%E7%99%BA%E5%BD%93%E3%81%A6%E3%82%8B%E3%81%A8%E3%81%84%E3%81%91%E3%82%8B%E3%81%8B%E3%82%82\" aria-label=\"擬人化アニメとかって一発当てるといけるかも permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>擬人化アニメとかって一発当てるといけるかも？</h2>\n<p>という邪な考えが浮かんで思いついたのが、銀行×美少女！</p>\n<p>だって全国に銀行たくさんあるし、外国の銀行もあるし、メガバンクには赤、青、緑とペンライトの色まで決まってるのですから。</p>\n<p>これはもうやるしかないですよね。青はきっとポテンシャルはあるけどよくケガをするんですね。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p><del>デレステに全財産つぎ込んだあの日の思い出は今蘇った。</del></p>","fields":{"slug":"2021/03/15/uma"},"frontmatter":{"tags":["ぼやき","ウマ娘"],"templateKey":"blog-post","slug":"2021/03/15/uma","id":null,"title":"グラスワンダーちゃんを1着にさせてあげられなくてGitHubの草が生えない問題","url":"2021/03/15/uma","date":"2021-03-15T14:51:33.109Z","description":"コミットが手につきません。","headerImage":"https://i.imgur.com/SA5rvFW.png","year":"2021","month":"03"}}},{"node":{"id":"5af3fdd2-e9f8-5f11-8abc-d8b660374e61","html":"<p><a href=\"https://react-hook-form.com/jp/\" target=\"_blank\" rel=\"noopener noreferrer\">React Hook Form</a>が便利らしいと聞いたので使ってみることにしました。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#react-hook-form\">React Hook Form</a></p>\n</li>\n<li>\n<p><a href=\"#getformio\">Getform.io</a></p>\n</li>\n<li>\n<p><a href=\"#react-hook-form--getformio\">React Hook Form + Getform.io</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9F%E3%82%B3%E3%83%BC%E3%83%89\">実コード</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%A7%A3%E8%AA%AC\">解説</a></p>\n<ul>\n<li><a href=\"#%E6%BA%96%E5%82%99\">準備</a></li>\n<li><a href=\"#submit\">Submit</a></li>\n<li><a href=\"#form%E3%82%92%E6%9B%B8%E3%81%8F\">Formを書く</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"react-hook-form\" style=\"position:relative;\"><a href=\"#react-hook-form\" aria-label=\"react hook form permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook Form</h2>\n<p>皆さん、<a href=\"https://react-hook-form.com/jp/\" target=\"_blank\" rel=\"noopener noreferrer\">React Hook Form</a>を知ってますか？</p>\n<p>最近トレンドに乗っかってきた、<strong>Form</strong>を<strong>React Hooks</strong>で簡単に作ることのできる代物です。</p>\n<p><img src=\"https://i.imgur.com/2dqEW7L.png\" alt=\"img\"></p>\n<p>特徴として、Hooksを使って簡単にFormが作れる、そして再レンダリングが最小限に抑えられているのでパフォーマンスも高い、らしいです。</p>\n<h2 id=\"getformio\" style=\"position:relative;\"><a href=\"#getformio\" aria-label=\"getformio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getform.io</h2>\n<p><a href=\"https://getform.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Getform.io</a>はフォームのバックエンドを提供するすばらしいサービスです。</p>\n<p>詳しくは<a href=\"https://blog.tubone-project24.xyz/2021/02/13/netlify-github-action#getformio\" target=\"_blank\" rel=\"noopener noreferrer\">こちらの過去記事</a>をご確認いただければと思います。</p>\n<h2 id=\"react-hook-form--getformio\" style=\"position:relative;\"><a href=\"#react-hook-form--getformio\" aria-label=\"react hook form  getformio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook Form + Getform.io</h2>\n<p><strong>合体！</strong></p>\n<p><img src=\"https://i.imgur.com/FzX8di6.jpg\" alt=\"img\"></p>\n<p>だめ～となるかと思いましたがうまいことできました。</p>\n<p><img src=\"https://i.imgur.com/yYJBK98.jpg\" alt=\"img\"></p>\n<p>今回はこちらの2技術を使って、お問い合わせフォームを作っていきます。</p>\n<h2 id=\"実コード\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"実コード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実コード</h2>\n<p>こんな感じのコンポーネントができました。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>useState<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useForm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-hook-form\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Button <span class=\"token keyword\">from</span> <span class=\"token string\">\"./button\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ContactForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>serverState<span class=\"token punctuation\">,</span> setServerState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> submitting<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>ok<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> register<span class=\"token punctuation\">,</span> handleSubmit<span class=\"token punctuation\">,</span> errors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useForm</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Inputs<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleServerResponse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ok<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setServerState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> submitting<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> ok<span class=\"token punctuation\">,</span> msg <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Inputs<span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subject\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">)</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://getform.io/f/8xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> formData\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">handleServerResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Submitted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">handleServerResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>onSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Your Name<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your name\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span> Your email<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your email\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z0-9.!#$%&amp;'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>email <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required and only email format<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n      Subject<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"subject\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n      maxLength<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">30</span><span class=\"token punctuation\">}</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Subject here...\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n      Message<span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>textarea\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"message\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Something writing...\"</span> rows<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> cols<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">25</span><span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>message <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button dark<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>serverState<span class=\"token punctuation\">.</span>submitting <span class=\"token operator\">&amp;&amp;</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">}</span> disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>serverState<span class=\"token punctuation\">.</span>submitting <span class=\"token operator\">&amp;&amp;</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span> serverState<span class=\"token punctuation\">.</span>submitting <span class=\"token operator\">&amp;&amp;</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>ok <span class=\"token operator\">?</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>msg<span class=\"token operator\">:</span> <span class=\"token string\">'Submit'</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> ContactForm</code></pre></div>\n<h2 id=\"解説\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E8%AA%AC\" aria-label=\"解説 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解説</h2>\n<h3 id=\"準備\" style=\"position:relative;\"><a href=\"#%E6%BA%96%E5%82%99\" aria-label=\"準備 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>準備</h3>\n<p>まず、フォームの項目に該当するTypeを作ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Inputs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  subject<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>今回は名前、email、題名、メッセージを設定します。</p>\n<p>次に<strong>React Hook Form</strong>のuseFormを使って<strong>register</strong>などを作っていきます。正直これができれば基本的な機能は8割くらい完成です。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> register<span class=\"token punctuation\">,</span> handleSubmit<span class=\"token punctuation\">,</span> errors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useForm</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Inputs<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>とりあえず用意するのは、formのrefに設定する<strong>register</strong>、onSubmitをコントロールできる<strong>handleSubmit</strong>、requireを検査できる<strong>errors</strong>です。</p>\n<p>ほかにも、form全体の項目検査のformState.isValidなども使うことができます。</p>\n<h3 id=\"submit\" style=\"position:relative;\"><a href=\"#submit\" aria-label=\"submit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Submit</h3>\n<p>そして肝心な送信(Submit)部分ですがこちらは<a href=\"https://blog.tubone-project24.xyz/2021/02/13/netlify-github-action#getformio\" target=\"_blank\" rel=\"noopener noreferrer\">前記事</a>とほぼ同じように<strong>onSubmit</strong>に合わせて処理する関数を用意して、formの<strong>onsubmit属性</strong>に渡してあげればいいだけです。</p>\n<p>........いいだけですが一つ注意として、渡す際に<strong>handleSubmit</strong>で関数をラップしないと、form情報がうまく取れない、ということです。忘れずに設定してくださいませ。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>onSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>またGetform.ioへのPOSTはJSONではなく<strong>mulitpart/form-data</strong>で渡さないと行けないので、FormDataにappendする形でFormのデータを差し込みます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Inputs<span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> formData <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subject\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">)</span>\n    formData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://getform.io/f/8xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> formData\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">handleServerResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Submitted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">handleServerResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>また、第二引数として、formのeventが取得できます。おそらくEventは<strong>React.BaseSyntheticEvent</strong>だとは思うのですがうまく型が通せなくて悩みだしてしまいましたのでとりあえずanyにしてしまいました。</p>\n<p>一応、<a href=\"https://github.com/react-hook-form/react-hook-form/discussions/4376\" target=\"_blank\" rel=\"noopener noreferrer\">こちら</a>で質問は投げてますが英語がへたくそで誰も答えてくれそうにありませんね。</p>\n<p>特にeventでデータを取る必要はなさそうですが、たとえば送信時にFormの内容をリセットするなどの処理を書きたいときは、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">handleServerResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Submitted!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>とやってあげればOKです。</p>\n<h3 id=\"formを書く\" style=\"position:relative;\"><a href=\"#form%E3%82%92%E6%9B%B8%E3%81%8F\" aria-label=\"formを書く permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Formを書く</h3>\n<p>さて、あとは普通のFormを作るようにJSXを書いていきます。</p>\n<p>唯一違うところはinputやtextareaのref属性にregisterをつけなければいけないですが、それだけで大丈夫です。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">      <span class=\"token operator\">&lt;</span>textarea\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"message\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Something writing...\"</span> rows<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> cols<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">25</span><span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>ちなみに、registerのパラメーターで、必須項目やパターンの検査もできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your email\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z0-9.!#$%&amp;'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>また、検査が通っていないときに警告メッセージを出すのはerrorsをつかうことで実現できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Form部分をすべて実装するとこんな感じです。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>onSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>Your Name<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your name\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span> Your email<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"email\"</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your email\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pattern<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z0-9.!#$%&amp;'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>email <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required and only email format<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n      Subject<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input\n      name<span class=\"token operator\">=</span><span class=\"token string\">\"subject\"</span>\n      type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n      maxLength<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">30</span><span class=\"token punctuation\">}</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Subject here...\"</span>\n      ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>subject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n      Message<span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>textarea\n        name<span class=\"token operator\">=</span><span class=\"token string\">\"message\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Something writing...\"</span> rows<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> cols<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">25</span><span class=\"token punctuation\">}</span> ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>errors<span class=\"token punctuation\">.</span>message <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>This field <span class=\"token keyword\">is</span> required<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Button dark<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>serverState<span class=\"token punctuation\">.</span>submitting <span class=\"token operator\">&amp;&amp;</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">}</span> disabled<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>serverState<span class=\"token punctuation\">.</span>submitting <span class=\"token operator\">&amp;&amp;</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span> serverState<span class=\"token punctuation\">.</span>submitting <span class=\"token operator\">&amp;&amp;</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>ok <span class=\"token operator\">?</span> serverState<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>msg<span class=\"token operator\">:</span> <span class=\"token string\">'Submit'</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span></code></pre></div>\n<p>もう完成です。実に簡単ですね。</p>\n<p>React Hook Formを使わないと、<a href=\"https://blog.tubone-project24.xyz/2021/02/13/netlify-github-action#getformio\" target=\"_blank\" rel=\"noopener noreferrer\">前記事</a>のように、formのonChangeのたびに、setStateしなきゃいけないのですが、すっきり実装できました。</p>\n<p>React Hook Formを使わない場合、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n<span class=\"token punctuation\">(</span>中略<span class=\"token punctuation\">)</span>\n                  <span class=\"token operator\">&lt;</span>input\n                    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n                    name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>\n                    className<span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span>\n                    maxLength<span class=\"token operator\">=</span><span class=\"token string\">\"30\"</span>\n                    minLength<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span>\n                    required\n                    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your name\"</span>\n                    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n                  <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>となります。</p>\n<p>出来上がりはただのFormですのでかっこいいCSSを当ててくださいね。</p>\n<p><img src=\"https://i.imgur.com/DsrFLOE.png\" alt=\"img\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>楽に実装できたので余った時間は担当<strong>ウマ娘</strong>に捧げます。</p>","fields":{"slug":"2021/03/07/react-hook-form"},"frontmatter":{"tags":["JavaScript","React","getform.io"],"templateKey":"blog-post","slug":"2021/03/07/react-hook-form","id":null,"title":"React Hook FormとGetform.ioを使って、お問い合わせフォームを作ろう！","url":"2021/03/07/react-hook-form","date":"2021-03-07T13:03:39.605Z","description":"最近人気のReact Hook FormをGetform.ioと組み合わせてお問い合わせフォームを作りましょう。","headerImage":"https://i.imgur.com/DsrFLOE.png","year":"2021","month":"03"}}},{"node":{"id":"425aad8e-9c53-56c6-b301-a81118d18854","html":"<p>新しいデスクトップだ!!</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#2021%E5%B9%B4%E3%81%AE%E6%96%B0%E3%81%97%E3%81%84%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%81%AF%E3%81%93%E3%82%8C%E3%81%A0\">2021年の新しいデスクトップはこれだ!!</a></li>\n</ul>\n</div>\n<h2 id=\"2021年の新しいデスクトップはこれだ\" style=\"position:relative;\"><a href=\"#2021%E5%B9%B4%E3%81%AE%E6%96%B0%E3%81%97%E3%81%84%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%81%AF%E3%81%93%E3%82%8C%E3%81%A0\" aria-label=\"2021年の新しいデスクトップはこれだ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2021年の新しいデスクトップはこれだ!!</h2>\n<p>会社で使っていたBYODのディスプレーを持ち帰りましたので新しいディスプレーを追加しました。</p>\n<p><img src=\"https://i.imgur.com/iffdNyK.jpg\" alt=\"img\"></p>\n<p><img src=\"https://i.imgur.com/JtOY1Vn.jpg\" alt=\"img\"></p>","fields":{"slug":"2021/03/07/new-desktop"},"frontmatter":{"tags":["ぼやき"],"templateKey":"blog-post","slug":"2021/03/07/new-desktop","id":null,"title":"2021年の新しいデスクトップはこれだ！！","url":"2021/03/07/new-desktop","date":"2021-03-07T11:20:28.470Z","description":"2021年の新しいデスクトップはこれだ！！","headerImage":"https://i.imgur.com/JtOY1Vn.jpg","year":"2021","month":"03"}}},{"node":{"id":"54f0c324-5423-509d-989a-978d998d1f61","html":"<p>日々の喧噪から解放されたい。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#netlify\">Netlify</a></li>\n<li><a href=\"#%E3%81%93%E3%81%AE%E6%82%A9%E3%81%BFgithub-actions%E3%81%AB%E3%81%8A%E4%BB%BB%E3%81%9B%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84\">この悩みGitHub Actionsにお任せください</a></li>\n<li><a href=\"#netlify%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E6%B4%97%E3%81%84%E5%87%BA%E3%81%97%E3%81%A6%E8%87%AA%E5%89%8D%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">Netlifyのビルド時やっていることを洗い出して自前でやってみる</a></li>\n<li><a href=\"#gatsby-plugin-minify\">gatsby-plugin-minify</a></li>\n<li><a href=\"#imgur%E3%82%92%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E7%94%BB%E5%83%8F%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8%E3%83%AA%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A1%E3%82%83%E3%81%86\">imgurを使うことで、画像ホスティングとリサイズを同時にやっちゃう</a></li>\n<li><a href=\"#getformio\">getform.io</a></li>\n<li><a href=\"#github-actions%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E3%81%A8%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">GitHub Actionsでビルドとデプロイ</a></li>\n<li><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></li>\n</ul>\n</div>\n<h2 id=\"netlify\" style=\"position:relative;\"><a href=\"#netlify\" aria-label=\"netlify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Netlify</h2>\n<p>みなさんもご存じ超便利ありがたサービスNetlifyですが、<strong>無料で使ってる貧民</strong>には毎月とある悩みがでてきます。</p>\n<p><em>今月のビルド時間は残り○○分</em></p>\n<p><img src=\"https://i.imgur.com/TSm24w0.png\" alt=\"img\"></p>\n<p>NetlifyはGitHubのレポジトリと連携して、フロントのビルドを実行したうえで、デプロイするという超便利機能があるのですが、このビルドを回すのに時間の制約があり、</p>\n<p>無料民だと月300分となっております。(それ以上はPro版月19ドル課金すれば問題なく使えます。課金も経験済み)</p>\n<p>300分あれば大丈夫そう、とそう思う気もしなくなくもないですが、</p>\n<p><img src=\"https://i.imgur.com/7gtZWX5.jpg\" alt=\"img\"></p>\n<p>複数レポジトリにわたってNetlifyを使っていたり、Gatsby.jsで画像をたくさん使っていて<strong>Sharp</strong>の画像リサイズに時間がかかったり、<strong>Dependabot</strong>で定期的にPRが出てPreview deployが発生したりすると\n案外ぎりぎりだったりします。</p>\n<p><img src=\"https://i.imgur.com/y7ixbEG.png\" alt=\"img\"></p>\n<p>なので、私のような貧民は月末になると、Netlifyのビルド時間が気になって<strong>このブログの記事を書かなくなったり</strong>、<strong>サイトリファクターのペースが落ちて</strong>しまいます。</p>\n<p>特にブログ更新は顕著で、例えば今書いている記事も通勤の電車のなかでスマホから書いているわけなので、細かくコミットを打って保存したいのですが、コミットを打ってプッシュしてしまうと、ビルドが走ることになるので、WIPでのコミットが億劫になり、結果的に家のようなまとめてプッシュできるような作業スペースがある場所でないと、\nブログを書かなくなってしまいました。</p>\n<p>せっかく<a href=\"https://blog.tubone-project24.xyz/2019-09-01-netlify-and-gatsby#cms%E3%81%AE%E7%AE%A1%E7%90%86%E7%94%BB%E9%9D%A2%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\" target=\"_blank\" rel=\"noopener noreferrer\">Netlify CMS化</a>した意味がないですね。</p>\n<h2 id=\"この悩みgithub-actionsにお任せください\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%81%AE%E6%82%A9%E3%81%BFgithub-actions%E3%81%AB%E3%81%8A%E4%BB%BB%E3%81%9B%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84\" aria-label=\"この悩みgithub actionsにお任せください permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>この悩みGitHub Actionsにお任せください</h2>\n<p>ということでこの悩み、GitHub Actionsで解決してみたいと思います。</p>\n<p>なんか工務店のCMみたいな表現になってしまいました。</p>\n<p><img src=\"https://i.imgur.com/JlvUJ4zl.png\" alt=\"ojisan\"></p>\n<h2 id=\"netlifyのビルド時やっていることを洗い出して自前でやってみる\" style=\"position:relative;\"><a href=\"#netlify%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E6%99%82%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E6%B4%97%E3%81%84%E5%87%BA%E3%81%97%E3%81%A6%E8%87%AA%E5%89%8D%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"netlifyのビルド時やっていることを洗い出して自前でやってみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Netlifyのビルド時やっていることを洗い出して自前でやってみる</h2>\n<p>基本的にNetlifyがビルド時やってることは、例えばGatsby.jsであれば、gatsby buildコマンドを実行し、特定のディレクトリー(大概は./public)に配置されたビルド済みJSをデプロイする動きなので、\nそれをそっくりGitHub Actionsに移行すればいいのですが、Netlifyがビルド済みJSに対して後処理(PostProcess)してるパターンもあります。</p>\n<p>私の場合、JSやイメージを最適化してくれる<strong>Asset optimization</strong>とFormタグに属性をつければ勝手にFormを作ってくれる<strong>Form detection</strong>の二つが設定されていましたのでそれぞれまず無効化します。</p>\n<p>Form detectionの解説は<a href=\"https://blog.tubone-project24.xyz/2019/09/30/netlify-form\" target=\"_blank\" rel=\"noopener noreferrer\">こちら</a>を参照ください。</p>\n<p><img src=\"https://i.imgur.com/ytjbJQA.png\" alt=\"img\"></p>\n<p><img src=\"https://i.imgur.com/LfL70Br.png\" alt=\"img\"></p>\n<p>こちら、Netlifyで実施してくれなくなりますので、こちらで実装し直す必要があります。</p>\n<h2 id=\"gatsby-plugin-minify\" style=\"position:relative;\"><a href=\"#gatsby-plugin-minify\" aria-label=\"gatsby plugin minify permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gatsby-plugin-minify</h2>\n<p>Asset optimizationのうち、JSやCSSのminiferは<a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-minify/\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby-plugin-minify</a>を使うことでhtmlやJS、CSSをminifyできます。</p>\n<p>インストールはいつも通りNPM(yarn)から、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install gatsby-plugin-minify</code></pre></div>\n<p>使い方はgatsby-config.jsのpluginsに次のように設定すればできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    {\n      resolve: 'gatsby-plugin-minify',\n      options: {\n        caseSensitive: false,\n        collapseBooleanAttributes: true,\n        useShortDoctype: false,\n        removeEmptyElements: false,\n        removeComments: true,\n        removeAttributeQuotes: false,\n        minifyCSS: true,\n        minifyJS: true,\n      },\n    },</code></pre></div>\n<p>minifyCSSとminifyJSをtrueにすることにより、CSSについては<a href=\"https://github.com/jakubpawlowicz/clean-css\" target=\"_blank\" rel=\"noopener noreferrer\">clean-css</a>、JSについては<a href=\"https://github.com/mishoo/UglifyJS\" target=\"_blank\" rel=\"noopener noreferrer\">UglifyJS</a>を使って一緒にminifyされます。また、gatsby-plugin-minifyの裏側は<a href=\"https://github.com/kangax/html-minifier\" target=\"_blank\" rel=\"noopener noreferrer\">html-minifier</a>をgatsby-node.jsでpostbuildで全掛けしているだけなので、細かいオプションは<a href=\"https://github.com/kangax/html-minifier#options-quick-reference\" target=\"_blank\" rel=\"noopener noreferrer\">html-minifier</a>で設定できる感じです。</p>\n<p>ちなみに、気を付けないといけないのが<strong>removeAttributeQuotes</strong>のオプションをfalseにすること。</p>\n<p>これをtrueにすると、HTMLタグ内のアトリビュートにダブルクオートが入らなくなりちょっとファイルが軽くなるのですが、<a href=\"https://berss.com/feed/Find.aspx\" target=\"_blank\" rel=\"noopener noreferrer\">berss.com</a>のようにサイトのRSSリンクを取得するようなシステムでうまく読み込めなくなってしまい、サイト更新が最悪通知できなくなってしまう現象が発生しました。</p>\n<p>これで1日使ってしまった...。</p>\n<p>RSSのリンクをページのLinkとして仕込んでいる人は要注意です。</p>\n<h2 id=\"imgurを使うことで画像ホスティングとリサイズを同時にやっちゃう\" style=\"position:relative;\"><a href=\"#imgur%E3%82%92%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E7%94%BB%E5%83%8F%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A8%E3%83%AA%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E5%90%8C%E6%99%82%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A1%E3%82%83%E3%81%86\" aria-label=\"imgurを使うことで画像ホスティングとリサイズを同時にやっちゃう permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>imgurを使うことで、画像ホスティングとリサイズを同時にやっちゃう</h2>\n<p><a href=\"https://imgur.com/\" target=\"_blank\" rel=\"noopener noreferrer\">imgur</a>というサービスがあります。</p>\n<p>主にRedditとかGifをあげるための画像ホスティングサービスとして有名なのですが、こちらを使うことで簡単に画像のリサイズとホスティングを実現できるため、このブログではimgurを使ってます。</p>\n<p>画像URLの後ろに画像サイズに合わせたキーワードを入れることで実現できます。</p>\n<p>例えばこちらのURLの画像を、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://i.imgur.com/Wfz9G0B.png</code></pre></div>\n<p>160x160にリサイズするには後ろに<strong>b</strong>をくっつけます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://i.imgur.com/Wfz9G0Bb.png</code></pre></div>\n<p>これで、画像最適化も完了です。</p>\n<h2 id=\"getformio\" style=\"position:relative;\"><a href=\"#getformio\" aria-label=\"getformio permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getform.io</h2>\n<p><a href=\"https://getform.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Getform.io</a>はフォームのバックエンドを提供するすばらしいサービスです。</p>\n<p>便利なインテグレーションを使うには有料版が必要ですが、フォームに投稿されたら指定したメールアドレスに通知メール飛ばす、くらいのことであれば無料でできます。</p>\n<p>これで、NetlifyのForm detectionを置き換えていきます。</p>\n<p>まず、新しいフォームを作ると、FormのAction先URLが発行できます。</p>\n<p>Formの作り方は下記のブログにわかりやすく纏めてあったので参照いただければと思います。</p>\n<p><a href=\"https://blog.nakamu.life/posts/getform-io\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.nakamu.life/posts/getform-io</a></p>\n<p>さて、Formができたらチュートリアルに沿ってそのまま、FormタグのactionにこちらのURLを設定してもいいのですが、GetFormは無料版だと、<strong>Form投稿後のThanksページが設定</strong>できません。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!--\n* Add your getform endpoint into \"action\" attribute\n* Set a unique \"name\" field\n* Start accepting submissions\n--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{getform-endpoint}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POST<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Send<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"https://i.imgur.com/sT5vhFE.png\" alt=\"img\"></p>\n<p>まぁこれでも十分なのですが、せっかく<strong>React</strong>を使ってるので、裏側でgetform.ioのURLをPOST fetchしながら、actionsで定義した自分のThanks URLに飛ばすように指定しましょう。</p>\n<p>まずは、Formに<strong>onSubmit</strong>を設定します。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\">        <span class=\"token operator\">&lt;</span>form\n              name<span class=\"token operator\">=</span><span class=\"token string\">\"contact\"</span>\n              method<span class=\"token operator\">=</span><span class=\"token string\">\"post\"</span>\n              action<span class=\"token operator\">=</span><span class=\"token string\">\"/thanks/\"</span>\n<span class=\"gatsby-highlight-code-line\">              onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span></span>            <span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"icon-user\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>Your name<span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>input\n                    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n                    name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>\n                    className<span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span>\n                    maxLength<span class=\"token operator\">=</span><span class=\"token string\">\"30\"</span>\n                    minLength<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span>\n                    required\n                    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your name\"</span>\n                    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>\n                  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>そして、別途にonSubmitで発火する関数を定義します。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://getform.io/f/xxxxxxxxxxxxxxxxxxxxxxxxx'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> Contact<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'form-name'</span><span class=\"token operator\">:</span> form<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Formの送信なので、fetchでは<a href=\"https://developer.mozilla.org/ja/docs/Web/API/FormData\" target=\"_blank\" rel=\"noopener noreferrer\">FormData</a>に要素をappendしたものを送信しないといけません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  static encode(data) {\n    const formData = new FormData();\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(data)) {\n      formData.append(key, data[key]);\n    }\n    return formData;\n  }</code></pre></div>\n<p>繰り返しになりますがReactではFormで、actionのほか、onSubmitを関数としてできます。</p>\n<p>ただし、onSubmitが押されたタイミングで、Formの入力項目をPOST Fetchで渡さないといけないので、Formの入力で発生するchangeEventごとに、Formの値をstateとして保存しておくようにします。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token function\">handleAttachment</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span>  \n  <span class=\"token punctuation\">(</span>中略<span class=\"token punctuation\">)</span>\n\n                <span class=\"token operator\">&lt;</span>label<span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"icon-user\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>nbsp<span class=\"token punctuation\">;</span>Your name<span class=\"token operator\">&lt;</span>br <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n                  <span class=\"token operator\">&lt;</span>input\n                    type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n                    name<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span>\n                    className<span class=\"token operator\">=</span><span class=\"token string\">\"form-control\"</span>\n                    maxLength<span class=\"token operator\">=</span><span class=\"token string\">\"30\"</span>\n                    minLength<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span>\n                    required\n                    placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"Enter your name\"</span>\n<span class=\"gatsby-highlight-code-line\">                    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span></span>                  <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>また、onSubmitを使ってしまうと、Form規定のactionでは飛ばなくなるので自前でGatsbyのnavigateを使ってPost処理が終わったらThanksページに飛ぶようにします。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\">  <span class=\"token function\">handleSubmit</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> form <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://getform.io/f/897f187e-876d-42a7-b300-7c235af72e6d'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> Contact<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">'form-name'</span><span class=\"token operator\">:</span> form<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">navigateTo</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これでGetForm無料版でも自前のThanksページを作ることができます。</p>\n<p><img src=\"https://i.imgur.com/gumRkbF.png\" alt=\"img\"></p>\n<h2 id=\"github-actionsでビルドとデプロイ\" style=\"position:relative;\"><a href=\"#github-actions%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E3%81%A8%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\" aria-label=\"github actionsでビルドとデプロイ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actionsでビルドとデプロイ</h2>\n<p>ここまで来たらあとはGitHub Actionsでビルドとデプロイを行なうだけです。</p>\n<p>masterブランチへのPRでPreviewデプロイ、masterへのコミットで本番デプロイをするように2つactionsを作ります。</p>\n<p>まずはPreviewデプロイ.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DeployToNetlifyPreview\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout source code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cache node_modules\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> node_modules\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.OS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>build<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/package-lock.json')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            ${{ runner.OS }}-build-\n            ${{ runner.OS }}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> 12.x\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> npm install and build\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">GATSBY_GITHUB_CLIENT_SECRET</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_GITHUB_CLIENT_SECRET<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_GITHUB_CLIENT_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_GITHUB_CLIENT_ID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_SEARCH_API_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_SEARCH_API_KEY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_INDEX_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_INDEX_NAME<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_APP_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_APP_ID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_ADMIN_API_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_ADMIN_API_KEY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">FAUNADB_SERVER_SECRET</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.FAUNADB_SERVER_SECRET<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm install\n          npm run build</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to netlify\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npx netlify<span class=\"token punctuation\">-</span>cli deploy <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dir=./public <span class=\"token punctuation\">></span> cli.txt\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NETLIFY_AUTH_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_AUTH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">NETLIFY_SITE_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_SITE_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cat cli.txt\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          cat cli.txt\n          sed -i -z 's/\\n/\\\\n/g' cli.txt</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Post Netlify CLI Comment\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">URL</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.event.pull_request.comments_url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          curl -X POST \\\n               -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n               -d \"{\\\"body\\\": \\\"$(cat cli.txt)\\\"}\" \\\n               ${URL}</span></code></pre></div>\n<p>Node.js setupやnpm install, buildはいつも通りです。</p>\n<p>GitHub ActionsではSecretを指定できますので、Algolia searchやFaunaDBのAPIキーはシークレットとしてビルド時の環境変数で渡してます。</p>\n<p>ちなみに、環境変数で<strong>GATSBY_XXXX</strong>としておくと、ビルドされたJSにも環境変数が入る形になります。（JSから環境変数を使う場合はこれを忘れないこと。）これ結構詰まるポイント。</p>\n<p>デプロイには<a href=\"https://docs.netlify.com/cli/get-started/\" target=\"_blank\" rel=\"noopener noreferrer\">netlify-cli</a>を使います。</p>\n<p>必要な環境変数はサイトIDとAUTH TOKENです。</p>\n<p>ちょっと特徴として、netlify-cliでデプロイが成功すると、<strong>デプロイURLが標準出力</strong>に出ますので、それをいったん適当なtextファイルに書き出し、</p>\n<p>PRコメントにもURLを送るようにしています。</p>\n<p>GitHub Actionsの素晴らしいところは、GitHub TOKENについては、特に設定しなくてもsecrets.GITHUB_TOKENで取り出すことができますので簡単にPRコメントに送信できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to netlify\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npx netlify<span class=\"token punctuation\">-</span>cli deploy <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dir=./public <span class=\"token punctuation\">></span> cli.txt\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NETLIFY_AUTH_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_AUTH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">NETLIFY_SITE_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_SITE_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cat cli.txt\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          cat cli.txt\n          sed -i -z 's/\\n/\\\\n/g' cli.txt</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Post Netlify CLI Comment\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">URL</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.event.pull_request.comments_url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          curl -X POST \\\n               -H \"Authorization: token ${GITHUB_TOKEN}\" \\\n               -d \"{\\\"body\\\": \\\"$(cat cli.txt)\\\"}\" \\\n               ${URL}</span></code></pre></div>\n<p>次に本番へのデプロイです。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DeployToNetlifyPRD\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout source code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cache node_modules\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> node_modules\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.OS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>build<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/package-lock.json')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n            ${{ runner.OS }}-build-\n            ${{ runner.OS }}</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> 12.x\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> npm install and build\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">GATSBY_GITHUB_CLIENT_SECRET</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_GITHUB_CLIENT_SECRET<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_GITHUB_CLIENT_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_GITHUB_CLIENT_ID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_SEARCH_API_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_SEARCH_API_KEY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_INDEX_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_INDEX_NAME<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_APP_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_APP_ID<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">GATSBY_ALGOLIA_ADMIN_API_KEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.GATSBY_ALGOLIA_ADMIN_API_KEY<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">FAUNADB_SERVER_SECRET</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>secrets.FAUNADB_SERVER_SECRET<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          npm install\n          npm run build</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to netlify\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npx netlify<span class=\"token punctuation\">-</span>cli deploy <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>prod <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dir=./public\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NETLIFY_AUTH_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_AUTH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">NETLIFY_SITE_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_SITE_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>ほとんど同じですが、netlify-cliでdeployコマンドに --prodオプションを入れることで、本番環境へデプロイされます。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy to netlify\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npx netlify<span class=\"token punctuation\">-</span>cli deploy <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>prod <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>dir=./public\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">NETLIFY_AUTH_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_AUTH_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">NETLIFY_SITE_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.NETLIFY_SITE_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>これで、Netlifyのビルド時間は0になり、精神的に安心できるようになりました。</p>\n<p><img src=\"https://i.imgur.com/ugdUr9l.png\" alt=\"img\"></p>\n<p>リファクタや記事の執筆もはかどっていいですね!!</p>","fields":{"slug":"2021/02/13/netlify-github-action"},"frontmatter":{"tags":["JavaScript","Netligy","Gatsby.js"],"templateKey":"blog-post","slug":"2021/02/13/netlify-github-action","id":null,"title":"Netlifyのビルド時間をGitHub Actionsで0時間にして月末のヒヤヒヤから解放されよう！","url":"2021/02/13/netlify-github-action","date":"2021-02-13T01:21:49.294Z","description":"Netlifyは便利ですが無料枠だと月のビルド時間が300分なので超過しないように神経を使います。GitHub Actionsを使えばそんな悩みから解放されるのでご紹介します。","headerImage":"https://i.imgur.com/fJTJeKD.png","year":"2021","month":"02"}}},{"node":{"id":"2864b0d2-d0a2-5cb0-a131-dca7bc8d8482","html":"<p>腰が痛い.</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#aws%E3%81%AE%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E7%A2%BA%E8%AA%8D%E9%9B%A3%E3%81%97%E3%81%84%E3%82%88%E3%81%AD\">AWSのステータス確認難しいよね</a></li>\n<li><a href=\"#%E3%82%AF%E3%83%93%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9E\">クビになるぞ！</a></li>\n<li><a href=\"#nextjs\">Next.js</a></li>\n<li><a href=\"#material-table\">Material Table</a></li>\n<li><a href=\"#recoil\">Recoil</a></li>\n<li><a href=\"#%E6%80%9D%E3%82%8F%E3%81%AC%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4-material-tables%E3%81%A7recoil%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84\">思わぬ落とし穴 Material TablesでRecoilが使えない</a></li>\n<li><a href=\"#chartjs\">Chart.js</a></li>\n<li><a href=\"#vercel%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">Vercelにデプロイ</a></li>\n<li><a href=\"#%E5%AE%8C%E6%88%90\">完成</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n<li><a href=\"#20210220%E8%BF%BD%E8%A8%98\">2021/02/20追記</a></li>\n</ul>\n</div>\n<h2 id=\"awsのステータス確認難しいよね\" style=\"position:relative;\"><a href=\"#aws%E3%81%AE%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9%E7%A2%BA%E8%AA%8D%E9%9B%A3%E3%81%97%E3%81%84%E3%82%88%E3%81%AD\" aria-label=\"awsのステータス確認難しいよね permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWSのステータス確認難しいよね</h2>\n<p>AWSを使ったことのある人ならばわかると思いますが、公式がAWSの障害情報を掲載する<a href=\"https://status.aws.amazon.com/\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Service Health Dashboard</a>があまり使いやすくないです。</p>\n<p><img src=\"https://i.imgur.com/XghDulZ.png\" alt=\"img\"></p>\n<p>それぞれのリージョンの障害がRSSで配信される形式になっているのですが、わざわざRSSを登録するのもめんどくさい。Slackとかの連携に乗っけるのもそれはそれで便利なのですが、そもそもSlackを見ていないほかの人でも障害情報を共有したいです。</p>\n<p>実は、AWS Service Health Dashboardの情報はJSONで取得できます。</p>\n<p><a href=\"https://status.aws.amazon.com/data.json\" target=\"_blank\" rel=\"noopener noreferrer\">https://status.aws.amazon.com/data.json</a></p>\n<p>こちらのJSONを活用して勉強がてら使いやすいダッシュボードを作っていきます。</p>\n<h2 id=\"クビになるぞ\" style=\"position:relative;\"><a href=\"#%E3%82%AF%E3%83%93%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%9E\" aria-label=\"クビになるぞ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>クビになるぞ！</h2>\n<p>最近、これといった新しい技術に触れておらず、このままだとクビになりそうなので、そろそろ重い腰を上げてNext.jsを勉強することにしました。</p>\n<p>また、Next.jsを使う場合はVercelが便利だよーとのことですので、こちらも使っていきます。</p>\n<h2 id=\"nextjs\" style=\"position:relative;\"><a href=\"#nextjs\" aria-label=\"nextjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js</h2>\n<p>Next.jsではpages/api配下に格納したコードについては、サーバーサイドとして振る舞います。</p>\n<p>クライアントから直接status情報がかかれたJSONを読みとってもよかったのですが、HTMLの面倒なサニタイジング処理やら、値の補完など面倒なことはサーバーサイドに持ってこようということで、\r\nstatusJSONを取得して、フロントに返却するサーバーコードを書いていきます。</p>\n<p>次のようなコードになりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NextApiRequest<span class=\"token punctuation\">,</span> NextApiResponse <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next'</span>\r\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AwsStatusResp</span> <span class=\"token punctuation\">{</span>\r\n  archive<span class=\"token operator\">:</span> AwsStatusArchive<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AwsStatusArchive</span> <span class=\"token punctuation\">{</span>\r\n  service_name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  summary<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  date<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  details<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  service<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> NextApiRequest<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> NextApiResponse<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  axios\r\n    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AwsStatusResp<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://status.aws.amazon.com/data.json'</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> handlerResp <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>archive<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/camelcase</span>\r\n        service_name<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>service_name<span class=\"token punctuation\">,</span>\r\n        summary<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">,</span>\r\n        region<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'management-console'</span><span class=\"token punctuation\">)</span>\r\n          <span class=\"token operator\">?</span> <span class=\"token string\">'global'</span>\r\n          <span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span>\r\n          <span class=\"token operator\">?</span> <span class=\"token string\">'global'</span>\r\n          <span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n        date<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\r\n        status<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span>\r\n        details<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>details<span class=\"token punctuation\">,</span>\r\n        service<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'management-console'</span><span class=\"token punctuation\">)</span>\r\n          <span class=\"token operator\">?</span> <span class=\"token string\">'management-console'</span>\r\n          <span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n        description<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>description\r\n          <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&lt;(\"[^\"]*\"|'[^']*'|[^'\">])*></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\r\n          <span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&amp;nbsp;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\r\n      <span class=\"token comment\">// eslint-disable-next-line no-console</span>\r\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>handlerResp<span class=\"token punctuation\">)</span>\r\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>handlerResp<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span>\r\n      res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">||</span> <span class=\"token number\">500</span>\r\n      res<span class=\"token punctuation\">.</span>statusMessage <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>statusText <span class=\"token operator\">||</span> <span class=\"token string\">'InternalServerError'</span>\r\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>statusText <span class=\"token operator\">||</span> <span class=\"token string\">'InternalServerError'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> handler</code></pre></div>\n<p>注意点として、必ずハンドラーはexport defaultを指定してあげないこと以外はいたって直感的なコードとなっております。</p>\n<p>Vercelに載っけるとわかるのですが、こちらのコード、Lambdaにデプロイされることになります。たしかに見覚えある感じですね。</p>\n<p>また、Next.jsと関係ないのですが、axiosのレスポンスに型がつけられるって知ってましたか？</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AwsStatusResp</span> <span class=\"token punctuation\">{</span>\r\n  archive<span class=\"token operator\">:</span> AwsStatusArchive<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AwsStatusArchive</span> <span class=\"token punctuation\">{</span>\r\n  service_name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  summary<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  date<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  details<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  description<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n  service<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n  axios\r\n    <span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>AwsStatusResp<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://status.aws.amazon.com/data.json'</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"material-table\" style=\"position:relative;\"><a href=\"#material-table\" aria-label=\"material table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Material Table</h2>\n<p>Material UI準拠のテーブルとして、Material Tableなるものがありましたので今回採用することにしました。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> MaterialTable <span class=\"token keyword\">from</span> <span class=\"token string\">'material-table'</span>\r\n<span class=\"token keyword\">import</span> tableIcons <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/tableIcons'</span>\r\n\r\n<span class=\"token operator\">&lt;</span>MaterialTable\r\n          icons<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>tableIcons<span class=\"token punctuation\">}</span>\r\n          columns<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\r\n            <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Service Name'</span><span class=\"token punctuation\">,</span> field<span class=\"token operator\">:</span> <span class=\"token string\">'service_name'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Service'</span><span class=\"token punctuation\">,</span> field<span class=\"token operator\">:</span> <span class=\"token string\">'service'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">:</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Region'</span><span class=\"token punctuation\">,</span> field<span class=\"token operator\">:</span> <span class=\"token string\">'region'</span><span class=\"token punctuation\">,</span> lookup<span class=\"token operator\">:</span> regionNameMapping <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token string\">'Summary'</span><span class=\"token punctuation\">,</span> field<span class=\"token operator\">:</span> <span class=\"token string\">'summary'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span>\r\n              title<span class=\"token operator\">:</span> <span class=\"token string\">'Date ('</span> <span class=\"token operator\">+</span> dayjs<span class=\"token punctuation\">.</span>tz<span class=\"token punctuation\">.</span><span class=\"token function\">guess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\r\n              field<span class=\"token operator\">:</span> <span class=\"token string\">'date'</span><span class=\"token punctuation\">,</span>\r\n              <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n                <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\r\n                  <span class=\"token punctuation\">{</span>dayjs\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">unix</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'YYYY-MM-DDTHH:mm:ssZ[Z]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\r\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n              defaultSort<span class=\"token operator\">:</span> <span class=\"token string\">'desc'</span><span class=\"token punctuation\">,</span>\r\n              type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span>\r\n              title<span class=\"token operator\">:</span> <span class=\"token string\">'Status'</span><span class=\"token punctuation\">,</span>\r\n              field<span class=\"token operator\">:</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">,</span>\r\n              lookup<span class=\"token operator\">:</span> statusMapping<span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\r\n          data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>aws<span class=\"token punctuation\">}</span>\r\n          detailPanel<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\r\n            <span class=\"token punctuation\">{</span>\r\n              tooltip<span class=\"token operator\">:</span> <span class=\"token string\">'Details'</span><span class=\"token punctuation\">,</span>\r\n              <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n                  <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>rowData<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"description\"</span><span class=\"token operator\">></span>\r\n                      <span class=\"token punctuation\">{</span>dayjs\r\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">unix</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>rowData<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'YYYY-MM-DDTHH:mm:ss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token string\">' '</span><span class=\"token punctuation\">}</span>\r\n                      <span class=\"token punctuation\">{</span>rowData<span class=\"token punctuation\">.</span>service_name<span class=\"token punctuation\">}</span>\r\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n                    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"code\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>rowData<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n                  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n                <span class=\"token punctuation\">)</span>\r\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\r\n          options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\r\n            filtering<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            grouping<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            exportButton<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n            exportFileName<span class=\"token operator\">:</span> <span class=\"token string\">'exported'</span><span class=\"token punctuation\">,</span>\r\n            headerStyle<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n              backgroundColor<span class=\"token operator\">:</span> <span class=\"token string\">'#e77f2f'</span><span class=\"token punctuation\">,</span>\r\n              color<span class=\"token operator\">:</span> <span class=\"token string\">'#FFF'</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          isLoading<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loading<span class=\"token punctuation\">}</span>\r\n          actions<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>\r\n            <span class=\"token punctuation\">{</span>\r\n              <span class=\"token comment\">// Issue: https://github.com/mbrn/material-table/issues/51</span>\r\n              <span class=\"token comment\">//@ts-ignore</span>\r\n              icon<span class=\"token operator\">:</span> tableIcons<span class=\"token punctuation\">.</span>BarChartIcon<span class=\"token punctuation\">,</span>\r\n              tooltip<span class=\"token operator\">:</span> <span class=\"token string\">'Show Bar Chart'</span><span class=\"token punctuation\">,</span>\r\n              isFreeAction<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n              disabled<span class=\"token operator\">:</span> loading<span class=\"token punctuation\">,</span>\r\n              <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token function\">setShowGraph</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showG<span class=\"token punctuation\">)</span>\r\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">{</span>\r\n              <span class=\"token comment\">// Issue: https://github.com/mbrn/material-table/issues/51</span>\r\n              <span class=\"token comment\">//@ts-ignore</span>\r\n              icon<span class=\"token operator\">:</span> tableIcons<span class=\"token punctuation\">.</span>Refresh<span class=\"token punctuation\">,</span>\r\n              tooltip<span class=\"token operator\">:</span> <span class=\"token string\">'Refresh Data'</span><span class=\"token punctuation\">,</span>\r\n              isFreeAction<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n              disabled<span class=\"token operator\">:</span> loading<span class=\"token punctuation\">,</span>\r\n              <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n                <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\r\n                <span class=\"token keyword\">await</span> <span class=\"token function\">getAwsStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\r\n          title<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">></span>\r\n              <span class=\"token operator\">&lt;</span>img src<span class=\"token operator\">=</span><span class=\"token string\">\"/awslogo.png\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n              <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"https://aws-health-dashboard.vercel.app/\"</span><span class=\"token operator\">></span>\r\n                <span class=\"token constant\">AWS</span> Health Dashboard\r\n              <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\r\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">}</span>\r\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>使い方もシンプルかつ比較的高機能でいい感じです。</p>\n<p>いい感じですが後述するRecoilとの相性問題とDatetimeの扱いが微妙なのがツラミでした。</p>\n<p>本当はDate型を渡してあげるとSearchableの際、カレンダーでの絞り込みができるのかなと思ったのですが、こちらがうまくいきませんでした。</p>\n<p>あと、微妙に型もおかしく例えば、actionsはactionを複数指定できるはずですが、型チェックで怒られるので、仕方なくts-ignoreしてます。</p>\n<p>あなたが直せばいいじゃんアゼルバイジャンって言われそうですが、めんどくさくなってしまいIssueだけあげてしまいました。申し訳ねぇ...。</p>\n<p><a href=\"https://github.com/mbrn/material-table/issues/2762\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/mbrn/material-table/issues/2762</a></p>\n<h2 id=\"recoil\" style=\"position:relative;\"><a href=\"#recoil\" aria-label=\"recoil permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recoil</h2>\n<p>RecoilとはReactの新しい状態管理ライブラリで、いわゆるReact HooksでGlobal Storeを作ろうというものです。</p>\n<p>基本的な使い方はまず、storeとしてatomという共有ステートを作成します。</p>\n<p>atomのkeyはプロジェクトで一意にする必要がありますが、今回はそこまで大規模なプロジェクトではないのでawsとかいう適当な名をつけてます。</p>\n<p>storeなので、store/aws.tsとして格納します。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> atom <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n\r\n<span class=\"token keyword\">const</span> awsState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'aws'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      <span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/camelcase</span>\r\n      service_name<span class=\"token operator\">:</span> <span class=\"token string\">'Auto Scaling (N. Virginia)'</span><span class=\"token punctuation\">,</span>\r\n      summary<span class=\"token operator\">:</span> <span class=\"token string\">'[RESOLVED] Example Error'</span><span class=\"token punctuation\">,</span>\r\n      date<span class=\"token operator\">:</span> <span class=\"token string\">'1542849575'</span><span class=\"token punctuation\">,</span>\r\n      status<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\r\n      details<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\r\n      description<span class=\"token operator\">:</span>\r\n        <span class=\"token string\">'The issue has been resolved and the service is operating normally.'</span><span class=\"token punctuation\">,</span>\r\n      service<span class=\"token operator\">:</span> <span class=\"token string\">'autoscaling'</span><span class=\"token punctuation\">,</span>\r\n      region<span class=\"token operator\">:</span> <span class=\"token string\">'us-east-1'</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  dangerouslyAllowMutability<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> awsState</code></pre></div>\n<p>次にステートを共有したいコンポーネントのルートにRecoilRootを設置します。</p>\n<p>Next.jsの場合、_app.tsxが全ページのルートにあたるのでここに置けばいいですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/app'</span>\r\n<span class=\"token keyword\">import</span> Head <span class=\"token keyword\">from</span> <span class=\"token string\">'next/head'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RecoilRoot <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> pageProps <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\r\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span>RecoilRoot<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>meta\r\n          name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span>\r\n          content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1, shrink-to-fit=no\"</span>\r\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">AWS</span> Health Dashboard<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>Component <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>pageProps<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RecoilRoot<span class=\"token operator\">></span>\r\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>そして、利用するときはuseRecoilStateをReact Hooksのように利用するだけです。簡単ですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> awsState <span class=\"token keyword\">from</span> <span class=\"token string\">'../store/aws'</span>\r\n<span class=\"token keyword\">import</span> showGraph <span class=\"token keyword\">from</span> <span class=\"token string\">'../store/showGraph'</span>\r\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\r\n<span class=\"token keyword\">import</span> dayjs <span class=\"token keyword\">from</span> <span class=\"token string\">'dayjs'</span>\r\n\r\ndayjs<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>utc<span class=\"token punctuation\">)</span>\r\ndayjs<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>timezone<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Alert</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> AlertProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>MuiAlert elevation<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> variant<span class=\"token operator\">=</span><span class=\"token string\">\"filled\"</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Table <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// 20200112: dangerouslyAllowMutabilityでできた</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>aws<span class=\"token punctuation\">,</span> setAws<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>awsState<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showG<span class=\"token punctuation\">,</span> setShowGraph<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>showGraph<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loading<span class=\"token punctuation\">,</span> setLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>slackBarOpen<span class=\"token punctuation\">,</span> setSlackBarOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>apiErrorMsg<span class=\"token punctuation\">,</span> setApiErrorMsg<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">getAwsStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAwsStatus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    axios\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/aws'</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">setAws</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\r\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span>\r\n        <span class=\"token function\">setSlackBarOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token function\">setApiErrorMsg</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>statusText <span class=\"token operator\">||</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token function\">setAws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>stateの読み込みはgetterから、書き込みはsetterから行います。</p>\n<p>React Hooksに慣れていれば簡単ですね。</p>\n<h2 id=\"思わぬ落とし穴-material-tablesでrecoilが使えない\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E3%82%8F%E3%81%AC%E8%90%BD%E3%81%A8%E3%81%97%E7%A9%B4-material-tables%E3%81%A7recoil%E3%81%8C%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84\" aria-label=\"思わぬ落とし穴 material tablesでrecoilが使えない permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思わぬ落とし穴 Material TablesでRecoilが使えない</h2>\n<p>Recoilのatomは基本値の書き換えはset stateを使うことが求められます。ですが、material tablesはテーブルを作るときにdataにIDの書き込みが発生するようでそのままだと怒られてしまいます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Cannot add property tableData, object is not extensible</code></pre></div>\n<p>これの解決策はRecoilにstateへの直接的な書き換えを許可することです。こちらはatomのoptionでdangerouslyAllowMutabilityを有効にすることで解決できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> atom <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n\r\n<span class=\"token keyword\">const</span> awsState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'aws'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n  dangerouslyAllowMutability<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>これがわかるのに半日くらい使っちまいました。</p>\n<h2 id=\"chartjs\" style=\"position:relative;\"><a href=\"#chartjs\" aria-label=\"chartjs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Chart.js</h2>\n<p>さて、無事にRecoilでstateの共有ができたのでせっかくなので別コンポーネントも作ります。</p>\n<p>意味があるかどうか不明ですが、AWSの障害発生状況を可視化してみようと思います。</p>\n<p>ということで、採用したのがChart.js。</p>\n<p>次のようにデータを渡すだけできれいめなグラフを書いてくれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRecoilValue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'recoil'</span>\r\n<span class=\"token keyword\">import</span> awsState <span class=\"token keyword\">from</span> <span class=\"token string\">'../store/aws'</span>\r\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\r\n  regionNameMapping<span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./const'</span>\r\n<span class=\"token keyword\">import</span> BarGraph <span class=\"token keyword\">from</span> <span class=\"token string\">'./barGraph'</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> AlertPerRegion <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n\r\n  <span class=\"token keyword\">const</span> aws <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilValue</span><span class=\"token punctuation\">(</span>awsState<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> labels <span class=\"token operator\">=</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\r\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>aws<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> regionNameMapping<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>region<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> r <span class=\"token keyword\">of</span> labels<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\r\n      aws\r\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> regionNameMapping<span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>region<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n        <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n          <span class=\"token keyword\">return</span> x <span class=\"token operator\">===</span> r <span class=\"token operator\">?</span> total <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> total\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\r\n      <span class=\"token operator\">&lt;</span>BarGraph labels<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>labels<span class=\"token punctuation\">}</span> data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>data<span class=\"token punctuation\">}</span> title<span class=\"token operator\">=</span><span class=\"token string\">\"Alert per region\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\r\n  <span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>どうでもいい実装ですが、各グラフを一覧で見れる画面を用意し、実際のグラフは遷移先で表示するようにしてます。</p>\n<p><img src=\"https://i.imgur.com/tfnpq4w.png\" alt=\"img\"></p>\n<p><img src=\"https://i.imgur.com/hpJ70fR.png\" alt=\"img\"></p>\n<h2 id=\"vercelにデプロイ\" style=\"position:relative;\"><a href=\"#vercel%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\" aria-label=\"vercelにデプロイ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Vercelにデプロイ</h2>\n<p>さて、実装ができたので後はVercelにあげるだけです。</p>\n<p>もうここはほとんど書くことがないのですが、Next.jsで作ったアプリケーションはVercelでレポジトリと使っているフレームワークを設定するだけで簡単にデプロイできてしまいます。</p>\n<p>これはすごい。</p>\n<h2 id=\"完成\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%88%90\" aria-label=\"完成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成</h2>\n<p>ということで、AWS Health Dashboardが完成しました。</p>\n<p>アクセスすると、Next.jsのapiをコールし、AWSのstatusを取得加工したものを返却します。</p>\n<p>フロントでは受け取ったデータをRecoilのatomに格納しつつ、material tableで表として描画します。</p>\n<p>また右上のグラフボタンを押すことで色々な切り口の可視化を行なうことができます。</p>\n<p><a href=\"https://aws-health-dashboard.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://aws-health-dashboard.vercel.app/</a></p>\n<p>できれば使う場面にならないことを祈りつつ、ご活用いただければとおもいます。</p>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>食わず嫌いでやらなかったNext.js+Recoilをやってみましたが、楽しく実装ができました。</p>\n<h2 id=\"20210220追記\" style=\"position:relative;\"><a href=\"#20210220%E8%BF%BD%E8%A8%98\" aria-label=\"20210220追記 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2021/02/20追記</h2>\n<p>2021/02/19～20にかけて起きた<a href=\"https://status.aws.amazon.com/rss/ec2-ap-northeast-1.rss\" target=\"_blank\" rel=\"noopener noreferrer\">AWS EC2障害</a>ですが、本ダッシュボードでは更新がされませんでした。</p>\n<p>どうやら、data.jsonはRSSとは違い、同期的に更新されないようです。</p>\n<p>大変ご迷惑をおかけしました。あらためて、改修しRSS更新にも対応できるように頑張ります。</p>","fields":{"slug":"2021/01/11/vercel-next"},"frontmatter":{"tags":["JavaScript","Next.js","Vercel","Recoil"],"templateKey":"blog-post","slug":"2021/01/11/vercel-next","id":null,"title":"Next.jsとVercelとRecoilとMaterial Tableを使ってAWSのステータスダッシュボードを作ってみた話","url":"2021/01/11/vercel-next","date":"2021-01-11T13:20:51.060Z","description":"Next.jsとVercelとRecoilとMaterial Tableを使ってAWSのステータスダッシュボードを作ってみた話です。","headerImage":"https://i.imgur.com/XblRysI.png","year":"2021","month":"01"}}},{"node":{"id":"6c140dfd-7da4-5bf1-9461-175faa114fab","html":"<p>年賀書きたくないマン.</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E4%B8%80%E5%B9%B4%E3%81%AE%E8%A8%88%E3%81%AF%E5%85%83%E6%97%A6%E3%81%AB%E3%81%82%E3%82%8A\">一年の計は元旦にあり</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%B3%A8%E6%84%8F\">注意</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B9%B4%E6%9C%AB%E5%B9%B4%E5%A7%8B%E3%81%AF%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86box\">年末年始はやってみようBOX</a></p>\n<ul>\n<li><a href=\"#mqtt\">MQTT</a></li>\n<li><a href=\"#react-hooks\">React Hooks</a></li>\n<li><a href=\"#tailwind-css\">Tailwind CSS</a></li>\n<li><a href=\"#%E9%9B%BB%E5%AD%90%E3%83%9A%E3%83%BC%E3%83%91%E3%83%BC\">電子ペーパー</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8%E3%81%AB%E3%81%97%E3%82%88%E3%81%86box\">やらないことにしようBOX</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%83%BC\">アーキテクチャー</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%BE%9B%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">辛かったこと</a></p>\n<ul>\n<li><a href=\"#hooks%E3%82%8F%E3%81%8B%E3%82%93%E3%81%AD%E3%81%87%E5%9E%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%A8%E3%81%8A%E3%82%89%E3%81%AD%E3%81%87\">Hooksわかんねぇ！型チェックとおらねぇ!!</a></li>\n<li><a href=\"#tailwind%E7%B5%90%E5%B1%80%E3%81%A4%E3%81%8B%E3%81%84%E3%81%93%E3%81%AA%E3%81%9B%E3%81%AA%E3%81%84%E5%95%8F%E9%A1%8C\">Tailwind結局つかいこなせない問題</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E6%80%9D%E3%81%84%E9%80%9A%E3%82%8A%E9%80%B2%E3%82%93%E3%81%A0%E3%81%A8%E3%81%93%E3%82%8D\">思い通り進んだところ</a></p>\n<ul>\n<li><a href=\"#fastapi\">FastAPI</a></li>\n<li><a href=\"#mqtt-1\">MQTT</a></li>\n<li><a href=\"#mosquitto\">mosquitto</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\">できあがったもの</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%83%87%E3%83%A2\">デモ</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%94%B9%E3%82%81%E3%81%BE%E3%81%97%E3%81%A6\">改めまして</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"一年の計は元旦にあり\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E5%B9%B4%E3%81%AE%E8%A8%88%E3%81%AF%E5%85%83%E6%97%A6%E3%81%AB%E3%81%82%E3%82%8A\" aria-label=\"一年の計は元旦にあり permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一年の計は元旦にあり</h2>\n<p>**あけましておめでとうございます。**昨年は大変お世話になりました。本年もどうぞよろしくお願いします。</p>\n<p>さて、お世話になったみなさまに年賀状を送りたいのですが、私は<strong>年賀状を書くのが苦手</strong>です。</p>\n<p>というより、まず手書き文字が苦手なのと、文面を考えるのが苦手なのと、郵便局に行くのがめんどくさいのと、滅多にポストをあけないのが原因なのですが、</p>\n<p>ともあって今年も年賀状を締め切りまでに出すことができませんでした。</p>\n<p>なんというダメ人間。</p>\n<p>年賀状って以下の点が辛いんですね。</p>\n<ul>\n<li>はがきを書ってこなければ行けない</li>\n<li>専用のソフト、プリンターがないと一枚一枚手書きで辛い</li>\n<li>郵便局に出しいかないといけない</li>\n<li>宛先違うだけでたくさん刷らないといけない</li>\n<li><del>年賀ハガキクジが当たらない</del></li>\n</ul>\n<p>ということで、せっかくなのでこれらのお困りごとを解決するツールをさっそく作ってみることにしました。</p>\n<h2 id=\"注意\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"注意 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意</h2>\n<p>今回の記事ですが、やたら<strong>～BOX</strong>というワードが出てきます。</p>\n<p>大意はないのですが、筆者が年末にみたとあるネット記事がマイブームになってしまい、使わざるを得えませんでした。</p>\n<p><a href=\"https://news.yahoo.co.jp/articles/7b0013a34e2072329b1875166dd1268bed972220\" target=\"_blank\" rel=\"noopener noreferrer\">斎藤佑樹が心境激白「考えてもしょうがないＢＯＸ」</a></p>\n<p><img src=\"https://i.imgur.com/BU7o9ke.jpg\" alt=\"img\"></p>\n<p>読み苦しい限りですがおつきあいくださいませ。</p>\n<h2 id=\"年末年始はやってみようbox\" style=\"position:relative;\"><a href=\"#%E5%B9%B4%E6%9C%AB%E5%B9%B4%E5%A7%8B%E3%81%AF%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86box\" aria-label=\"年末年始はやってみようbox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>年末年始はやってみようBOX</h2>\n<p>年末年始という長期休暇は普段忙しくてできないアレコレを入れてある<strong>やってみようBOX</strong>をあける日です。</p>\n<p>仕事のことは<strong>考えてもしょうがないBOX</strong>です。</p>\n<p>ということでこちらのツールですが先に<strong>技術選定</strong>からしていきます。</p>\n<h3 id=\"mqtt\" style=\"position:relative;\"><a href=\"#mqtt\" aria-label=\"mqtt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MQTT</h3>\n<p><a href=\"https://mqtt.org/\" target=\"_blank\" rel=\"noopener noreferrer\">MQTT</a>とは<strong>M</strong>essage <strong>Q</strong>ueue <strong>T</strong>elemetry <strong>T</strong>ransportの略で、pub/subモデルという仕組みに基づいてつくられた軽量なメッセージプロトコルです。</p>\n<p>MQTTの開発元であるIBMに良記事<a href=\"https://developer.ibm.com/jp/articles/iot-mqtt-why-good-for-iot/\" target=\"_blank\" rel=\"noopener noreferrer\">MQTT の基本知識</a>がありましたので詳細は割愛しますが、</p>\n<p>ヘッダーサイズが最小2byteと<strong>軽量</strong>なプロトコルであること、同一Topicに対して<strong>多対多</strong>の通信ができること、ネットワーク品質に応じた<strong>QOS</strong>を設定できること、<strong>ペイロード制約がほぼない</strong>ことが受けて広くIoT分野で使われています。</p>\n<p>ここまでお勉強してこなかったのはIoTに知見がなさすぎたことと、AWS IoTを使ってみたいという気持ちがある一方、まずはMQTTからお勉強しないとという変なこだわりがあったためです。</p>\n<p>今回電子ペーパーを実装した端末がRaspberry Piということもあり、コア技術はMQTTで行くことにしました。</p>\n<h3 id=\"react-hooks\" style=\"position:relative;\"><a href=\"#react-hooks\" aria-label=\"react hooks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hooks</h3>\n<p><a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">React Hooks</a>も今更？感ありますが、Reactのお勉強はGatsby.jsでのブログ実装以来やっていないので、ちょっと動向に触れることにしました。</p>\n<p>昔、使ってみようかと少し記事も見てみましたことがあったのですが、<strong>クラスコンポーネント</strong>の何が悪いのかイマイチよくわかってないので多分クラスコンポーネントで機能がとっ散らかるくらい大規模にReactを触ってないのであまり関心事にならなかったため、使ったことがありませんでした。</p>\n<p>使わないにしても知らないと職がさすがに無くなりそうなのでお勉強することにしました。</p>\n<h3 id=\"tailwind-css\" style=\"position:relative;\"><a href=\"#tailwind-css\" aria-label=\"tailwind css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tailwind CSS</h3>\n<p>TrySailのアルバムにTailwindというものがありましたが、<a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind CSS</a>もよく聞くので使ってみることにします。</p>\n<iframe loading=\"lazy\" width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/5HL-OoZjIcQ?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"TrySail 『TAILWIND』-Music Video YouTube EDIT ver.-\"></iframe>\n<p>軽い、という話を最初に聞き、使ってみたいと思ってましたが、<a href=\"https://tailwindcss.com/docs/optimizing-for-production#app\" target=\"_blank\" rel=\"noopener noreferrer\">必ずしもそういったこともなく</a><strong>Utility-First</strong>に共感できるWeb開発者に受けているんだろうな〜と重い腰が上がりませんでした。</p>\n<p>が、こちらもそろそろ勉強しないといよいよ無職になるので勉強します。</p>\n<p>ちなみに、Tailwindとは<strong>追い風</strong>という意味だそうです。</p>\n<h3 id=\"電子ペーパー\" style=\"position:relative;\"><a href=\"#%E9%9B%BB%E5%AD%90%E3%83%9A%E3%83%BC%E3%83%91%E3%83%BC\" aria-label=\"電子ペーパー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>電子ペーパー</h3>\n<p>本当は<a href=\"https://m5stack.com/products/m5paper-esp32-development-kit-960x540-4-7-eink-display-235-ppi?variant=37595977908396\" target=\"_blank\" rel=\"noopener noreferrer\">M5Paper</a>とかやりたかったのですが、電子ペーパーでなにか作ろうと思ったときには<a href=\"https://www.switch-science.com/catalog/6749/\" target=\"_blank\" rel=\"noopener noreferrer\">スイッチサイエンス</a>で売り切れていたのでAmazonで買える電子ペーパーでお安かった<a href=\"https://amzn.to/3kZ97lz\" target=\"_blank\" rel=\"noopener noreferrer\">Waveshare 2.7inch E-Ink Screen Display HAT for Raspberry Pi</a>を購入することにしました。</p>\n<h2 id=\"やらないことにしようbox\" style=\"position:relative;\"><a href=\"#%E3%82%84%E3%82%89%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8%E3%81%AB%E3%81%97%E3%82%88%E3%81%86box\" aria-label=\"やらないことにしようbox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>やらないことにしようBOX</h2>\n<p>色々選定時迷いましたが、一度にたくさんのことをやり過ぎるとやれなくて<strong>もやもやBOX</strong>に入ってしまうので元旦までに実装完了させるためにも、泣く泣くやらないことにしました。</p>\n<p><strong>いつかやるBOX</strong>だ。</p>\n<ul>\n<li>RustのWAF\n<ul>\n<li><del>MQTTのクライアントでRustで使えそうなものがぱっと見つからなかったため断念</del></li>\n<li>大嘘です。ありました。しかもpaho <a href=\"https://github.com/eclipse/paho.mqtt.rust\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/eclipse/paho.mqtt.rust</a></li>\n<li>BackendはPythonの<a href=\"https://fastapi.tiangolo.com/\" target=\"_blank\" rel=\"noopener noreferrer\">FastAPI</a>で実装します。</li>\n</ul>\n</li>\n<li><a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/what-is-aws-iot.html\" target=\"_blank\" rel=\"noopener noreferrer\">AWS IoT</a>\n<ul>\n<li>本当は使いたかったが、<strong>金がない</strong>&#x26;MQTTブローカーを一から作ってみたかったため断念、いつかやることにしました。</li>\n</ul>\n</li>\n<li><a href=\"https://webassembly.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Wasm</a>\n<ul>\n<li>毎回少しやって挫けるので今回はスキップ。いつかやりたいきりたいですね。</li>\n</ul>\n</li>\n<li><a href=\"https://recoiljs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Recoil</a>\n<ul>\n<li><a href=\"https://qiita.com/masakinihirota/items/b16ca9a61b835d50c8ec\" target=\"_blank\" rel=\"noopener noreferrer\">流行っているのか怪しかった</a>からパス。ファーストペンギンはいつだって怖い。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"アーキテクチャー\" style=\"position:relative;\"><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%83%BC\" aria-label=\"アーキテクチャー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>アーキテクチャー</h2>\n<p>30秒くらい考えてこんな感じになりました。<strong>考えてもしょうがないBOX</strong>です。</p>\n<p><img src=\"https://i.imgur.com/E3hyjnA.png\" alt=\"img\"></p>\n<p>フロントからAPIコールされるとバックエンドサーバーで<strong>画像生成</strong>し、<strong>ByteArray</strong>に変換後、<strong>MQTTブローカー</strong>に<strong>Publish</strong>をします。ByteArrayがMQTTのペイロードに設定できるのはHTTPと比べて魅力ですねー。</p>\n<p>MQTTブローカーでは受け取ったメッセージを同一TopicをSubscribeしている<strong>Subscriber</strong>に投げます。</p>\n<p>ここで<strong>MQTT over WebSocket</strong>などでTopicに流れるメッセージを待ち受けていれば、MQTT同様にSubscribeできます。</p>\n<p>Subscriberではメッセージを受け取るとon_messageイベントが発生するため、受け取ったByteArrayから画像を再生し、電子ペーパーの制御モジュールに渡します。</p>\n<h2 id=\"辛かったこと\" style=\"position:relative;\"><a href=\"#%E8%BE%9B%E3%81%8B%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\" aria-label=\"辛かったこと permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>辛かったこと</h2>\n<h3 id=\"hooksわかんねぇ型チェックとおらねぇ\" style=\"position:relative;\"><a href=\"#hooks%E3%82%8F%E3%81%8B%E3%82%93%E3%81%AD%E3%81%87%E5%9E%8B%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%81%A8%E3%81%8A%E3%82%89%E3%81%AD%E3%81%87\" aria-label=\"hooksわかんねぇ型チェックとおらねぇ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooksわかんねぇ！型チェックとおらねぇ!!</h3>\n<p>これは考えてもしょうがないBOXなのかもしれませんが、<strong>React HooksでFileを使うの</strong>、難しくありません？たんに画像をBase64にしてaxiosでAPIコールしたいだけなのですが、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedFileName<span class=\"token punctuation\">,</span> setSelectedFileName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>とinitial stateをnullにすると、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TS2345: Argument of type 'null' is not assignable to parameter of type 'File'.</code></pre></div>\n<p>という感じに、nullが許容できないですし、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"file\"</span> accept<span class=\"token operator\">=</span><span class=\"token string\">\"image/jpeg\"</span>\n    className<span class=\"token operator\">=</span><span class=\"token string\">\"cursor-pointer relative block opacity-0 w-full h-full p-20 z-50\"</span>\n    onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setSelectedFile</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<p>肝心のinputのonChangeでset関数呼ぼうとすると、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TS2345: Argument of type 'FileList | null' is not assignable to parameter of type 'SetStateAction&lt;File>'.   Type 'null' is not assignable to type 'SetStateAction&lt;File>'.</code></pre></div>\n<p>と言われてしまい、いざFileReaderで<strong>readAsDataURL</strong>しようとすると、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> b64str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> ArrayBuffer <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nreader<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n        b64str <span class=\"token operator\">=</span>  e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>b64str<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Error: '</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TS2531: Object is possibly 'null'.</code></pre></div>\n<p>という風にnull避けに苦戦しました。</p>\n<p>結局のところ、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> initFile<span class=\"token operator\">:</span> File <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selectedFile<span class=\"token punctuation\">,</span> setSelectedFile<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>initFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>という具合にinitial stateを空Fileオブジェクトにして、かついたるところに、</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">reader<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span>\n    b64str <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result <span class=\"token operator\">:</span> <span class=\"token string\">''</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>b64str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>という具合に三項演算子でガードする羽目になりました。クラスコンポーネントでももちろん考えないとなのですが、型厳密おじさんではないので、stateの段階で型で<strong>File | null</strong>みたいなこと平気でしてでnull許容にしてしまうマンなのでこれは痛かったですね。</p>\n<p>教えてReact博士！</p>\n<blockquote>\n<p>どうしたら、楽にHooksが使えますか？</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/zrdOCVi.png\" alt=\"img\"></p>\n<blockquote>\n<p>知らね。自分で考えろ</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/HnLNjda.png\" alt=\"img\"></p>\n<h3 id=\"tailwind結局つかいこなせない問題\" style=\"position:relative;\"><a href=\"#tailwind%E7%B5%90%E5%B1%80%E3%81%A4%E3%81%8B%E3%81%84%E3%81%93%E3%81%AA%E3%81%9B%E3%81%AA%E3%81%84%E5%95%8F%E9%A1%8C\" aria-label=\"tailwind結局つかいこなせない問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tailwind結局つかいこなせない問題</h3>\n<p>Webデザインというか、そういった素養がなさすぎて、むしろ私にはMaterial UIの出来きったデザインのもと実装できるCSSフレームワークのほうが使いやすかったです。</p>\n<p>ほぼすべて、結局<a href=\"https://tailwindcomponents.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind Component</a>からコピってReact向けに直して、ちょっと修正して、で作ったのでUtility-Firstの恩恵なしで時間ばかりかかってしまいました。</p>\n<h2 id=\"思い通り進んだところ\" style=\"position:relative;\"><a href=\"#%E6%80%9D%E3%81%84%E9%80%9A%E3%82%8A%E9%80%B2%E3%82%93%E3%81%A0%E3%81%A8%E3%81%93%E3%82%8D\" aria-label=\"思い通り進んだところ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>思い通り進んだところ</h2>\n<h3 id=\"fastapi\" style=\"position:relative;\"><a href=\"#fastapi\" aria-label=\"fastapi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FastAPI</h3>\n<p>FastAPIの実装はスムーズでした。</p>\n<p>APIを作るときもデコレーター一つで簡単実装です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    image<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/preview\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">preview</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    base64str <span class=\"token operator\">=</span> create_card_image_b64<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"image\"</span><span class=\"token punctuation\">:</span> base64str<span class=\"token punctuation\">}</span></code></pre></div>\n<p>簡単なAPIを短時間で作らなければならないような<strong>ハッカソン</strong>や<strong>1dayスプリント</strong>なんかにはとてもいいのではないでしょうか？</p>\n<p>癖があるとしたらstaticsファイルのホスティングに使う<a href=\"https://fastapi.tiangolo.com/tutorial/static-files/\" target=\"_blank\" rel=\"noopener noreferrer\">StaticFiles</a>というモジュールを使うときになぜか、追加で<a href=\"https://pypi.org/project/aiofiles/\" target=\"_blank\" rel=\"noopener noreferrer\">aiofiles</a>というライブラリーが必要なことです。</p>\n<p>デフォルトでいれないんかい。</p>\n<p><del>とはいえ、しっかりエラーでModuleNotFoundエラーが出るのでそこまで困ることもないです。</del></p>\n<p>公式ドキュメントに、</p>\n<blockquote>\n<p>First you need to install aiofiles</p>\n</blockquote>\n<p>って書いてありました。すみません。</p>\n<h3 id=\"mqtt-1\" style=\"position:relative;\"><a href=\"#mqtt-1\" aria-label=\"mqtt 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MQTT</h3>\n<p>くっそ難しいのかな？と思いましたがpahoがいい感じにラップしていてくれるので、何のことはなかったです。</p>\n<h3 id=\"mosquitto\" style=\"position:relative;\"><a href=\"#mosquitto\" aria-label=\"mosquitto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mosquitto</h3>\n<p>こちらもあっさりでした。</p>\n<p>Dockerを使ったからか、ほぼ公式通りの<a href=\"https://github.com/eclipse/mosquitto/blob/master/mosquitto.conf\" target=\"_blank\" rel=\"noopener noreferrer\">config</a>で通りました。</p>\n<h2 id=\"できあがったもの\" style=\"position:relative;\"><a href=\"#%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\" aria-label=\"できあがったもの permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>できあがったもの</h2>\n<p>できあがったものの、ソースコードはこちらにあります。</p>\n<p><a href=\"https://github.com/tubone24/mqtt-nenga\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tubone24/mqtt-nenga</a></p>\n<p>一応<a href=\"https://aws.amazon.com/jp/eks/\" target=\"_blank\" rel=\"noopener noreferrer\">EKS</a>にのっけて公開しようかと悩みTerraformまで作ったのですが、誰もサービス使わないで年賀状が一通もこないのも悲しいので、Terraformの検証が終わったら壊しました。</p>\n<p>というかEKSに載っけるなら最初からAWS IoTにすればよかったですね。</p>\n<p>考えてもしょうがないBOXに入れておいて、自分のやるべきことをやるように考えていますね。</p>\n<h2 id=\"デモ\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%A2\" aria-label=\"デモ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デモ</h2>\n<p>環境構築方法は<a href=\"https://github.com/tubone24/mqtt-nenga/blob/master/README.md\" target=\"_blank\" rel=\"noopener noreferrer\">README</a>をご参照くださいませ。</p>\n<p>使い方としては、まずWebページに行きますと次のような入力フォームがあります。</p>\n<p><img src=\"https://i.imgur.com/k4Ti9nI.png\" alt=\"img\"></p>\n<p><strong>名前</strong>、<strong>タイトル</strong>、<strong>メッセージ</strong>と<strong>画像</strong>を入力フォームに入れていきます。Previewボタンを押すと相手に送信する年賀状の<strong>プレビュー</strong>ができます。</p>\n<p><img src=\"https://i.imgur.com/lEjbh7L.png\" alt=\"img\"></p>\n<p>問題なければ、<strong>Submit</strong>します。</p>\n<p>相手がTopicをSubscribeしていれば、このように電子ペーパーに年賀状が描画されます。</p>\n<p><img src=\"https://i.imgur.com/LXEcbLD.gif\" alt=\"img\"></p>\n<h2 id=\"改めまして\" style=\"position:relative;\"><a href=\"#%E6%94%B9%E3%82%81%E3%81%BE%E3%81%97%E3%81%A6\" aria-label=\"改めまして permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>改めまして</h2>\n<p><img src=\"https://i.imgur.com/WJnsQlT.png\" alt=\"img\"></p>","fields":{"slug":"2021/01/01/mqtt-nenga"},"frontmatter":{"tags":["MQTT","RaspberryPi","年賀状"],"templateKey":"blog-post","slug":"2021/01/01/mqtt-nenga","id":null,"title":"MQTTと電子ペーパーを使って年賀状を作る","url":"2021/01/01/mqtt-nenga","date":"2021-01-01T12:58:01.960Z","description":"MQTTと電子ペーパーとFastAPIとReact HooksとTailwind CSSを使って年賀状を作る","headerImage":"https://i.imgur.com/tmkmoVA.png","year":"2021","month":"01"}}},{"node":{"id":"31936c3d-dc9a-5ecf-b10e-ad123253faf4","html":"<p>寂しいクリスマスです。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#lambda--container-image-support\">Lambda – Container Image Support</a></p>\n</li>\n<li>\n<p><a href=\"#container-image-support%E3%81%A7%E4%BD%95%E3%81%8C%E3%81%86%E3%82%8C%E3%81%97%E3%81%84%E3%81%AE\">Container Image Supportで何がうれしいの?</a></p>\n</li>\n<li>\n<p><a href=\"#lambda%E3%81%A7selenium%E3%81%A8%E8%A8%80%E3%81%88%E3%81%B0serverless-chrome%E3%81%A7%E3%81%99%E3%81%8C\">LambdaでSeleniumと言えばserverless-chromeですが</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BB%8A%E5%9B%9E%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8%E3%81%A8%E3%81%84%E3%81%86%E3%81%8B%E8%AA%B2%E9%A1%8C\">今回やりたいこと、というか課題</a></p>\n</li>\n<li>\n<p><a href=\"#alpine-python37\">Alpine Python:3.7</a></p>\n<ul>\n<li><a href=\"#container-image-support%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AFric%E3%81%8C%E5%BF%85%E8%A6%81\">Container Image Supportを使うにはRICが必要</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#docker-image%E3%82%92%E5%B0%91%E3%81%97%E3%81%A7%E3%82%82%E8%BB%BD%E3%81%8F%E3%81%99%E3%82%8B\">Docker Imageを少しでも軽くする</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%A4%E3%81%84%E3%81%A7%E3%81%AB%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%82%82%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\">ついでに日本語フォントもインストールする</a></p>\n</li>\n<li>\n<p><a href=\"#entrypoint%E4%BB%96%E8%A8%AD%E5%AE%9A\">Entrypoint他設定</a></p>\n</li>\n<li>\n<p><a href=\"#selenium%E3%81%8C%E5%8B%95%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">Seleniumが動くようにする</a></p>\n</li>\n<li>\n<p><a href=\"#--disable-dev-shm-usage\">--disable-dev-shm-usage</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%A2%E3%83%83%E3%83%97%E3%81%AFchrome-driverservice\">スピードアップはChrome DriverService</a></p>\n</li>\n<li>\n<p><a href=\"#slack%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%97%E3%81%A6%E5%8B%A4%E6%80%A0%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%82%92%E6%92%AE%E3%82%8B\">Slackにログインして勤怠チャンネルのスクリーンショットを撮る</a></p>\n</li>\n<li>\n<p><a href=\"#slack%E3%81%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">Slackにアップロードする</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%B8%80%E9%83%A8%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%81%8C%E8%B1%86%E8%85%90%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%AB%E3%81%AA%E3%82%8B\">一部フォントが豆腐のままになる</a></p>\n</li>\n<li>\n<p><a href=\"#slack%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3%E8%AD%A6%E5%91%8A%E3%81%8C%E3%81%A7%E3%82%8B\">Slackサインイン警告がでる</a></p>\n</li>\n<li>\n<p><a href=\"#terraform%E5%8C%96%E3%81%99%E3%82%8B\">Terraform化する</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%8C%E6%88%90\">完成</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"lambda--container-image-support\" style=\"position:relative;\"><a href=\"#lambda--container-image-support\" aria-label=\"lambda  container image support permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda – Container Image Support</h2>\n<p>12/1 **<a href=\"https://aws.amazon.com/jp/blogs/aws/new-for-aws-lambda-container-image-support/\" target=\"_blank\" rel=\"noopener noreferrer\">Lambda – Container Image Support</a>**が発表されました。</p>\n<p><img src=\"https://i.imgur.com/ZWIqgQZ.png\" alt=\"img\"></p>\n<p>Lambda作成画面にもContainer Imageが出てきております。</p>\n<p>発表当初はあまり注目してなかったのですがとある思いつきをしました。</p>\n<p>**Selenium載っける運用なら案外使い勝手いいかもしれない？**と。</p>\n<h2 id=\"container-image-supportで何がうれしいの\" style=\"position:relative;\"><a href=\"#container-image-support%E3%81%A7%E4%BD%95%E3%81%8C%E3%81%86%E3%82%8C%E3%81%97%E3%81%84%E3%81%AE\" aria-label=\"container image supportで何がうれしいの permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Container Image Supportで何がうれしいの?</h2>\n<p>Container Image SupportとはLambdaでDocker ImageからContainerが使えますよーということなのですが、使い所はあるのでしょうか？</p>\n<p>色々メリットあると思いますが、私が思うに、</p>\n<ul>\n<li>イメージは10GBまでデプロイできる</li>\n<li>Lambda Runtime Interface Emulatorを使ってローカルで実行できる</li>\n</ul>\n<p>の2点が嬉しい点だと思います。</p>\n<p>**Seleniumでそんなに容量使うのか？**問題はありますが、機会学習の推論をLambdaで実行させる、とかだと容量の壁や、Cライブラリビルドのアーキテクチャ差分に苦しめられる煩わしいパッケージ導入もなくなるのでもしかしたら使えるのかもですね。</p>\n<h2 id=\"lambdaでseleniumと言えばserverless-chromeですが\" style=\"position:relative;\"><a href=\"#lambda%E3%81%A7selenium%E3%81%A8%E8%A8%80%E3%81%88%E3%81%B0serverless-chrome%E3%81%A7%E3%81%99%E3%81%8C\" aria-label=\"lambdaでseleniumと言えばserverless chromeですが permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LambdaでSeleniumと言えばserverless-chromeですが</h2>\n<p>LambdaでSeleniumを動かすと言えばつい最近まで<a href=\"https://github.com/adieuadieu/serverless-chrome\" target=\"_blank\" rel=\"noopener noreferrer\">serverless-chrome</a>が有名です。</p>\n<p>ようはLambdaのZIPパッケージ制限(一昔前はアップロード10MB, S3経由200MBだった)に引っかからないくらい小さくしたChromeをLambdaにパッケージ内包して、Seleniumのランナーから動かすわけです。</p>\n<p>とはいえ、環境構築で一癖も二癖もあるserverless-chromeなので、今回は普通のChromeをheadless起動させるDockerコンテナを作ってそれをLambdaで起動していくことで簡単構築ができるのではないか、というのがこの検証の趣旨です。</p>\n<h2 id=\"今回やりたいことというか課題\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%9B%9E%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8%E3%81%A8%E3%81%84%E3%81%86%E3%81%8B%E8%AA%B2%E9%A1%8C\" aria-label=\"今回やりたいことというか課題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今回やりたいこと、というか課題</h2>\n<p>話は変わりますが弊社にはSlackのWorkSpaceが乱立してます。</p>\n<p>さらに勤怠連絡もSlackに書き込むのですが乱立したWorkSpaceにすべて書き込むのはちょっとめんどくさいです。</p>\n<p>(以前はSlackのほかTeamsやらメールやら電話やらあらゆる媒体で一斉勤怠連絡しないといけなくてこれでも楽になりました。)</p>\n<p>じゃあ、Slack APIとか使って、相互投稿とかして解決すればいいじゃんとなりそうですが、一部のWorkSpaceはセキュリティの観点から外部連携が禁止とのこと。なんじゃそりゃ...。</p>\n<p><img src=\"https://i.imgur.com/odKSxHU.png\" alt=\"img\"></p>\n<p>そこで、セキュア(笑)なSlackのスクリーンショットを取り、普段使っているSlackへ投稿する仕組みにすれば、少なくとも連絡はしたようなものなので、まぁ楽でしょう！ということで作っていきます。</p>\n<h2 id=\"alpine-python37\" style=\"position:relative;\"><a href=\"#alpine-python37\" aria-label=\"alpine python37 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alpine Python:3.7</h2>\n<p>軽量イメージで有名な<a href=\"https://hub.docker.com/_/alpine\" target=\"_blank\" rel=\"noopener noreferrer\">Apline</a>をベースイメージにします。</p>\n<p>はい、この選択肢はとある理由で<strong>間違い</strong>でした、がそれはこの先わかることです。</p>\n<p>軽いから使う、という安直極まりない選定で言ってしまったのが後々後悔となりますので、皆さん、ちゃんと調べましょう。</p>\n<h3 id=\"container-image-supportを使うにはricが必要\" style=\"position:relative;\"><a href=\"#container-image-support%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AFric%E3%81%8C%E5%BF%85%E8%A6%81\" aria-label=\"container image supportを使うにはricが必要 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Container Image Supportを使うにはRICが必要</h3>\n<p>Lambdaは起動する際にAWS基板側からAWS LambdaランタイムAPIでランタイムをキックすることで実現してます。</p>\n<p>そうです。Container Image SupportといいつつもLambdaで実現する以上、こいつを受け取らないといけないのです。</p>\n<p>なので単純にdocker runで起動するコンテナイメージを作るだけじゃLambdaには載っけられないので、AWS Lambda Runtime Interface Clients(RIC)というOSSがAWSから提供されてます。</p>\n<p>例えばPythonであれば<a href=\"https://github.com/aws/aws-lambda-python-runtime-interface-client\" target=\"_blank\" rel=\"noopener noreferrer\">AWS Lambda Python Runtime Interface Client\n</a>があります。</p>\n<p>こいつを介してLambda起動させるわけです。</p>\n<p>こいつがやっかいでした。<a href=\"https://github.com/aws/aws-lambda-python-runtime-interface-client/blob/main/README.md#creating-a-docker-image-for-lambda-with-the-runtime-interface-client\" target=\"_blank\" rel=\"noopener noreferrer\">README</a>にも書いてありましたが、インストールにLinuxのBuild tool類が必要で、結局Alpineの軽量さの恩恵を受けられませんでした。</p>\n<p>とはいえ、落ち込んでいても仕方ないので、まずはSelenium Pythonが動く環境を作っていきます。</p>\n<p>Dockerfileを使って、RIC関連とChrome, Chrome-driverを入れていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM python:3.7-alpine\n\nENV PYTHONIOENCODING utf-8\nWORKDIR /app\n\nRUN apk add --update \\\n        build-base \\\n        libtool \\\n        autoconf \\\n        automake \\\n        libexecinfo-dev \\\n        make \\\n        cmake \\\n        libcurl \\\n        wget \\\n        bash \\\n        which \\\n        groff \\\n        udev \\\n        chromium \\\n        chromium-chromedriver  &amp;&amp; \\\n        pip install --target /app awslambdaric &amp;&amp; \\\n        pip install selenium</code></pre></div>\n<p>RICを入れるには<a href=\"https://github.com/aws/aws-lambda-python-runtime-interface-client/blob/main/README.md#creating-a-docker-image-for-lambda-with-the-runtime-interface-client\" target=\"_blank\" rel=\"noopener noreferrer\">README</a>では、g++、make、cmake、unzip、libcurl4-openssl-devがでしたが、それはUbuntuベースのイメージだったからで、Alpineでは、他に、<strong>autoconf</strong>や<strong>automake</strong>など結構色々必要でした。めんどくさい...。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Collecting awslambdaric\n  Downloading awslambdaric-1.0.0.tar.gz (3.2 MB)\n    ERROR: Command errored out with exit status 1:\n     command: /usr/local/bin/python -c 'import sys, setuptools, tokenize; sys.argv[0] = '\"'\"'/tmp/pip-install-_vlp4rwk/awslambdaric_c160f1900b624d1a85d1135d75e3b6ef/setup.py'\"'\"'; __file__='\"'\"'/tmp/pip-install-_vlp4rwk/awslambdaric_c160f1900b624d1a85d1135d75e3b6ef/setup.py'\"'\"';f=getattr(tokenize, '\"'\"'open'\"'\"', open)(__file__);code=f.read().replace('\"'\"'\\r\\n'\"'\"', '\"'\"'\\n'\"'\"');f.close();exec(compile(code, __file__, '\"'\"'exec'\"'\"'))' egg_info --egg-base /tmp/pip-pip-egg-info-xp6t7j5r\n         cwd: /tmp/pip-install-_vlp4rwk/awslambdaric_c160f1900b624d1a85d1135d75e3b6ef/\n    Complete output (16 lines):\n    buildconf: autoconf version 2.69 (ok)\n    buildconf: autom4te version 2.69 (ok)\n    buildconf: autoheader version 2.69 (ok)\n    buildconf: automake not found.\n                You need automake version 1.7 or newer installed.\n    Traceback (most recent call last):\n      File \"&lt;string>\", line 1, in &lt;module>\n      File \"/tmp/pip-install-_vlp4rwk/awslambdaric_c160f1900b624d1a85d1135d75e3b6ef/setup.py\", line 94, in &lt;module>\n        ext_modules=get_runtime_client_extension(),\n      File \"/tmp/pip-install-_vlp4rwk/awslambdaric_c160f1900b624d1a85d1135d75e3b6ef/setup.py\", line 45, in get_runtime_client_extension\n        extra_link_args=get_curl_extra_linker_flags(),\n      File \"/tmp/pip-install-_vlp4rwk/awslambdaric_c160f1900b624d1a85d1135d75e3b6ef/setup.py\", line 18, in get_curl_extra_linker_flags\n        check_call([\"./scripts/preinstall.sh\"])\n      File \"/usr/local/lib/python3.7/subprocess.py\", line 363, in check_call\n        raise CalledProcessError(retcode, cmd)\n    subprocess.CalledProcessError: Command '['./scripts/preinstall.sh']' returned non-zero exit status 1.\n    ----------------------------------------\nERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output.</code></pre></div>\n<p>必要なパッケージが入ってないと**You need automake version 1.7 or newer installed.**のようにRICのインストールで怒られてしまいます。こんな罠があるとは..。</p>\n<p>あれこれあれこれ試行錯誤し、うまくいけば次のようにRICのBuildが終わってめでたしめでたしです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Building wheels for collected packages: awslambdaric, simplejson\n  Building wheel for awslambdaric (setup.py): started\n  Building wheel for awslambdaric (setup.py): still running...\n  Building wheel for awslambdaric (setup.py): finished with status 'done'\n  Created wheel for awslambdaric: filename=awslambdaric-1.0.0-cp37-cp37m-linux_x86_64.whl size=246020 sha256=4d2550bf826e2ad294aa0335eb87987b63d61d13aad8c06c189c080ff4479ac5\n  Stored in directory: /root/.cache/pip/wheels/f2/d6/df/40b746a2bdaca7ceec3244383e8e252c5a9f3870621fd68a37\n  Building wheel for simplejson (setup.py): started\n  Building wheel for simplejson (setup.py): finished with status 'done'\n  Created wheel for simplejson: filename=simplejson-3.17.2-cp37-cp37m-linux_x86_64.whl size=74647 sha256=ffca4c04bc4b3e577dcd91c83e01b3670d6274e1a7dde0177a699c7174a3c8f9\n  Stored in directory: /root/.cache/pip/wheels/e5/69/2c/bdcb34114373fc0dbb53242f5df4bf41bce149acac4f8160d0\nSuccessfully built awslambdaric simplejson</code></pre></div>\n<p>また、肝心のChromeとChrome-driverはapkでそのまま入れればいいので実にこちらは簡単です。</p>\n<p>apkからインストールすることで常に、stableでインストールするので、chromedriverとのバージョンを意識することもありません！れはありがたい。</p>\n<h2 id=\"docker-imageを少しでも軽くする\" style=\"position:relative;\"><a href=\"#docker-image%E3%82%92%E5%B0%91%E3%81%97%E3%81%A7%E3%82%82%E8%BB%BD%E3%81%8F%E3%81%99%E3%82%8B\" aria-label=\"docker imageを少しでも軽くする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker Imageを少しでも軽くする</h2>\n<p>こちらImage Buildし終わるとあら大変。せっかくのAlpineの<strong>41.1MB</strong>の軽量イメージが<strong>1.14GB</strong>と台無しになってしまいました。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># Alpine\npython         3.7-alpine       f82a49b6a141   10 days ago      41.1MB\n\n# Selenium\nselenium       latest           acc90965ec5b   30 hours ago     1.14GB\n</code></pre></div>\n<p>こちらなんとかするためにRICがインストールが完了したタイミングで、build関係のパッケージを同一レイヤーで消してしまいましょう。(別レイヤーにするとファイルの増減が記録されてしまうので注意)</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --update <span class=\"token operator\">\\</span>\n    <span class=\"token comment\"># Add Dependencies for compile AWS Lambda ric</span>\n        build-base <span class=\"token operator\">\\</span>\n        libtool <span class=\"token operator\">\\</span>\n        autoconf <span class=\"token operator\">\\</span>\n        automake <span class=\"token operator\">\\</span>\n        libexecinfo-dev <span class=\"token operator\">\\</span>\n        make <span class=\"token operator\">\\</span>\n        cmake <span class=\"token operator\">\\</span>\n        libcurl <span class=\"token operator\">\\</span>\n        wget <span class=\"token operator\">\\</span>\n        bash <span class=\"token operator\">\\</span>\n        which <span class=\"token operator\">\\</span>\n        groff <span class=\"token operator\">\\</span>\n        udev <span class=\"token operator\">\\</span>\n        chromium <span class=\"token operator\">\\</span>\n        chromium-chromedriver  &amp;&amp; <span class=\"token operator\">\\</span>\n      pip install -r requirements.txt &amp;&amp; <span class=\"token operator\">\\</span>\n        pip install --target /app awslambdaric &amp;&amp; <span class=\"token operator\">\\</span>\n        rm /app/requirements.txt &amp;&amp; <span class=\"token operator\">\\</span>\n      apk del <span class=\"token operator\">\\</span>\n        build-base <span class=\"token operator\">\\</span>\n        libtool <span class=\"token operator\">\\</span>\n        autoconf <span class=\"token operator\">\\</span>\n        automake <span class=\"token operator\">\\</span>\n        libexecinfo-dev <span class=\"token operator\">\\</span>\n        make <span class=\"token operator\">\\</span>\n        cmake <span class=\"token operator\">\\</span>\n        libcurl <span class=\"token operator\">\\</span>\n        wget <span class=\"token operator\">\\</span>\n        bash <span class=\"token operator\">\\</span>\n        which <span class=\"token operator\">\\</span>\n        groff</span>\n</code></pre></div>\n<p>ややこしいですが、こうすることで（後述する日本語フォントも入れながら）846MBまで削減できました。同一レイヤーでいらないものは消す。これ、偉い人とのお約束。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">selenium   latest           04304fcd4549   18 minutes ago   846MB</code></pre></div>\n<h2 id=\"ついでに日本語フォントもインストールする\" style=\"position:relative;\"><a href=\"#%E3%81%A4%E3%81%84%E3%81%A7%E3%81%AB%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%82%82%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\" aria-label=\"ついでに日本語フォントもインストールする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ついでに日本語フォントもインストールする</h2>\n<p>さて、Seleniumを使うときつきまとうのはフォント<strong>豆腐</strong>問題です。</p>\n<p><img src=\"https://i.imgur.com/tjIJUBn.jpg\" alt=\"img\"></p>\n<p>日本語のようにASCII文字では表現できない文字は、対応するフォントがインストールされていないと文字の代わりに小さい四角(□)、通称<strong>豆腐</strong>が表示されることがあります。麻雀の白ではないですよ。というより豆腐という日本語が世界語になっているのはすごいですね。</p>\n<p>で、話を戻しますが当然Alpineのような軽量Imageには日本語フォントなんて入ってません。</p>\n<p>さて、フォント豆腐問題の解消によく使うのが<a href=\"https://www.google.com/get/noto/\" target=\"_blank\" rel=\"noopener noreferrer\">Google Noto Fonts</a>です。</p>\n<p><strong>No</strong> <strong>to</strong>fuでNotoらしいです。</p>\n<p>ただし、配布されているNoto FontsのAll one packageをすべてを使うと例えばアラビア語(اللغة العربية)やサンスクリット語(संस्कृत)なんかも入ってしまい、計<strong>1.1GB</strong>になってしまいます。これは重い。</p>\n<p>そこで、日本語フォントだけ利用したい場合、<a href=\"https://www.google.com/get/noto/#sans-jpan\" target=\"_blank\" rel=\"noopener noreferrer\">Noto Sans CJK JP</a>と<a href=\"https://www.google.com/get/noto/#serif-jpan\" target=\"_blank\" rel=\"noopener noreferrer\">Noto Serif CJK JP</a>を個別にダウンロードして/usr/share/fonts配下に展開することで容量を抑えることができます。どちらも130MBくらいです。</p>\n<p>また、展開したフォントをシステムが使えるようにフォント展開後、fc-cacheも実行していきます。</p>\n<p>ちなみにCJKというのは<strong>Chinese</strong>, <strong>Japanese</strong>, <strong>Korean</strong>のことらしいです。</p>\n<p>ついでにASCIIフォントのfreefontもインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --update <span class=\"token operator\">\\</span>\n        ttf-freefont <span class=\"token operator\">\\</span>\n        freetype <span class=\"token operator\">\\</span>\n        fontconfig <span class=\"token operator\">\\</span>\n      mkdir noto &amp;&amp; <span class=\"token operator\">\\</span>\n        wget -P /app/noto https://noto-website.storage.googleapis.com/pkgs/NotoSansCJKjp-hinted.zip &amp;&amp; <span class=\"token operator\">\\</span>\n        wget -P /app/noto https://noto-website-2.storage.googleapis.com/pkgs/NotoSerifCJKjp-hinted.zip &amp;&amp; <span class=\"token operator\">\\</span>\n        unzip /app/noto/NotoSansCJKjp-hinted.zip -d /app/noto &amp;&amp; <span class=\"token operator\">\\</span>\n        unzip -o /app/noto/NotoSerifCJKjp-hinted.zip -d /app/noto &amp;&amp; <span class=\"token operator\">\\</span>\n        mkdir -p /usr/share/fonts/noto &amp;&amp; <span class=\"token operator\">\\</span>\n        cp /app/noto/*.otf /usr/share/fonts/noto &amp;&amp; <span class=\"token operator\">\\</span>\n        chmod 644 -R /usr/share/fonts/noto/ &amp;&amp; <span class=\"token operator\">\\</span>\n        rm -rf /app/noto &amp;&amp; <span class=\"token operator\">\\</span>\n        fc-cache -fv</span></code></pre></div>\n<p>これでフォント問題は解決...のはずですが、後半で「だめです」が出るので、さらに改良していくことになります。</p>\n<h2 id=\"entrypoint他設定\" style=\"position:relative;\"><a href=\"#entrypoint%E4%BB%96%E8%A8%AD%E5%AE%9A\" aria-label=\"entrypoint他設定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entrypoint他設定</h2>\n<p>Lambdaでの起動のため、DockerのEntrypointとCMDを設定します。</p>\n<p><a href=\"https://github.com/aws/aws-lambda-python-runtime-interface-client/blob/main/README.md#creating-a-docker-image-for-lambda-with-the-runtime-interface-client\" target=\"_blank\" rel=\"noopener noreferrer\">README</a>に書いてあるとおり、Entrypointは<strong>awslambdaric</strong>をCMDは実際のLambdaが起動するときに動く関数を選択します。(ここでは、app.pyのhandler関数)</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">ENTRYPOINT</span> [ <span class=\"token string\">\"/usr/local/bin/python\"</span>, <span class=\"token string\">\"-m\"</span>, <span class=\"token string\">\"awslambdaric\"</span> ]</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [ <span class=\"token string\">\"app.handler\"</span> ]</span></code></pre></div>\n<h2 id=\"seleniumが動くようにする\" style=\"position:relative;\"><a href=\"#selenium%E3%81%8C%E5%8B%95%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\" aria-label=\"seleniumが動くようにする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Seleniumが動くようにする</h2>\n<p>さてSeleniumのランナーに移っていきます。</p>\n<p>さきほどコマンドでapp.handlerを指定したので、モジュール名はapp.py、関数名はhandlerでいきます。</p>\n<p>また、apkでインストールしたChrome(Chromium)、Chrome-driverはそれぞれ**/usr/bin/chromium-browser** <strong>/usr/lib/chromium/chromedriver</strong>に存在してます。</p>\n<p>まずはとりあえずSlackのログインページを開き、タイトルを表示します。次のように組んでいきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options\n\nSLACK_LOGIN_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://xxxxx.slack.com\"</span>\nchrome_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/bin/chromium-browser\"</span>\nchromedriver_path <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/lib/chromium/chromedriver\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    o <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>binary_location <span class=\"token operator\">=</span> chrome_path\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--headless'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--no-sandbox'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--window-size=1920x1080'</span><span class=\"token punctuation\">)</span>\n    \n    d <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>SLACK_LOGIN_URL<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PageTitle </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Chromeの起動オプションに指定している**--headless**、<strong>--disable-gpu</strong>、<strong>--no-sandbox</strong>はいずれもLambdaでのSelenium起動には必須のオプションで、それぞれ**--headless<strong>はヘッドレス起動(ディスプレイやキーボード、マウスなどの入出力機器を接続しない状態をヘッドレスと言います)、</strong>--disable-gpu<strong>はGPU無効(--headlessオプションと併用必須らしい)、</strong>--no-sandbox**はサンドボックス起動無効化のことらしいです。</p>\n<p>ちなみに、Chrome(Chromium)はセキュリティ向上のため、レンダリングやスクリプトエンジンをSandboxというchrootで隔離された環境で動かすそうです。</p>\n<p>Dockerコンテナ内でchrootをするにはdocker側でそのホストのすべてのデバイスへのアクセスを許可する必要があり、–privilegedオプションが必要となります。</p>\n<p>ただ、Lambdaではこちらは許容されないため、–no-sandboxをつけてsandboxを無効化しなければいけません。脆弱性を突かれるとアプリのソースにアクセスされてしまう可能性は残りますが...。</p>\n<p>さて、こちらのコードでLambdaにイメージをデプロイして起動して見ると次のようなエラーを吐き出し動きませんでした..。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  File \"/app/python/lib/python3.6/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\nselenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: crashed.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/chromium-browser is no longer running, so ChromeDriver is assuming that Chrome has crashed.)</code></pre></div>\n<p>Chromeがクラッシュしてしまった、という意味合いとはわかりますがどうにもわかりません。エラーがわかりにくいのがSeleniumの悪いところです。</p>\n<h2 id=\"--disable-dev-shm-usage\" style=\"position:relative;\"><a href=\"#--disable-dev-shm-usage\" aria-label=\"  disable dev shm usage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>--disable-dev-shm-usage</h2>\n<p>さらに調べていくと次のようなことがわかりました。<strong>--disable-dev-shm-usage</strong>というオプションが必要だったようです。</p>\n<p>Chromeではキャッシュ用にtmpfs(/dev/shmファイルシステムレベルの共有メモリ)を利用しているのですがLambdaがこちら64MBしかないので落ちてしまうそうです。なので、キャッシュは/tmp(ディスク)を利用してもらうべく**--disable-dev-shm-usage**も追加する必要があります。</p>\n<p>ちなみに、Lambdaの/tmpは最近調べたのですが512MBくらいありました。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    o <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>binary_location <span class=\"token operator\">=</span> chrome_path\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--headless'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--no-sandbox'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--window-size=1920x1080'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-dev-shm-usage'</span><span class=\"token punctuation\">)</span>\n\n    d <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>SLACK_LOGIN_URL<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PageTitle </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>こちらでエラーは出なくなりましたが、<strong>5分でタイムアウト</strong>してしまいました。</p>\n<h2 id=\"スピードアップはchrome-driverservice\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%82%A2%E3%83%83%E3%83%97%E3%81%AFchrome-driverservice\" aria-label=\"スピードアップはchrome driverservice permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スピードアップはChrome DriverService</h2>\n<p>と勝手に聞いてなんとなく納得してしまったので<strong>Chrome DriverService</strong>を使うように書き直したらちゃんとうごきました。なぜなんでしょうねぇー。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    o <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>binary_location <span class=\"token operator\">=</span> chrome_path\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--headless'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--no-sandbox'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-dev-shm-usage'</span><span class=\"token punctuation\">)</span>\n    o<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--window-size=1920x1080'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start Chrome Session\"</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> Service<span class=\"token punctuation\">(</span>executable_path<span class=\"token operator\">=</span>chromedriver_path<span class=\"token punctuation\">)</span>\n    s<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    d <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Remote<span class=\"token punctuation\">(</span>\n        s<span class=\"token punctuation\">.</span>service_url<span class=\"token punctuation\">,</span>\n        desired_capabilities<span class=\"token operator\">=</span>o<span class=\"token punctuation\">.</span>to_capabilities<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>SLACK_LOGIN_URL<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"PageTitle </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"slackにログインして勤怠チャンネルのスクリーンショットを撮る\" style=\"position:relative;\"><a href=\"#slack%E3%81%AB%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%97%E3%81%A6%E5%8B%A4%E6%80%A0%E3%83%81%E3%83%A3%E3%83%B3%E3%83%8D%E3%83%AB%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%E3%82%92%E6%92%AE%E3%82%8B\" aria-label=\"slackにログインして勤怠チャンネルのスクリーンショットを撮る permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slackにログインして勤怠チャンネルのスクリーンショットを撮る</h2>\n<p>さて、Seleniumも無事動いたので、Slackにログインして勤怠チャンネルをパシャっと撮りましょう。</p>\n<p>まずはログインページアクセスですが、これはブラウザで<a href=\"https://slack-workspace-url.slack.com%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%BE%E3%81%99%E3%81%A8%E3%80%81E%E3%83%A1%E3%83%BC%E3%83%AB%E3%81%A8%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E8%81%9E%E3%81%8B%E3%82%8C%E3%82%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E5%87%BA%E3%81%A6%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82\" target=\"_blank\" rel=\"noopener noreferrer\">https://slack-workspace-url.slack.comにアクセスしますと、Eメールとパスワードを聞かれるフォームが出てきます。</a></p>\n<p><img src=\"https://i.imgur.com/LaMP20t.png\" alt=\"img\"></p>\n<p>こちら確認してみると、Elementのidがそれぞれ、email, passwordとなっております。また、Sign inボタンはID signin_btnとなっております。ありがたいですね。</p>\n<p><img src=\"https://i.imgur.com/S8orasB.png\" alt=\"img\"></p>\n<p>ということで、idがemailのElementが描画されたらEメール、パスワードを入力し、ボチッとSign inボタンをクリックします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\n\n(中略)\n\n    wait = WebDriverWait(d, 10)\n\n    email = wait.until(expected_conditions.visibility_of_element_located((By.ID, \"email\")))\n\n    email.send_keys(tubone@email.com)\n\n    email = d.find_element(by=By.ID, value=\"password\")\n    email.send_keys(\"hogehoge\")\n\n    signin_btn = d.find_element(by=By.ID, value=\"signin_btn\")\n    signin_btn.click()\n\n    d.implicitly_wait(10)\n    print(f\"PageTitle {d.title}\")</code></pre></div>\n<p><a href=\"https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.support.wait\" target=\"_blank\" rel=\"noopener noreferrer\">WebDriverWait</a>で最大待機秒数を設定後、<a href=\"https://selenium-python.readthedocs.io/api.html#selenium.webdriver.support.expected_conditions.invisibility_of_element_located\" target=\"_blank\" rel=\"noopener noreferrer\">expected_conditions.visibility_of_element_located</a>で特定の要素が描画されるまで待つようにすることで明示的に要素の描画を待つことが実現できます。</p>\n<p>sleep(10)とかよりも効率的で安全ですね。</p>\n<p>また、<a href=\"https://selenium-python.readthedocs.io/api.html#selenium.webdriver.remote.webdriver.WebDriver.implicitly_wait\" target=\"_blank\" rel=\"noopener noreferrer\">implicitly_wait</a>を使うことで何かしらの要素が描画されるまで待つ、みたいなもうちょっと曖昧なこともできます。</p>\n<p>ともあれ、これでログインが無事できました。</p>\n<p>ログインしたらチャンネルのURLにアクセスします。チャンネルのURLは、</p>\n<p><a href=\"https://app.slack.com/client/xxxxxxxxx/yyyyyyyyy\" target=\"_blank\" rel=\"noopener noreferrer\">https://app.slack.com/client/xxxxxxxxx/yyyyyyyyy</a></p>\n<p>みたいな感じでyyyyyyがチャンネルと対応してます。あらかじめひかえておきます。</p>\n<p>スクリーンショットは<a href=\"https://selenium-python.readthedocs.io/api.html#selenium.webdriver.remote.webdriver.WebDriver.save_screenshot\" target=\"_blank\" rel=\"noopener noreferrer\">save_screenshot</a>を使えば画面のPNGが撮れます。</p>\n<p>ここで少し詰まったのは、Lambdaの場合、<strong>/tmpディレクトリしか書き込み権限がない</strong>ということです。ちょっとハマりました。</p>\n<p>/app配下にスクリーンショット吐き出そうとしたらIO Errorになってうまく吐き出せませんでした。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>save_screenshot<span class=\"token punctuation\">(</span><span class=\"token string\">\"/tmp/screen.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ちなみに、save_screenshotの戻り値はboolとなっており、Trueは成功、Falseは失敗です。書き込みに失敗してもExceptionはraiseしないので、Python scriptが進んでいってしまい、後半のSlackアップロードでno such fileになってしまいました。難しい。</p>\n<h2 id=\"slackにアップロードする\" style=\"position:relative;\"><a href=\"#slack%E3%81%AB%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\" aria-label=\"slackにアップロードする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slackにアップロードする</h2>\n<p>アップロードはSlack APIのfile.uploadを使いました。</p>\n<p>あらかじめTOKENとPermissionを設定しておきましょう。</p>\n<p>Slack Appを作ったらSlackAPIのOAuth&#x26;Permissionsから確認できます。</p>\n<p><img src=\"https://i.imgur.com/Tt6avAl.png\" alt=\"img\"></p>\n<p>Permissionsは<a href=\"https://api.slack.com/scopes/channels:join\" target=\"_blank\" rel=\"noopener noreferrer\">channels:join</a>、<a href=\"https://api.slack.com/scopes/chat:write\" target=\"_blank\" rel=\"noopener noreferrer\">chat:write</a>、<a href=\"https://api.slack.com/scopes/chat:write.public\" target=\"_blank\" rel=\"noopener noreferrer\">chat:write.public</a>、<a href=\"https://api.slack.com/scopes/files:write\" target=\"_blank\" rel=\"noopener noreferrer\">files:write</a>があれば十分だと思います。</p>\n<p><img src=\"https://i.imgur.com/0O9dgma.png\" alt=\"img\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">        url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://slack.com/api/files.upload\"</span>\n        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span> SLACK_TOKEN<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"channels\"</span><span class=\"token punctuation\">:</span> SLACK_CHANNEL_ID<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"attend bot\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"initial_comment\"</span><span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>d<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span></span><span class=\"token string\">)のattend状況です\"</span></span>\n        <span class=\"token punctuation\">}</span>\n        files <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>FILENAME<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Upload To Slack\"</span></span><span class=\"token punctuation\">)</span>\n        resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> files<span class=\"token operator\">=</span>files<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ほとんどモザイクで申し訳ないですが、きっちりSlackにスクリーンショットを投稿できました。</p>\n<p><img src=\"https://i.imgur.com/oHtRLCO.png\" alt=\"img\"></p>\n<h2 id=\"一部フォントが豆腐のままになる\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E9%83%A8%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%81%8C%E8%B1%86%E8%85%90%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%AB%E3%81%AA%E3%82%8B\" aria-label=\"一部フォントが豆腐のままになる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一部フォントが豆腐のままになる</h2>\n<p>確かにうまく言ったのですが、Noto fontsを入れているにも関わらず一部フォントが豆腐のままになってしまう事象が起きてしまいました。</p>\n<p><img src=\"https://i.imgur.com/QxSsfqy.png\" alt=\"img\"></p>\n<p><del>12/24なにがあるんでしょうねぇ...</del></p>\n<p>色々調べて、<a href=\"https://www.freedesktop.org/wiki/Software/fontconfig/\" target=\"_blank\" rel=\"noopener noreferrer\">fontconfig</a>でNoto fontを強制適用したり色々しましたがどうにもうまく行かず、しょうがないので日本語フォントの大御所<a href=\"https://ipafont.ipa.go.jp/\" target=\"_blank\" rel=\"noopener noreferrer\">IPAフォント</a>を入れることにします。</p>\n<p>そう言えば、IPAフォントは一般社団法人文字情報技術促進協議会に移管されたようですね。</p>\n<p>AlpineでIPAフォントを使うには、</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add font-ipa</span></code></pre></div>\n<p>でいいはずなのですが、次のようにパッケージが見つからない警告が出て<strong>うまくいきません</strong>でした。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> ---> Running in 1098a4580fb6\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86_64/APKINDEX.tar.gz\nfetch http://dl-cdn.alpinelinux.org/alpine/v3.12/community/x86_64/APKINDEX.tar.gz\nERROR: unsatisfiable constraints:\n  font-ipa (missing):\n    required by: world[font-ipa]</code></pre></div>\n<p>仕方がないので、<a href=\"https://ja.osdn.net/projects/ipafonts/\" target=\"_blank\" rel=\"noopener noreferrer\">OSDN</a>からTrueType Fontをダウンロードして、それをImageにADDします。</p>\n<p><a href=\"https://ja.osdn.net/projects/ipafonts/releases/51868\" target=\"_blank\" rel=\"noopener noreferrer\">IPA Fonts/IPAex Fonts 4書体パック_IPAフォント（Ver.003.03）</a>を使わせていただきました。ADDコマンドで/usr/share/fonts/TTF/配下にTTFファイルを展開して、fc-cache -fvです。</p>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">ADD</span> ./font/*.ttf /usr/share/fonts/TTF/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> fc-cache -fv</span></code></pre></div>\n<p>これでフォント豆腐問題は解消しました。やれやれ。</p>\n<h2 id=\"slackサインイン警告がでる\" style=\"position:relative;\"><a href=\"#slack%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3%E8%AD%A6%E5%91%8A%E3%81%8C%E3%81%A7%E3%82%8B\" aria-label=\"slackサインイン警告がでる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slackサインイン警告がでる</h2>\n<p>もう一つ問題になったのは、LambdaのグローバルIPを固定化していなかったため、変なIPアドレスからログインを実行したという警告がでてしまうことです。</p>\n<p><img src=\"https://i.imgur.com/dmGb7V6.png\" alt=\"img\"></p>\n<p>こちらは解決法があり、要は<strong>Lambda in VPC</strong>にしてNatGatewayにEIPを当てて、固定IPからインターネットアクセスをさせてあげればいいわけです。</p>\n<p><img src=\"https://i.imgur.com/GPamgYL.png\" alt=\"img\"></p>\n<p>Container Image Supportとはいえ、ここらへんの仕組みはいつも使っているLambdaなので簡単に実現できました。</p>\n<h2 id=\"terraform化する\" style=\"position:relative;\"><a href=\"#terraform%E5%8C%96%E3%81%99%E3%82%8B\" aria-label=\"terraform化する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform化する</h2>\n<p>さぁ、すべての舞台が整ったので、Terraform化していきます。</p>\n<p><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function\" target=\"_blank\" rel=\"noopener noreferrer\">Resource: aws_lambda_function</a>も対応しているため、そこまで大変さはありませんでした。ありがとうございます。</p>\n<p>Container supportの場合は<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#package_type\" target=\"_blank\" rel=\"noopener noreferrer\">package_type</a>をImageにして<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#image_uri\" target=\"_blank\" rel=\"noopener noreferrer\">image_uri</a>をECRにプッシュしたイメージURIにします。</p>\n<p>イメージURIはECRのコンソール画面からでも確認できますが、CIに乗っけるなど考えた場合ちょっと取り回し悪いので、AWS CLI describe-imagesコマンドでimageDigestが確認できますので、Terraform実行時にShellで取得し、動的生成し、terraform apply -var=hogeの形式で変数として渡してやります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws ecr describe-images --repository-name selenium --image-ids imageTag=latest | jq \".imageDetails[].imageDigest\"\n\n\"sha256:7ec3ea6afd616c09b291c22e8e7676a8855e05beb1d4ea19af1abc6865e6fe6d\"</code></pre></div>\n<p>通常のLambdaで必要になる<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#handler\" target=\"_blank\" rel=\"noopener noreferrer\">handler</a>や<a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function#runtime\" target=\"_blank\" rel=\"noopener noreferrer\">runtime</a>の設定は不要です。Terraformドキュメント上、handlerは必須となっておりますが、<strong>不要</strong>です。</p>\n<p><a href=\"https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support\" target=\"_blank\" rel=\"noopener noreferrer\">IntellJ HashiCorp Terraform / HCL language support</a>を使っているとhandlerとruntimeオプションが無いよ！と怒られてしまいますが、構わず不要で大丈夫です。</p>\n<p><img src=\"https://i.imgur.com/cxxcBx0.png\" alt=\"img\"></p>\n<h2 id=\"完成\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%88%90\" aria-label=\"完成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成</h2>\n<p>ということで完成しました。</p>\n<p><a href=\"https://github.com/tubone24/lambda_container_support_with_selenium\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tubone24/lambda_container_support_with_selenium</a></p>\n<p>いろんな技術でうまく行かないことが多かったですが、やりたかったことが無事できました。</p>","fields":{"slug":"2020/12/25/selenium-lambda-container"},"frontmatter":{"tags":["AWS","Lambda","Selenium","Terraform"],"templateKey":"blog-post","slug":"2020/12/25/selenium-lambda-container","id":null,"title":"Lambda – Container Image Supportを使ってAlpineからSeleniumが動くコンテナを作ってTerraformで当てる","url":"2020/12/25/selenium-lambda-container","date":"2020-12-25T14:58:26.302Z","description":"最近サポートされたLambdaのContainer Image Supportを使って、Seleniumを動かしてみます。ついでにTerraform化します。","headerImage":"https://i.imgur.com/dmGb7V6.png","year":"2020","month":"12"}}},{"node":{"id":"5f5ac075-48b9-5a3b-8893-f7765f838760","html":"<p>PCの入れ替えのたびにSSH Configとその鍵の扱いに困るので作ってみました。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%AA%B2%E9%A1%8C\">課題</a></p>\n<ul>\n<li><a href=\"#%E9%8D%B5%E3%81%A8%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84\">鍵とまとめて設定しなければならない</a></li>\n<li><a href=\"#ssh-config%E3%82%82%E7%AB%8B%E6%B4%BE%E3%81%AA%E6%A9%9F%E5%BE%AE%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\">SSH Configも立派な機微なファイル</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%AA%B2%E9%A1%8C%E3%81%B8%E3%81%AE%E8%A7%A3\">課題への解</a></p>\n</li>\n<li>\n<p><a href=\"#ssh-config-json\">SSH Config JSON</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%89%B9%E5%BE%B4\">特徴</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">使い方</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%8A%80%E8%A1%93%E8%A7%A3%E8%AA%AC\">技術解説</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%91%E3%83%BC%E3%82%B5%E3%83%BC\">コマンドパーサー</a></p>\n<ul>\n<li><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%91%E3%83%BC%E3%82%B5%E3%83%BC%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\">コマンドラインパーサーのテストコード</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#pycryptodome\">Pycryptodome</a></p>\n<ul>\n<li><a href=\"#aes%E6%9A%97%E5%8F%B7%E5%8C%96-eax%E3%83%A2%E3%83%BC%E3%83%89\">AES暗号化 EAXモード</a></li>\n<li><a href=\"#%E9%8D%B5%E3%81%AE%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E5%8C%96\">鍵のハッシュ化</a></li>\n<li><a href=\"#md5%E5%95%8F%E9%A1%8C\">MD5問題</a></li>\n<li><a href=\"#%E5%88%9D%E6%9C%9F%E5%8C%96%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB\">初期化ベクトル</a></li>\n<li><a href=\"#%E3%83%90%E3%82%A4%E3%83%88%E5%88%97%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\">バイト列の書き込み</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#lint\">Lint</a></p>\n</li>\n<li>\n<p><a href=\"#cicd%E3%81%AB%E8%BC%89%E3%81%A3%E3%81%91%E3%82%8B\">CI/CDに載っける</a></p>\n</li>\n<li>\n<p><a href=\"#pypi%E3%81%AB%E8%87%AA%E5%8B%95%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B\">PyPIに自動デプロイする</a></p>\n<ul>\n<li><a href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86\">バージョン管理</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>皆さんはサーバーへの<strong>SSH</strong>、どうしてますか？</p>\n<p>仕事柄管理しているサーバーへのSSHログインが多いため、<strong>SSH Config</strong>を使ってログインの手間を少なくしてます。</p>\n<p>特にSSHログインに鍵ファイルを利用したり、DBアクセスのためのポートフォワードをしたり、多段SSHをしようとするとSSHコマンドの長さはおのずと長くなり、毎回打ち込むのはそれはそれは億劫になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh tubone24@10.0.0.1 -i ~./ssh/id_rsa -L 127.0.0.1:80:intra.example.com:80 ProxyCommand='ssh -p 22 -W %h:%p step.server.com'</code></pre></div>\n<p>めんどくさいですね。</p>\n<p>そこで例えば上記のようなコマンドをSSH Configに設定し、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Host serverA\n    HostName 10.0.0.1\n    User tubone24\n    Port 22\n    IdentityFile ~./ssh/id_rsa\n    LocalForward   127.0.0.1:80:intra.example.com:80\n    ProxyCommand ssh -p 22 -W %h:%p step.server.com</code></pre></div>\n<p>次のようにエイリアスでアクセスできるようにするわけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssh serverA</code></pre></div>\n<p>ちなみに、ZSHでは<a href=\"https://github.com/zsh-users/zsh-completions\" target=\"_blank\" rel=\"noopener noreferrer\">zsh-completions</a>という補完プラグインを設定することで、</p>\n<p>SSH Configのtab補完をしてくれるので上記との合わせ技でかなり効率的になります。</p>\n<h2 id=\"課題\" style=\"position:relative;\"><a href=\"#%E8%AA%B2%E9%A1%8C\" aria-label=\"課題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>課題</h2>\n<p>とっても便利なSSH Configですが、PC移行や環境構築時、いろいろやっかいです。</p>\n<h3 id=\"鍵とまとめて設定しなければならない\" style=\"position:relative;\"><a href=\"#%E9%8D%B5%E3%81%A8%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%AA%E3%81%91%E3%82%8C%E3%81%B0%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84\" aria-label=\"鍵とまとめて設定しなければならない permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>鍵とまとめて設定しなければならない</h3>\n<p>まぁ当たり前と言えば当たり前なのですが、SSH Config上で設定した鍵ファイルも併せて管理しないと当然サーバーにアクセスできません。</p>\n<p>私の働いている現場では、<strong>鍵ファイルをS3に配置し</strong>、アクセス権を持ってる鍵が必要な人が各々鍵をローカルにダウンロードする必要があります。</p>\n<p>せっかくSSH Configだけ別のPCに移行しても結局鍵のダウンロードが必要なわけです。</p>\n<h3 id=\"ssh-configも立派な機微なファイル\" style=\"position:relative;\"><a href=\"#ssh-config%E3%82%82%E7%AB%8B%E6%B4%BE%E3%81%AA%E6%A9%9F%E5%BE%AE%E3%81%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB\" aria-label=\"ssh configも立派な機微なファイル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Configも立派な機微なファイル</h3>\n<p>鍵ファイルは前述の通りですが、じゃあSSH Configの受け渡しはどうでしょう？</p>\n<p>SSH ConfigにはサーバーのIPアドレス、ログイン名などかなりセキュリティ上機微な情報が入っており、</p>\n<p>dotfileのように、GitHubのレポジトリー管理にするのもはばかられます。</p>\n<h2 id=\"課題への解\" style=\"position:relative;\"><a href=\"#%E8%AA%B2%E9%A1%8C%E3%81%B8%E3%81%AE%E8%A7%A3\" aria-label=\"課題への解 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>課題への解</h2>\n<p>さて、こちらの課題を整理すると、</p>\n<ol>\n<li>SSH鍵も一元的に管理したい</li>\n<li>SSH Config自体も安全に管理したい</li>\n</ol>\n<p>となります。</p>\n<p>良い方法はあるでしょうか？</p>\n<h2 id=\"ssh-config-json\" style=\"position:relative;\"><a href=\"#ssh-config-json\" aria-label=\"ssh config json permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Config JSON</h2>\n<p>そこでボクは<del>オリーブオイル</del> SSH Config JSON。</p>\n<p>SSH ConfigをJSON形式で鍵ファイルとともに1ファイルにラッピングし、AES暗号で暗号化する、というツールを作ってみました。</p>\n<h2 id=\"特徴\" style=\"position:relative;\"><a href=\"#%E7%89%B9%E5%BE%B4\" aria-label=\"特徴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>特徴</h2>\n<ul>\n<li>SSH ConfigのJSON変換、複合ができます</li>\n<li>IdentityFile(SSH鍵)をJSONにラッピングし一元管理できます</li>\n<li>AES暗号に対応し、JSONを暗号化しSSH鍵とともに安全に管理できます</li>\n</ul>\n<h2 id=\"使い方\" style=\"position:relative;\"><a href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"使い方 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使い方</h2>\n<p>主な使い方はRead the docsにドキュメントサイトを作りましたのでそちらをご参照ください。</p>\n<p><a href=\"https://ssh-config-json.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener noreferrer\">https://ssh-config-json.readthedocs.io/en/latest/</a></p>\n<p>一例を書きますとまずインストールはpipで行います。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install ssh-config-json</code></pre></div>\n<p>するとGlobalコマンドに<strong>scj</strong>というものができます。</p>\n<p><strong>S</strong>sh <strong>C</strong>onfig <strong>J</strong>sonですね。</p>\n<p>自らの~/.ssh/configをSSH鍵もセットでJSONにしたければ、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scj dump dump_config.json -i</code></pre></div>\n<p>とするとdump.jsonとしてSSH ConfigをラッピングしたJSONができます。</p>\n<p>復元したければ、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scj restore dump_config.json -i</code></pre></div>\n<p>とやることで、SSH鍵とともに展開されます。</p>\n<p>さらに暗号化オプションをつければ、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">scj dump dump_config.json -i -e</code></pre></div>\n<p>とJSONを暗号化したファイルが生成され、AESキーを使った複合もできます。</p>\n<h2 id=\"技術解説\" style=\"position:relative;\"><a href=\"#%E6%8A%80%E8%A1%93%E8%A7%A3%E8%AA%AC\" aria-label=\"技術解説 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>技術解説</h2>\n<p>特に難しい技術は使ってませんが、このブログの趣旨はそういったところにあると思うので解説します。</p>\n<h2 id=\"コマンドパーサー\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%91%E3%83%BC%E3%82%B5%E3%83%BC\" aria-label=\"コマンドパーサー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドパーサー</h2>\n<p>コマンドパーサーはおなじみ<strong>docopt</strong>です。もう何回目でしょうか。お世話になっております。</p>\n<p>やはり便利なのはusageを書いているとロジックもできあがるところで、なんというかまぁ本当にべんりです。</p>\n<p>Nimのdocoptの解説になってしまいますが、詳しくは<a href=\"https://blog.tubone-project24.xyz/2019/11/20/docopt-nim\" target=\"_blank\" rel=\"noopener noreferrer\">docoptはNimでも使えたのお話</a>をご確認ください。</p>\n<h3 id=\"コマンドラインパーサーのテストコード\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%91%E3%83%BC%E3%82%B5%E3%83%BC%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"コマンドラインパーサーのテストコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドラインパーサーのテストコード</h3>\n<p>docoptを絡めたテストコードを今回は書いてみました。とはいい、これはもはやdocopt本体のテストになってしまうのでアンチパターンになりますが。</p>\n<p>本来的には、docoptをmock化するのが正義なんですけど、自前でパーサー作った場合とかに使えそうなのでまぁいいでしょう。</p>\n<p>docoptの実装はどうやら<strong>sys.argv</strong>からコマンドライン引数を取り出しているようです。当たり前といえば当たり前か。</p>\n<p>Pytestなどのテストランナーに書けた際、sys.argvはテストランナーに渡したものが入っているので、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    def test_main_dump(self):\n        del sys.argv[1:]\n        sys.argv.append(\"dump\")\n        sys.argv.append(\"tests/assets/test_config_xxx\")\n        sys.argv.append(\"-c\")\n        sys.argv.append(\"tests/assets/test_config\")\n        with patch(\"builtins.open\") as mock_open:\n            main()\n            mock_open.assert_any_call(\"tests/assets/test_config_xxx\", \"w\")\n            mock_open.assert_any_call(\"tests/assets/test_config\")\n        del sys.argv[1:]</code></pre></div>\n<p>のように無理矢理sys.argvを任意の値に変更することで、テスト対象にコマンドライン引数が渡せます。</p>\n<p><strong>終わったらお片づけでdel文を忘れずに！</strong></p>\n<h2 id=\"pycryptodome\" style=\"position:relative;\"><a href=\"#pycryptodome\" aria-label=\"pycryptodome permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pycryptodome</h2>\n<p>AESの暗号化には<strong>Pycryptodome</strong>を利用してます。</p>\n<p>Pythonの暗号化ライブラリといえばpycryptoが有名ですが、こちらはPyPIを見ると2013/10/13以降更新がありません。（涙）なので、今回はPycryptodomeを使うことにしました。</p>\n<p><a href=\"https://dev.classmethod.jp/articles/python-crypto-libraries/\" target=\"_blank\" rel=\"noopener noreferrer\">AES対応のPython暗号化ライブラリを比較検証してみた</a>を確認してみるに、Pycryptodomeは低レベルの暗号化ライブラリらしく、低レベルの暗号ライブラリーは難しいと聞いてましたが、使ってみて案外ドキュメントがしっかりしていたことと、英語であれば結構実装例が出てきたので予想よりは詰まらなかったです。</p>\n<h3 id=\"aes暗号化-eaxモード\" style=\"position:relative;\"><a href=\"#aes%E6%9A%97%E5%8F%B7%E5%8C%96-eax%E3%83%A2%E3%83%BC%E3%83%89\" aria-label=\"aes暗号化 eaxモード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AES暗号化 EAXモード</h3>\n<p>今回は暗号利用モードは<a href=\"https://pycryptodome.readthedocs.io/en/latest/src/examples.html#encrypt-data-with-aes\" target=\"_blank\" rel=\"noopener noreferrer\">公式ドキュメント</a>通り<strong>EAXモード</strong>を使いました。</p>\n<p>そもそも暗号利用モードってなに？という人は下の画像を見てみてください。</p>\n<p><img src=\"https://i.imgur.com/OrwJJwp.jpg\" alt=\"img\"></p>\n<p>通常暗号化というものはとある文字列（バイト列）を別の文字列（バイト列）に変換するものなので、暗号化結果の出現度合いによってその全容がわかってしまってはいけません。</p>\n<p>そこで、AES(今回は話が分かりやすいようにブロック暗号に絞ります)ではいくつかの暗号利用モードを定義し、例えばCBCというモードでは前の暗号ブロック（最初の場合は初期化ベクトル）と次の平文のブロックのXORをとり、そこへ暗号をかけるようにします。</p>\n<p>そうすることにより、同じ平文、同じ鍵を用いた場合一つ前のブロックと次のブロックとの間で出現する文字列が異なってくるので暗号文から推測される可能性を少なくできます。</p>\n<p>ちょっと古い内容かつ厳密にはブロック暗号ではないですが、エニグマ暗号も出現する文字のパターンから平文への頻度分析から判断されないように単純な換字式暗号を用いず、入力ごとに換字表が入れ替わるローターを仕込んで対策してました。ちょっと仕組みはCBCと比べるとあっさりしてますが、まぁやりたいことは似たような感じですね。</p>\n<p><img src=\"https://i.imgur.com/LNR7N4P.jpg\" alt=\"img\"></p>\n<p>さて、話を戻します。</p>\n<p>EAXモード<a href=\"https://en.wikipedia.org/wiki/EAX_mode\" target=\"_blank\" rel=\"noopener noreferrer\">EAXモード（encrypt-then-authenticat-then-translate）</a>は、暗号ブロック暗号の動作モードの一つで、メッセージの認証（完全性）と秘匿性を同時に提供するように設計されたモードで、いわゆる<strong>Authenticated Encryption with Associated Data (AEAD) アルゴリズム</strong>となっております。</p>\n<p><img src=\"https://i.imgur.com/bbXnZFo.png\" alt=\"img\"></p>\n<p>上の図のように、ブロックを暗号化をする1パスとブロックごとの真正性を実現するための1パスの2パス方式を採用することが特徴です。</p>\n<p>えっ！じゃあ、暗号利用モードのCBCモードは何が担保できないんですか??って思ったあなた！するどいですね。どうやら、CBCモードなどの古いモードではHMAC SHAなどのハッシュをかけることでダイジェストを作り、完全性を担保しているらしいです。CBC-HAMCという方式ですね。ふーむ。</p>\n<p>EAXモードでは完全性と秘匿性の担保を1つの暗号化フローのなかで実現し、効率よく両方を担保しているとのこと。</p>\n<p><img src=\"https://i.imgur.com/bbXnZFo.png\" alt=\"img\"></p>\n<p>とは言ってもPycryptodomeではmodeをEAXにするだけで簡単に使えるので細かく考える必要はなさそうです。</p>\n<h3 id=\"鍵のハッシュ化\" style=\"position:relative;\"><a href=\"#%E9%8D%B5%E3%81%AE%E3%83%8F%E3%83%83%E3%82%B7%E3%83%A5%E5%8C%96\" aria-label=\"鍵のハッシュ化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>鍵のハッシュ化</h3>\n<p>ご存じの通りAESでは共通鍵の鍵長として、128bitから256bitまで選ぶことができます。</p>\n<p>特に迷うことないので256bitの鍵を利用することにしました。</p>\n<p>が、しばしば問題になるのが256bit、つまり32byteの鍵バイト列を人は簡単に作れない、ということです。</p>\n<p>パスワードポリシーが、32文字のASCII文字です！それ以上でもそれ以下でもいけません。だったら辛いでしょう。</p>\n<p>また、貧弱な鍵バイト列のせいで総当たり攻撃をされてもいけません。</p>\n<p>そこで一般に、ユーザーからの入力された鍵に対してハッシュ関数をかけたものを鍵バイト列として使うことが知られてます。</p>\n<p>こうすることで上記の問題は解決できます。（とは言ってもハッシュから鍵バイト列を推測されないようによくあるpasswordのような文字はやめましょう。）</p>\n<h3 id=\"md5問題\" style=\"position:relative;\"><a href=\"#md5%E5%95%8F%E9%A1%8C\" aria-label=\"md5問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MD5問題</h3>\n<p>さて、前述の通りハッシュ関数を使って指定バイトのキーを生成すればいいですがここで問題が起きます。</p>\n<p><strong>32バイトのハッシュを作るにはどのハッシュ関数を使えばいいんだろう？</strong></p>\n<p>いくつか公開されているサンプルコードでは、<strong>md5</strong> を利用してました。</p>\n<p>md5を使うと次のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import hashlib\n\nkey = hashlib.md5(key.encode(\"utf-8\")).hexdigest()).encode(\"utf-8\")</code></pre></div>\n<p>ぶっちゃけあとで調べたら<a href=\"https://stackoverflow.com/questions/47002578/algorithm-to-generate-12-byte-hash-from-web-urls\" target=\"_blank\" rel=\"noopener noreferrer\">Stack Overflow</a>にもあるとおり、暗号化に使う鍵のハッシュ関数はもっとそこまで安全性を考慮する必要はないので、</p>\n<p>md5が正解だったようですが、何となく前時代的なハッシュ化アルゴリズムが嫌だったのでSHA-3世代のShake128を使うことにしました。</p>\n<p>ShakeはいわゆるSHA-3ファミリーのハッシュ関数ですが、可変長のダイジェストを作り出すことができます。128bitつまり、16バイトのダイジェストを作る場合には次のようなコードになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">key = hashlib.shake_128(key.encode(\"utf-8\")).hexdigest(16)).encode(\"utf-8\")</code></pre></div>\n<h3 id=\"初期化ベクトル\" style=\"position:relative;\"><a href=\"#%E5%88%9D%E6%9C%9F%E5%8C%96%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB\" aria-label=\"初期化ベクトル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>初期化ベクトル</h3>\n<p>初期化ベクトルとは、ブロック暗号にて同じ平文を暗号文にした際、その形質が同じになってしまうことによりセキュリティ驚異を取り除くために、使われる概念です。</p>\n<p>ちょっと意味合いはことなりますが、エニグマ暗号の初期値乱数表みたいなものです。</p>\n<p>こちらはランダム性が高いほどセキュリティが向上するため、次のようにPycryptodomeのRandom.get_random_bytesから生成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">initialization_vector = Random.get_random_bytes(AES.block_size)\ncipher = AES.new(self.key, AES.MODE_EAX, initialization_vector)</code></pre></div>\n<h3 id=\"バイト列の書き込み\" style=\"position:relative;\"><a href=\"#%E3%83%90%E3%82%A4%E3%83%88%E5%88%97%E3%81%AE%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF\" aria-label=\"バイト列の書き込み permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バイト列の書き込み</h3>\n<p>Python書いたことある人なら当たり前とは思いますが、バイト列の書き込みをする際はopenモードをバイナリーにしないといけません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    def encrypt_file(self, path, delete_raw_file=False):\n        with open(path, \"r\") as f1, open(path + \".enc\", \"wb\") as f2:\n            f2.write(self.encrypt(f1.read()))\n        if delete_raw_file:\n            os.remove(path)\n        print(f\"Encrypted file: {path}.enc\")</code></pre></div>\n<h2 id=\"lint\" style=\"position:relative;\"><a href=\"#lint\" aria-label=\"lint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lint</h2>\n<p>Pythonのコード規約チェックはpep8からflake8など多岐にわたり、かつPytestなどのテストランナーと組み合わせることができますが、今回はBlackを使います。</p>\n<p>Blackはpep8と比べかなり制約の強い（柔軟性の低い）Pythonコードフォーマッタです。</p>\n<p>Blackの公式Docには、</p>\n<blockquote>\n<p>Blackを使用することで、あなたは手作業でのフォーマットの細かい部分のコントロールを譲ることに同意したことになります。その見返りとして、Blackはあなたにスピード、決定論、そしてフォーマットに関するpycodestyleの口煩いからの自由を与えてくれます。時間と精神的エネルギーを節約して、より重要なことに充てることができるようになります。</p>\n</blockquote>\n<p>と書いてあります。本当にその通りだと思います。</p>\n<p>Blackはフォーマットチェックのほか、自動フォーマットにも対応してるのでautopep8と同じ用な使い方ができるわけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> black ssh_config_json</code></pre></div>\n<p>autopep8との違いはその規約の厳しさと柔軟性の欠如にあります。</p>\n<p>pep8では強制されないような、改行の仕方や、シングルクォートとダブルクォートの統一、末尾カンマの統一、余計な丸括弧の削除、数値リテラルの書き方までも細かく強制されます。</p>\n<p>まさに、公式も言っているとおりフォーマットでのコントロールを完全に譲ることになります。</p>\n<p>pep8では特定のルールの無効化を細かく設定できますが、Blackはフォーマット適用ソースと最大行文字数しか制御できません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[tool.black]\nline-length = 88\ntarget-version = ['py37']\ninclude = '\\.pyi?$'\nexclude = '''\n\n(\n  /(\n      \\.eggs         # exclude a few common directories in the\n    | \\.git          # root of the project\n    | \\.hg\n    | \\.mypy_cache\n    | \\.tox\n    | \\.venv\n    | _build\n    | buck-out\n    | build\n    | dist\n  )/\n  | foo.py           # also separately exclude a file named foo.py in\n                     # the root of the project\n)\n'''</code></pre></div>\n<blockquote>\n<p>Black化されたコードは、あなたが読んでいるプロジェクトに関係なく同じように見えます。しばらくすると書式設定が透明になり、代わりにコンテンツに集中することができます。</p>\n</blockquote>\n<p>まさにその通りで、「ロジックは問題ないけど、なんでこの書き方なんですか？見にくいですよ？」みたいな不毛な議論は「だってBlackが」と言えるわけです。</p>\n<p>SSH Config JSONではBlackフォーマットを採用してます。</p>\n<p><a href=\"https://github.com/psf/black\" target=\"_blank\" rel=\"noopener noreferrer\"><img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" alt=\"Code style: black\"></a></p>\n<h2 id=\"cicdに載っける\" style=\"position:relative;\"><a href=\"#cicd%E3%81%AB%E8%BC%89%E3%81%A3%E3%81%91%E3%82%8B\" aria-label=\"cicdに載っける permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI/CDに載っける</h2>\n<p>せっかくテストコードも書いたので、CI載っけましょう。</p>\n<p>毎度おなじみGitHub Actionsです。</p>\n<p>正直、最近はGitHub Actions一択になりつつあります。</p>\n<p>PRのタイミングでテストとBlackのフォーマットチェックを走らせます。</p>\n<p>--checkオプションをつければ、フォーマットがゴミだとエラーで落ちてCIがfailedするようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> black ssh_config_json  --check</code></pre></div>\n<h2 id=\"pypiに自動デプロイする\" style=\"position:relative;\"><a href=\"#pypi%E3%81%AB%E8%87%AA%E5%8B%95%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B\" aria-label=\"pypiに自動デプロイする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PyPIに自動デプロイする</h2>\n<p>さて、ここまできてらもう自動でPyPIにパッケージ登録できるようにしたいですね。</p>\n<p>PyPIへのパッケージ登録を行なうには当然パッケージを作らないと行けませんが、Pythonの場合setup.pyを記載することで作ることができます。</p>\n<p>さらに、setup.pyはただのPythonコードでしかないので、それをコンフィグに起こしたsetup.cfgという方法もあります。</p>\n<p>下記のようにパッケージの情報を記載し、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[metadata]\nname = ssh_config_json\nversion = attr: ssh_config_json.__version__\ndescription = Dump JSON for your ssh config include IdentityFiles and restore those.\nlong_description = file: README.rst, CHANGELOG.rst\nlong_description_content_type = text/x-rst\nurl = https://github.com/tubone24/ssh_config_json\nproject-urls =\n    Documentation = https://ssh-config-json.readthedocs.io/en/latest/\n    ProjectBlog = https://blog.tubone-project24.xyz\nauthor = tubone24\nauthor_email = tubo.yyyuuu@gmail.com\nkeywords = ssh-config, json, backup, AES\nlicense = MIT\nlicense-file = LICENSE\nplatform = any\nclassifiers =\n    Development Status :: 4 - Beta\n    Intended Audience :: Developers\n    License :: OSI Approved :: MIT License\n    Operating System :: OS Independent\n    Topic :: Documentation :: Sphinx\n    Topic :: System :: Archiving :: Backup\n    Programming Language :: Python\n    Programming Language :: Python :: 3.6\n    Programming Language :: Python :: 3.7\n    Programming Language :: Python :: 3.8\n</code></pre></div>\n<p>setup.pyでsetup.cfgを読み込むようにして、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from setuptools import setup\n\nsetup()</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">python setup.py sdist bdist_wheel</code></pre></div>\n<p>でdist配下にパッケージ作成ができます。簡単ですね。</p>\n<h3 id=\"バージョン管理\" style=\"position:relative;\"><a href=\"#%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86\" aria-label=\"バージョン管理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>バージョン管理</h3>\n<p>PyPIでは同一バージョンのパッケージ登録ができません。</p>\n<p>次のようにsetup.pyもしくはsetup.cfgのいずれかにバージョンを指定すれば\nいいのですが <em>attr</em> を使って次のようにすることでPythonコード上に設定した変数を読み込むことができるので、\nCLIのバージョン表示と平仄をとることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">IntelliJ IDEAPyCharm   \n[metadata]\nname = ssh_config_json\nversion = attr: ssh_config_json.__version__\ndescription = Dump JSON for your ssh config include IdentityFiles and restore those.</code></pre></div>\n<p>さらに、パッケージ登録についても<a href=\"https://github.com/marketplace/actions/pypi-publish\" target=\"_blank\" rel=\"noopener noreferrer\">pypa/gh-action-pypi-publish</a>を使えば簡単に実装できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">      - name: Publish package\n        uses: pypa/gh-action-pypi-publish@master\n        with:\n          user: tubone24\n          password: ${{ secrets.pypi_password }}\n          skip_existing: true</code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>いろいろなことを組み合わせて、便利ツールが実装できました。ありがとうございました。</p>","fields":{"slug":"2020/11/11/ssh-confiig-json"},"frontmatter":{"tags":["サーバー","Python","SSH"],"templateKey":"blog-post","slug":"2020/11/11/ssh-confiig-json","id":null,"title":"面倒なSSH Configと鍵管理はssh-config-jsonに任せよう","url":"2020/11/11/ssh-confiig-json","date":"2020-11-11T14:42:50.126Z","description":"面倒なSSH Configと鍵管理はssh-config-jsonに任せよう","headerImage":"https://i.imgur.com/qBFYNb6.png","year":"2020","month":"11"}}},{"node":{"id":"08faaff2-431a-51f8-bc3a-51509f561e41","html":"<p>NimのTwitterSDKを作ってOSS兄貴になろうと思ったら、結局なれませんでした。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#nim%E3%81%A8%E3%81%AF\">Nimとは？</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E6%B5%81%E8%A1%8C%E3%82%89%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\">どうして流行らないのか？</a></p>\n</li>\n<li>\n<p><a href=\"#nim%E3%81%A7twittersdk%E4%BD%9C%E3%82%8B\">NimでTwitterSDK作る</a></p>\n</li>\n<li>\n<p><a href=\"#twitterapi\">TwitterAPI</a></p>\n<ul>\n<li><a href=\"#oauth10%E3%82%92nim%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF\">oAuth1.0をNimで使うには？</a></li>\n<li><a href=\"#cordeaoauth\">CORDEA/oauth</a></li>\n<li><a href=\"#%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%AE%E5%AE%9F%E8%A3%85\">リトライの実装</a></li>\n<li><a href=\"#nim%E3%81%A7%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9\">Nimでのクラス</a></li>\n<li><a href=\"#config%E3%82%92%E6%8C%81%E3%81%9F%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF\">Configを持たせるには?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#twittersdk%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%91%E3%81%A9%E4%BD%95%E3%81%97%E3%82%88%E3%81%86%E3%81%8B\">TwitterSDK作ったけど何しようか？</a></p>\n<ul>\n<li><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%A7%E8%89%B2%E4%BB%98%E3%81%8D%E6%96%87%E5%AD%97%E3%82%92%E5%87%BA%E3%81%97%E3%81%9F%E3%81%84\">コマンドラインインターフェースで色付き文字を出したい！</a></li>\n<li><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%91%E3%83%BC%E3%82%B5%E3%83%BC%E3%81%AF%E3%81%84%E3%81%A4%E3%82%82%E3%81%AEdocopt\">コマンドラインパーサーはいつものdocopt</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#windows%E3%81%A7%E3%82%82mac%E3%81%A7%E3%82%82ubuntu%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84\">WindowsでもMacでもUbuntuでも使いたい！</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%81%8B%E3%82%82\">できたかも～</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"nimとは\" style=\"position:relative;\"><a href=\"#nim%E3%81%A8%E3%81%AF\" aria-label=\"nimとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nimとは？</h2>\n<p>詳しくは<a href=\"https://blog.tubone-project24.xyz/2019/11/20/docopt-nim#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82nim%E3%81%A8%E3%81%AF%EF%BC%9F\" target=\"_blank\" rel=\"noopener noreferrer\">docoptはNimでも使えたのお話\r\n</a>をご覧いただければと思いますが、<strong>静的型付なコンパイラ言語</strong>でPython, Ada, modulaなどの成熟した言語のいいとこ取りをした<strong>能率的</strong>で、<strong>表現力豊か</strong>で、<strong>エレガントな言語</strong>です。</p>\n<p><img src=\"https://i.imgur.com/BbHTNwQ.png\" alt=\"img\"></p>\n<p>いわゆる別言語への<strong>トランスパイル</strong>を通して、ビルドする言語となり、通常はCを使いますが、C++、JavaScript、Javaなんかへの変換が可能です。(フロントとバックエンドと両方の言語としての覇権を狙っている!?)</p>\n<p>言語の構文もPythonのそれに近く、さらに言えば実行速度も早く、Goのように<strong>Artifactsが巨大</strong>になることもありません。</p>\n<p>ここまで聞くと、いいことことごとくめで素晴らしいのですがNimには欠点があります。</p>\n<p>それは悲しいくらい<strong>流行ってない</strong>ということです。</p>\n<p>いや、一部の熱狂的信者はいるのですが一般的か？と言われると疑問符がついてしまうのです。</p>\n<h2 id=\"どうして流行らないのか\" style=\"position:relative;\"><a href=\"#%E3%81%A9%E3%81%86%E3%81%97%E3%81%A6%E6%B5%81%E8%A1%8C%E3%82%89%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\" aria-label=\"どうして流行らないのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>どうして流行らないのか？</h2>\n<p>これはあくまでも私の主観なのですが、おそらく、</p>\n<p><strong>Pythonの皮を被ったC言語というのはしょせんC言語でしかない</strong>というところでしょうか？</p>\n<p>例えば新しい言語でV言語というのがありますが、あちらは<strong>Go</strong>の構文を色濃く採用しながら、Goのイケてないところを修正してます。例えばジェネリクス(Go2では採用されるらしいですが)やアクセス修飾子、ワンバイナリからlibの切り出しRustに代表されるGCを使わないメモリ管理などを組み込んでいます。</p>\n<p>V言語も流行っているわけではないが、Nimよりは周りで聞くような<strong>気</strong>もします。あくまでも気もするだけだが...。</p>\n<p>V言語はGoを参考にした構文に対し、NimはPythonを明らかに参考にしています。それだけ、書きやすいのかな？と思いつつ例えばこんなことが起きます。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">proc</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> int\r\n\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">fuga</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> int <span class=\"token operator\">=</span>\r\n  result <span class=\"token operator\">=</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\r\n\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">hoge</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> int <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">^</span> n</code></pre></div>\n<p>C言語に親しみのあるほうは、一行目のhoge関数はプロトタイプ宣言かと思いますが、Python書いているだけだと、こんなことわかりません。</p>\n<p><del>大学の授業でC言語やったことある人なら、プロトタイプ宣言はわかりますよね!?</del></p>\n<p>Nimを書いているとちょこちょここんなことが起きます。</p>\n<p>型は型アノテーションもあったりするので慣れ親しんだ人もいると思いますが、C言語特有の話が出てくるとちょっと混乱したりします。</p>\n<p>こういうところがPythonとデラ相性が悪いのです。(と感じるのです)</p>\n<p>というより、もうCとして考えてくださいって感じです。</p>\n<h2 id=\"nimでtwittersdk作る\" style=\"position:relative;\"><a href=\"#nim%E3%81%A7twittersdk%E4%BD%9C%E3%82%8B\" aria-label=\"nimでtwittersdk作る permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NimでTwitterSDK作る</h2>\n<p>とまぁいろいろ問題点は書きましたが、私はNimが好きなので、何か貢献しようと思いTwitterSDKを作っていこうと思います。</p>\n<p>マイナー言語は車輪の再開発の心配がなくものづくりができるのですばらしいですね。（涙）</p>\n<p>ということでまず、TwitterAPIへのアクセス方法について確認します。</p>\n<h2 id=\"twitterapi\" style=\"position:relative;\"><a href=\"#twitterapi\" aria-label=\"twitterapi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TwitterAPI</h2>\n<p>TwitterAPIにはv2とv1.1があるのですが今回はv1.1を使って実装します。</p>\n<p><a href=\"https://developer.twitter.com/en/docs/twitter-api/v1\" target=\"_blank\" rel=\"noopener noreferrer\">https://developer.twitter.com/en/docs/twitter-api/v1</a></p>\n<p>v1.1のAPI認可方式はoAuth1.0です。</p>\n<h3 id=\"oauth10をnimで使うには\" style=\"position:relative;\"><a href=\"#oauth10%E3%82%92nim%E3%81%A7%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF\" aria-label=\"oauth10をnimで使うには permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>oAuth1.0をNimで使うには？</h3>\n<p>APIを使うには当然HTTPリクエストができないといけないですが、Nimにはhttpclientというライブラリがあらかじめ用意されております。</p>\n<p>がしかしザンネンながら、Nimのhttpclientは<strong>oAuthには対応してない</strong>ので、処理系は自前で作らないといけません。</p>\n<p>oAuth2.0、つまりapplication keyとそのシークレットでアクセス可能なAPIであればさほど処理系は難しくなく、Basic認証としてheaderにそれぞれを設定してあげればBearer tokenが取得できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">import</span> httpclient\r\n\r\n<span class=\"token keyword\">const</span> authEndpoint <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.twitter.com/oauth2/token\"</span>\r\n\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">getBearerToken</span><span class=\"token punctuation\">(</span>apiKey<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span> apiSecret<span class=\"token operator\">:</span>string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>string <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">newHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">let</span> credentials <span class=\"token operator\">=</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>apiKey <span class=\"token operator\">&amp;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&amp;</span> apiSecret<span class=\"token punctuation\">)</span>\r\n  client<span class=\"token operator\">.</span>headers <span class=\"token operator\">=</span> <span class=\"token function\">newHttpHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/x-www-form-urlencoded;charset=UTF-8\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string\">\"Authorization\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Basic \"</span> <span class=\"token operator\">&amp;</span> credentials\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">\"grant_type=client_credentials\"</span>\r\n  <span class=\"token keyword\">let</span> response <span class=\"token operator\">=</span> <span class=\"token function\">retryRequest</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> authEndpoint<span class=\"token punctuation\">,</span> httpMethod <span class=\"token operator\">=</span> HttpPost<span class=\"token punctuation\">,</span> body <span class=\"token operator\">=</span> body<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">let</span> bearerToken <span class=\"token operator\">=</span> <span class=\"token function\">parseJson</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token function\">getStr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> bearerToken</code></pre></div>\n<p>しかしながらTwitterAPI 1.1で使う、oAuth1.0となると話は異なります。</p>\n<p><a href=\"https://oauth.net/core/1.0/\" target=\"_blank\" rel=\"noopener noreferrer\">https://oauth.net/core/1.0/</a></p>\n<p>上記サイトにもあるようにoAuth1.0によるクライアント認証には、RequestTokenのリクエストを投げ込み、レスポンスから認可エンドポイントへのRequestToken認可要求リダイレクト、受け取ったTokenを署名にしてAccessTokenリクエストからやっとAccessTokenが受け取れます。</p>\n<p>長い...。</p>\n<p><img src=\"https://i.imgur.com/KrG6jYE.png\" alt=\"img\">\r\n(<a href=\"https://oauth.net/core/1.0/\" target=\"_blank\" rel=\"noopener noreferrer\">https://oauth.net/core/1.0/</a>)</p>\n<p>めんどくさいなぁーと思っていたら、便利なライブラリありました。</p>\n<h3 id=\"cordeaoauth\" style=\"position:relative;\"><a href=\"#cordeaoauth\" aria-label=\"cordeaoauth permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORDEA/oauth</h3>\n<p><a href=\"https://github.com/CORDEA/oauth\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/CORDEA/oauth</a></p>\n<p>ありがたいです。使い方もとってもかんたんで、インストール後例えばAccessTokenが取りたいときは、</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">import</span> oauth1\r\n\r\n<span class=\"token keyword\">const</span>\r\n    requestTokenUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.twitter.com/oauth/request_token\"</span>\r\n    authorizeUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.twitter.com/oauth/authorize\"</span>\r\n    accessTokenUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.twitter.com/oauth/access_token\"</span>\r\n    \r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>apiKey<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span> apiSecret<span class=\"token operator\">:</span>string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Table<span class=\"token punctuation\">[</span>string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">let</span>\r\n    client <span class=\"token operator\">=</span> <span class=\"token function\">newHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    requestTokenResponse <span class=\"token operator\">=</span> client<span class=\"token operator\">.</span><span class=\"token function\">getOAuth1RequestToken</span><span class=\"token punctuation\">(</span>requestTokenUrl<span class=\"token punctuation\">,</span> apiKey<span class=\"token punctuation\">,</span> apiSecret<span class=\"token punctuation\">,</span> isIncludeVersionToHeader <span class=\"token operator\">=</span> true<span class=\"token punctuation\">)</span> <span class=\"token comment\"># RequestToken取得</span>\r\n    requestTokenBody <span class=\"token operator\">=</span> <span class=\"token function\">parseResponseBody</span><span class=\"token punctuation\">(</span>requestTokenResponse<span class=\"token operator\">.</span>body<span class=\"token punctuation\">)</span>\r\n    requestToken <span class=\"token operator\">=</span> requestTokenBody<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_token\"</span><span class=\"token punctuation\">]</span>\r\n    requestTokenSecret <span class=\"token operator\">=</span> requestTokenBody<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_token_secret\"</span><span class=\"token punctuation\">]</span>\r\n  echo <span class=\"token string\">\"Access the url, please obtain the verifier key.\"</span>\r\n  echo <span class=\"token function\">getAuthorizeUrl</span><span class=\"token punctuation\">(</span>authorizeUrl<span class=\"token punctuation\">,</span> requestToken<span class=\"token punctuation\">)</span>\r\n  echo <span class=\"token string\">\"Please enter a verifier key (PIN code).\"</span> <span class=\"token comment\"># Redirect</span>\r\n  <span class=\"token keyword\">let</span>\r\n    verifier <span class=\"token operator\">=</span> readLine stdin\r\n    accessTokenResponse <span class=\"token operator\">=</span> client<span class=\"token operator\">.</span><span class=\"token function\">getOAuth1AccessToken</span><span class=\"token punctuation\">(</span>accessTokenUrl<span class=\"token punctuation\">,</span> apiKey<span class=\"token punctuation\">,</span> apiSecret<span class=\"token punctuation\">,</span> requestToken<span class=\"token punctuation\">,</span> requestTokenSecret<span class=\"token punctuation\">,</span> verifier<span class=\"token punctuation\">,</span> isIncludeVersionToHeader <span class=\"token operator\">=</span> true<span class=\"token punctuation\">)</span> <span class=\"token comment\"># AccessToken取得</span>\r\n    accessTokenResponseBody <span class=\"token operator\">=</span> <span class=\"token function\">parseResponseBody</span><span class=\"token punctuation\">(</span>accessTokenResponse<span class=\"token operator\">.</span>body<span class=\"token punctuation\">)</span>\r\n    accessToken <span class=\"token operator\">=</span> accessTokenResponseBody<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_token\"</span><span class=\"token punctuation\">]</span>\r\n    accessTokenSecret <span class=\"token operator\">=</span> accessTokenResponseBody<span class=\"token punctuation\">[</span><span class=\"token string\">\"oauth_token_secret\"</span><span class=\"token punctuation\">]</span>\r\n  result <span class=\"token operator\">=</span> <span class=\"token function\">initTable[string, string]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  result<span class=\"token punctuation\">[</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> accessToken\r\n  result<span class=\"token punctuation\">[</span><span class=\"token string\">\"accessTokenSecret\"</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> accessTokenSecret</code></pre></div>\n<p>という具合でAccessTokenが取れてしまいます。</p>\n<p>さて、これでNimでTwitterのAPIを叩く準備ができました。</p>\n<h3 id=\"リトライの実装\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4%E3%81%AE%E5%AE%9F%E8%A3%85\" aria-label=\"リトライの実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リトライの実装</h3>\n<p>ついでにAPIコールでリトライできるように改造しましょう。</p>\n<p>なんのことはないです。再帰で呼びつつ、リトライカウントを引数で渡しながら0になったら抜けるよくある実装です。</p>\n<p>リトライ時のSleepは<strong>Exponential BackOff</strong>つまり<strong>指数関数的バックオフ</strong>の実装にしました。</p>\n<p>もともとはネットワークの<strong>コリジョン</strong>が発生したときの待ち時間採択で使われていたアルゴリズムらしいですが、今はもっぱらAPIのリトライ制御に使っています。</p>\n<p>（今の子どもたちって、ネットワークのコリジョンとか知らないのでは？半二重通信とかなにそれおいしいの？だと思いますが、それだけ世の中が発達したということですね。）</p>\n<p>とはいっても難しいことはないです。なんのことはないです。</p>\n<p><img src=\"https://i.imgur.com/lFclC4Z.png\" alt=\"img\"></p>\n<p>で算出できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\">\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">exponentialBackoff<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> int <span class=\"token operator\">=</span>\r\n   <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\r\n     <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\r\n   <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\r\n     <span class=\"token keyword\">return</span> <span class=\"token number\">2</span> <span class=\"token operator\">^</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\r\n\r\n<span class=\"token comment\"># いわゆる再帰でリトライを実施するやつ。デフォルト引数がNimでは使えるから実装かんたん</span>\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">retryoAuth1Request<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span>client<span class=\"token operator\">:</span> HttpClient<span class=\"token punctuation\">,</span> url<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> apiKey<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> apiSecret<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> accessToken<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> accessTokenSecret<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> isIncludeVersionToHeader<span class=\"token operator\">:</span> bool <span class=\"token operator\">=</span> true<span class=\"token punctuation\">,</span> httpMethod<span class=\"token operator\">:</span> HttpMethod <span class=\"token operator\">=</span> HttpGet<span class=\"token punctuation\">,</span> maxRetries<span class=\"token operator\">:</span> int <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> retryCount<span class=\"token operator\">:</span> int <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response  <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\r\n    result <span class=\"token operator\">=</span> client<span class=\"token operator\">.</span><span class=\"token function\">oAuth1Request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> apiKey<span class=\"token punctuation\">,</span> apiSecret<span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">,</span> accessTokenSecret<span class=\"token punctuation\">,</span> isIncludeVersionToHeader<span class=\"token punctuation\">,</span> httpMethod <span class=\"token operator\">=</span> httpMethod<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">except</span><span class=\"token operator\">:</span>\r\n    <span class=\"token keyword\">if</span> retryCount <span class=\"token operator\">>=</span> maxRetries<span class=\"token operator\">:</span>\r\n      <span class=\"token keyword\">raise</span>\r\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token function\">exponentialBackoff</span><span class=\"token punctuation\">(</span>retryCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    result <span class=\"token operator\">=</span> <span class=\"token function\">retryoAuth1Request</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> apiKey<span class=\"token punctuation\">,</span> apiSecret<span class=\"token punctuation\">,</span> accessToken<span class=\"token punctuation\">,</span> accessTokenSecret<span class=\"token punctuation\">,</span> isIncludeVersionToHeader<span class=\"token punctuation\">,</span> httpMethod <span class=\"token operator\">=</span> httpMethod<span class=\"token punctuation\">,</span> maxRetries <span class=\"token operator\">=</span> maxRetries<span class=\"token punctuation\">,</span> retryCount <span class=\"token operator\">=</span> retryCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\r\n    </code></pre></div>\n<h3 id=\"nimでのクラス\" style=\"position:relative;\"><a href=\"#nim%E3%81%A7%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9\" aria-label=\"nimでのクラス permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nimでのクラス</h3>\n<p>上記のoauthで取得できたAccessTokenをうまく引き継ぎながら各APIが叩きたくなると、やはりクラスを作りたくなります。</p>\n<p>が、Nimには<strong>クラスらしいクラスはありません</strong>。Type、Cでいう構造体にメソッドをprocedure(obj)の糖衣構文の形、第一引数にTypeを指定する形で代用します。(Goと同じ感じですね)</p>\n<p>さらにクラスの概念がないので当然コンストラクタもないので、自前コンストラクタを作ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token comment\"># Typeでアトリビュート(メンバ変数)を定義</span>\r\n\r\n<span class=\"token keyword\">type</span>\r\n  Twitter<span class=\"token operator\">*</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">of</span> RootObj\r\n    apiKey<span class=\"token operator\">:</span>string\r\n    apiSecret<span class=\"token operator\">:</span>string\r\n    accessToken<span class=\"token operator\">:</span>string\r\n    accessTokenSecret<span class=\"token operator\">:</span>string\r\n    bearerToken<span class=\"token operator\">*:</span> string\r\n    tweets<span class=\"token operator\">*:</span> JsonNode\r\n    searches<span class=\"token operator\">*:</span> JsonNode\r\n    trends<span class=\"token operator\">*:</span> JsonNode\r\n    lists<span class=\"token operator\">*:</span> JsonNode\r\n    sinceId<span class=\"token operator\">*:</span> string\r\n\r\n<span class=\"token comment\"># 自前コンストラクタ。Twitter Typeを返してあげる</span>\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">newTwitter<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span>apiKey<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span> apiSecret<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span> accessToken<span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span> accessTokenSecret<span class=\"token operator\">:</span>string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Twitter <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">let</span> tw <span class=\"token operator\">=</span> new Twitter\r\n  tw<span class=\"token operator\">.</span>apiKey <span class=\"token operator\">=</span> apiKey\r\n  tw<span class=\"token operator\">.</span>apiSecret <span class=\"token operator\">=</span> apiSecret\r\n  tw<span class=\"token operator\">.</span>accessToken <span class=\"token operator\">=</span> accessToken\r\n  tw<span class=\"token operator\">.</span>accessTokenSecret <span class=\"token operator\">=</span> accessTokenSecret\r\n  <span class=\"token keyword\">if</span> tw<span class=\"token operator\">.</span>accessToken <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">and</span> tw<span class=\"token operator\">.</span>accessTokenSecret <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">:</span>\r\n    <span class=\"token keyword\">let</span> tokens <span class=\"token operator\">=</span> <span class=\"token function\">getAccessToken</span><span class=\"token punctuation\">(</span>tw<span class=\"token operator\">.</span>apiKey<span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>apiSecret<span class=\"token punctuation\">)</span>\r\n    tw<span class=\"token operator\">.</span>accessToken <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">]</span>\r\n    tw<span class=\"token operator\">.</span>accessTokenSecret <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span><span class=\"token string\">\"accessTokenSecret\"</span><span class=\"token punctuation\">]</span>\r\n    <span class=\"token keyword\">discard</span> <span class=\"token function\">setConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>accessToken<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">discard</span> <span class=\"token function\">setConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"accessTokenSecret\"</span><span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>accessTokenSecret<span class=\"token punctuation\">)</span>\r\n  tw<span class=\"token operator\">.</span>bearerToken <span class=\"token operator\">=</span> <span class=\"token function\">getBearerToken</span><span class=\"token punctuation\">(</span>tw<span class=\"token operator\">.</span>apiKey<span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>apiSecret<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> tw\r\n  \r\n<span class=\"token comment\"># 第一引数にTypeを指定するとTypeに関数がバインドされてメソッドっぽくなる</span>\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">getHomeTimeline<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span>tw<span class=\"token operator\">:</span>Twitter<span class=\"token punctuation\">,</span> sinceId<span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>JsonNode <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token function\">newHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">var</span> url<span class=\"token operator\">:</span> string\r\n  <span class=\"token keyword\">if</span> sinceId <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">:</span>\r\n    url <span class=\"token operator\">=</span> homeTimelineEndpoint\r\n  <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\r\n    url <span class=\"token operator\">=</span> homeTimelineEndpoint <span class=\"token operator\">&amp;</span> <span class=\"token string\">\"&amp;since_id=\"</span> <span class=\"token operator\">&amp;</span> sinceId\r\n  <span class=\"token keyword\">let</span> timeline <span class=\"token operator\">=</span> <span class=\"token function\">retryoAuth1Request</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>apiKey<span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>apiSecret<span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>accessToken<span class=\"token punctuation\">,</span> tw<span class=\"token operator\">.</span>accessTokenSecret<span class=\"token punctuation\">,</span> isIncludeVersionToHeader <span class=\"token operator\">=</span> true<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\r\n    tw<span class=\"token operator\">.</span>tweets <span class=\"token operator\">=</span> <span class=\"token function\">parseJson</span><span class=\"token punctuation\">(</span>timeline<span class=\"token operator\">.</span>body<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">except</span> JsonParsingError<span class=\"token operator\">:</span>\r\n    echo timeline<span class=\"token operator\">.</span>headers\r\n    echo timeline<span class=\"token operator\">.</span>body</code></pre></div>\n<h3 id=\"configを持たせるには\" style=\"position:relative;\"><a href=\"#config%E3%82%92%E6%8C%81%E3%81%9F%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF\" aria-label=\"configを持たせるには permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configを持たせるには?</h3>\n<p>Configをプログラムから切り離してもたせる方法はいくつかありますが、色々考えた結果今回はTextConfig形式を使うことにしました。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token section\"><span class=\"token punctuation\">[</span><span class=\"token section-name selector\">auth</span><span class=\"token punctuation\">]</span></span>\r\n<span class=\"token key attr-name\">appKey</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">xxxxxx</span>\"</span>\r\n<span class=\"token key attr-name\">appKeySecret</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">xxxxxxxxxxxxxxxx</span>\"</span>\r\n<span class=\"token key attr-name\">accessToken</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">xxxxxxxxxxxxxx</span>\"</span>\r\n<span class=\"token key attr-name\">accessTokenSecret</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">\"<span class=\"token inner-value\">xxxxxxx</span>\"</span></code></pre></div>\n<p>Windowsでは.iniファイルとして馴染みのある形かと思いますが、name=hogeみたいなパラメータと[section]みたいなセクションから構成されるごくごく普通のコンフィグファイルの形式です。</p>\n<p>Nimではparsecfgというライブラリで読むことができ、更にうれしいのが<strong>書き込み</strong>もできるので今回はこちらを使います。</p>\n<p>自身で取得したAppKeyを使いたい場合や、AccessTokenの保存先としてsettings.cfgを指定する形で実装しております。(セキュリティ的にはAccessToken晒し上げよろしくないですが)</p>\n<p>セクション内のパラメーターを読み込むときは<strong>getSectionValue</strong>を使います。書き込みの際はsetSectionKeyでセクション、パラメータを指定しwriteConfigします。</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">import</span> parsecfg<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">,</span> secret\r\n\r\n<span class=\"token keyword\">type</span>\r\n  TwitterConfig<span class=\"token operator\">*</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">of</span> RootObj\r\n    appKey<span class=\"token operator\">*:</span> string\r\n    appKeySecret<span class=\"token operator\">*:</span> string\r\n    accessToken<span class=\"token operator\">*:</span> string\r\n    accessTokenSecret<span class=\"token operator\">*:</span> string\r\n\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">getConfig<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>TwitterConfig <span class=\"token operator\">=</span>\r\n <span class=\"token keyword\">var</span> cfg<span class=\"token operator\">:</span> Config\r\n <span class=\"token keyword\">if</span> os<span class=\"token operator\">.</span><span class=\"token function\">existsFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n   cfg <span class=\"token operator\">=</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span>\r\n <span class=\"token keyword\">elif</span> os<span class=\"token operator\">.</span><span class=\"token function\">existsFile</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAppDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n   cfg <span class=\"token operator\">=</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAppDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n result <span class=\"token operator\">=</span> new TwitterConfig\r\n <span class=\"token keyword\">if</span> cfg<span class=\"token operator\">.</span><span class=\"token function\">getSectionValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appKey\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">and</span> cfg<span class=\"token operator\">.</span><span class=\"token function\">getSectionValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appKeySecret\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token operator\">:</span>\r\n   result<span class=\"token operator\">.</span>appKey <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultAppKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n   result<span class=\"token operator\">.</span>appKeySecret <span class=\"token operator\">=</span> <span class=\"token function\">getDefaultAppKeySecret</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n <span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\r\n   <span class=\"token comment\"># sectionにあるパラメーターを取るときはgetSectionValueでとれる</span>\r\n   result<span class=\"token operator\">.</span>appKey <span class=\"token operator\">=</span> cfg<span class=\"token operator\">.</span><span class=\"token function\">getSectionValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appKey\"</span><span class=\"token punctuation\">)</span>\r\n   result<span class=\"token operator\">.</span>appKeySecret <span class=\"token operator\">=</span> cfg<span class=\"token operator\">.</span><span class=\"token function\">getSectionValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appKeySecret\"</span><span class=\"token punctuation\">)</span>\r\n result<span class=\"token operator\">.</span>accessToken <span class=\"token operator\">=</span> cfg<span class=\"token operator\">.</span><span class=\"token function\">getSectionValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"accessToken\"</span><span class=\"token punctuation\">)</span>\r\n result<span class=\"token operator\">.</span>accessTokenSecret <span class=\"token operator\">=</span> cfg<span class=\"token operator\">.</span><span class=\"token function\">getSectionValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auth\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"accessTokenSecret\"</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">setConfig<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span>section<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> key<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>TwitterConfig <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">var</span> cfg<span class=\"token operator\">:</span> Config\r\n  <span class=\"token keyword\">if</span> os<span class=\"token operator\">.</span><span class=\"token function\">existsFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n    cfg <span class=\"token operator\">=</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">elif</span> os<span class=\"token operator\">.</span><span class=\"token function\">existsFile</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAppDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n    cfg <span class=\"token operator\">=</span> <span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAppDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\"># 書き出しをするときは、setSectionKeyをして</span>\r\n  cfg<span class=\"token operator\">.</span><span class=\"token function\">setSectionKey</span><span class=\"token punctuation\">(</span>section<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">if</span> os<span class=\"token operator\">.</span><span class=\"token function\">existsFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n    cfg<span class=\"token operator\">.</span><span class=\"token function\">writeConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">elif</span> os<span class=\"token operator\">.</span><span class=\"token function\">existsFile</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAppDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n    <span class=\"token comment\"># writeconfigをする</span>\r\n    cfg<span class=\"token operator\">.</span><span class=\"token function\">writeConfig</span><span class=\"token punctuation\">(</span><span class=\"token function\">joinPath</span><span class=\"token punctuation\">(</span><span class=\"token function\">getAppDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"settings.cfg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token function\">getConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"twittersdk作ったけど何しようか\" style=\"position:relative;\"><a href=\"#twittersdk%E4%BD%9C%E3%81%A3%E3%81%9F%E3%81%91%E3%81%A9%E4%BD%95%E3%81%97%E3%82%88%E3%81%86%E3%81%8B\" aria-label=\"twittersdk作ったけど何しようか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TwitterSDK作ったけど何しようか？</h2>\n<p>ということで、作ったTwitterSDKを使ってなにか作ろうかと思います。</p>\n<p>仕事中にCLIを開いていることが多いのでCLI上でTwitterができるようにして仕事中でもばれずにTwitterできるツールでも作ることにします。</p>\n<p>No Twitter、No Lifeです。</p>\n<p><img src=\"https://i.imgur.com/h8XZ9d2.jpg\" alt=\"ing\"></p>\n<p>さっそくCLI化する旅に出ましょう！</p>\n<h3 id=\"コマンドラインインターフェースで色付き文字を出したい\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%A7%E8%89%B2%E4%BB%98%E3%81%8D%E6%96%87%E5%AD%97%E3%82%92%E5%87%BA%E3%81%97%E3%81%9F%E3%81%84\" aria-label=\"コマンドラインインターフェースで色付き文字を出したい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドラインインターフェースで色付き文字を出したい！</h3>\n<p>というときに便利なライブラリがNimにはあります。</p>\n<p>terminalの<strong>styledWriteLine</strong>を使えば文字色、背景色を自在に変更できます。</p>\n<p><strong>使うときはBlock節に入れないといけないらしい。</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\"><span class=\"token keyword\">import</span> terminal\r\n\r\n<span class=\"token keyword\">proc</span> <span class=\"token function\">formatTweet<span class=\"token operator\">*</span></span><span class=\"token punctuation\">(</span>tweet<span class=\"token operator\">:</span> Tweet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\r\n  <span class=\"token keyword\">block</span><span class=\"token operator\">:</span>\r\n    <span class=\"token keyword\">let</span> header <span class=\"token operator\">=</span> tweet<span class=\"token operator\">.</span>user<span class=\"token operator\">.</span>name <span class=\"token operator\">&amp;</span> <span class=\"token string\">\"(@\"</span> <span class=\"token operator\">&amp;</span> tweet<span class=\"token operator\">.</span>user<span class=\"token operator\">.</span>screenName <span class=\"token operator\">&amp;</span> <span class=\"token string\">\") at \"</span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">dateFormat</span><span class=\"token punctuation\">(</span>tweet<span class=\"token operator\">.</span>createdAt<span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">styledWriteLine</span><span class=\"token punctuation\">(</span>stdout<span class=\"token punctuation\">,</span> fgBlack<span class=\"token punctuation\">,</span> bgGreen<span class=\"token punctuation\">,</span> header<span class=\"token punctuation\">,</span> resetStyle<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"コマンドラインパーサーはいつものdocopt\" style=\"position:relative;\"><a href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%91%E3%83%BC%E3%82%B5%E3%83%BC%E3%81%AF%E3%81%84%E3%81%A4%E3%82%82%E3%81%AEdocopt\" aria-label=\"コマンドラインパーサーはいつものdocopt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>コマンドラインパーサーはいつものdocopt</h3>\n<p>docoptは便利なので本当に愛用しているのですが、Nimでも使えるので今回も使います。</p>\n<p>詳しい解説は過去記事<a href=\"https://blog.tubone-project24.xyz/2019/11/20/docopt-nim\" target=\"_blank\" rel=\"noopener noreferrer\">docoptはNimでも使えたのお話</a>をご確認ください。</p>\n<h2 id=\"windowsでもmacでもubuntuでも使いたい\" style=\"position:relative;\"><a href=\"#windows%E3%81%A7%E3%82%82mac%E3%81%A7%E3%82%82ubuntu%E3%81%A7%E3%82%82%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84\" aria-label=\"windowsでもmacでもubuntuでも使いたい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WindowsでもMacでもUbuntuでも使いたい！</h2>\n<p>ということでGitHub ActionsでCIに乗っけてGitHub Releaseの打ち込みでビルドすることにしました。</p>\n<p>GitHub Releaseで反応するworkflowにしたいので、onは<strong>release.types=created</strong>にします。</p>\n<p>また、GitHub ActionsではOSの種類をそれぞれ<strong>windows-latest</strong>, <strong>macOS-latest</strong>, <strong>ubuntu-latest</strong>で指定できますのでmatrixで指定しちゃいます。</p>\n<p>それぞれのOS対応は下記のとおりです。</p>\n<table>\n<thead>\n<tr>\n<th>label</th>\n<th>OS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ubuntu-latest</td>\n<td>Ubuntu 18.04</td>\n</tr>\n<tr>\n<td>macos-latest</td>\n<td>macOS 10.15</td>\n</tr>\n<tr>\n<td>windows-latest</td>\n<td>Windows Server 2019</td>\n</tr>\n</tbody>\n</table>\n<p>さらに！</p>\n<p>Release noteをGitHub Releaseに乗っけたいので、<a href=\"https://blog.tubone-project24.xyz/2020/08/14/github-action\" target=\"_blank\" rel=\"noopener noreferrer\">前回作った</a><a href=\"https://github.com/marketplace/actions/update-github-release\" target=\"_blank\" rel=\"noopener noreferrer\">Update GitHub Release\r\n</a>を使ってます。</p>\n<p>Release noteの作成は<a href=\"https://github.com/git-chglog/git-chglog\" target=\"_blank\" rel=\"noopener noreferrer\">git-chglog</a>を使って作成します。このツールめちゃスゴ..。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Release\r\n\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">release</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">types</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>created<span class=\"token punctuation\">]</span>\r\n\r\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n    <span class=\"token key atrule\">strategy</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token key atrule\">matrix</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\r\n            <span class=\"token key atrule\">asset_name_suffix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\r\n            <span class=\"token key atrule\">asset_content_type</span><span class=\"token punctuation\">:</span> application/octet<span class=\"token punctuation\">-</span>stream\r\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest\r\n            <span class=\"token key atrule\">asset_name_suffix</span><span class=\"token punctuation\">:</span> .exe\r\n            <span class=\"token key atrule\">asset_content_type</span><span class=\"token punctuation\">:</span> application/octet<span class=\"token punctuation\">-</span>stream\r\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">os</span><span class=\"token punctuation\">:</span> macOS<span class=\"token punctuation\">-</span>latest\r\n            <span class=\"token key atrule\">asset_name_suffix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\r\n            <span class=\"token key atrule\">asset_content_type</span><span class=\"token punctuation\">:</span> application/octet<span class=\"token punctuation\">-</span>stream\r\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> tubone24/setup<span class=\"token punctuation\">-</span>nim<span class=\"token punctuation\">-</span>action@v1.0.1\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set secret file\r\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">SECRET_FILE</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SECRET_FILE <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          echo $SECRET_FILE > base64.txt\r\n          nim c --run scripts/createBase64ToFile.nim</span>\r\n        <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> bash\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Dependencies\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> nimble install <span class=\"token punctuation\">-</span>d <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>accept\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> nimble build <span class=\"token punctuation\">-</span>d<span class=\"token punctuation\">:</span>release\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> get version\r\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> get_version\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          echo ::set-output name=VERSION::${GITHUB_REF/refs\\/tags\\//}</span>\r\n        <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> bash\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> update release\r\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> update_release\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> tubone24/update_release@v1.0\r\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Upload Release Asset\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>release<span class=\"token punctuation\">-</span>asset@v1\r\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.github_token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">upload_url</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.update_release.outputs.upload_url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">asset_path</span><span class=\"token punctuation\">:</span> ./bin/post_twitter_on_work$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.asset_name_suffix <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">asset_name</span><span class=\"token punctuation\">:</span> post_twitter_on_work_$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>_$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> steps.get_version.outputs.VERSION <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.asset_name_suffix <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">asset_content_type</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> matrix.asset_content_type <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n  <span class=\"token key atrule\">update-release-note</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\r\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v1\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate Release Note\r\n        <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> generate_release_note\r\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n          wget https://github.com/git-chglog/git-chglog/releases/download/0.9.1/git-chglog_linux_amd64\r\n          chmod +x git-chglog_linux_amd64\r\n          mv git-chglog_linux_amd64 git-chglog\r\n          ./git-chglog --output ./changelog.md $(git describe --tags $(git rev-list --tags --max-count=1))</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Update Release Body\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> tubone24/update_release@v1.1.0\r\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">body_path</span><span class=\"token punctuation\">:</span> ./changelog.md</code></pre></div>\n<p>これで、Releaseを打ったタイミングで、各OSに対応したバイナリがArtifactsとして公開されるようになりました！</p>\n<p><img src=\"https://i.imgur.com/zhLloGo.png\" alt=\"img\"></p>\n<h2 id=\"できたかも\" style=\"position:relative;\"><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%E3%81%8B%E3%82%82\" aria-label=\"できたかも permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>できたかも～</h2>\n<p>ということで..。</p>\n<p><img src=\"https://i.imgur.com/tMjBX5q.jpg\" alt=\"ig\"></p>\n<p>できたできたかも!!</p>\n<p>ダウンロードはこちらから!!!</p>\n<p><a href=\"https://github.com/tubone24/post_twitter_on_work/releases\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tubone24/post_twitter_on_work/releases</a></p>\n<p>使い方はdocoptのUsageをそのまま貼っておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Overview:\r\n  Get Tweets on CLI for Nim Client\r\n\r\nUsage:\r\n  post_twitter_on_work status\r\n  post_twitter_on_work home [-r|--resetToken] [-i|--interval=&lt;seconds>]\r\n  post_twitter_on_work mention [-r|--resetToken] [-i|--interval=&lt;seconds>]\r\n  post_twitter_on_work user &lt;username> [-r|--resetToken] [-i|--interval=&lt;seconds>]\r\n  post_twitter_on_work search &lt;query> [-r|--resetToken] [-i|--interval=&lt;seconds>]\r\n  post_twitter_on_work list &lt;username>\r\n  post_twitter_on_work showlist &lt;username> &lt;slugname> [-r|--resetToken] [-i|--interval=&lt;seconds>]\r\n  post_twitter_on_work post &lt;text> [-r|--resetToken]\r\n\r\nOptions:\r\n  status                      Get status\r\n  home                        Get home timeline\r\n  mention                     Get mention timeline\r\n  user                        Get user timeline\r\n  search                      Get twitter search\r\n  list                        Get twitter list\r\n  post                        Post Tweet\r\n  showlist                    Show list\r\n  &lt;username>                  Twitter username\r\n  &lt;query>                     Search query keyword\r\n  &lt;text>                      Tweet text\r\n  &lt;slugname>                  Slug name\r\n  -i, --interval=&lt;seconds>    Get tweet interval (defaults 60 second)\r\n  -r, --resetToken            Reset accessToken when change user account</code></pre></div>\n<p>というのは冗談で、例えば自分のタイムラインが見たいときは、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ post_twitter_on_work home</code></pre></div>\n<p>とやってあげればいいです。これだけです。</p>\n<p>初回アクセス、またはリセットトークンのときだけ、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ ./post_witter_on_work home\r\n\r\nAccess the url, please obtain the verifier key.\r\nhttps://api.twitter.com/oauth/authorize?oauth_token=xxxxxxxxxxxxxxxxxxxxxxx\r\nPlease enter a verifier key (PIN code).</code></pre></div>\n<p>とアクセストークンのリクエストのためPINの要求が入ります。</p>\n<p>URLにアクセスすれば、</p>\n<p><img src=\"https://i.imgur.com/3GwsdvT.png\" alt=\"img\"></p>\n<p>という具合でPINが出てくるのでこちらを入力してくれればアクセストークンを取ってそのままタイムラインの表示に移ります。</p>\n<p><img src=\"https://i.imgur.com/VASzn6U.png\" alt=\"img\"></p>\n<p>また、返信の確認は、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">post_twitter_on_work mention</code></pre></div>\n<p>投稿は、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">post_twitter_on_work post 投稿したい文言</code></pre></div>\n<p>でできます。シンプルですね。</p>\n<p>これで仕事中でもばれずにTwitterできますね（遠い目）。</p>\n<p><img src=\"https://i.imgur.com/zAFRZJQ.gif\" alt=\"img\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>実は今すごい仕事が忙しいのでこんなツール作っても仕事中にTwitterなんてできません。</p>\n<p>久しぶりにリモートワークだったので、余暇を使って振り返り記事書きました。以上。</p>","fields":{"slug":"2020/09/22/nim-twitter"},"frontmatter":{"tags":["Nim","Twitter"],"templateKey":"blog-post","slug":"2020/09/22/nim-twitter","id":null,"title":"Nim用のTwitterSDK作るついでに仕事中TwitterができるCLIを作った","url":"2020/09/22/nim-twitter","date":"2020-09-22T11:39:58.035Z","description":"Nim用のTwitterSDK作るついでに仕事中TwitterができるCLIを作った","headerImage":"https://i.imgur.com/BO7QR6p.png","year":"2020","month":"09"}}},{"node":{"id":"11fe654f-3ece-5f11-9ab1-bae0ef647ee1","html":"<p>ちょうどいい、<strong>GitHub Actions</strong>がなかったので作ってみました。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E3%81%AA%E3%82%93%E3%81%A7\">なんで？</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%9D%E3%81%93%E3%81%A7github-javascript-action\">そこで、GitHub JavaScript Action</a></p>\n</li>\n<li>\n<p><a href=\"#actionyml\">action.yml</a></p>\n</li>\n<li>\n<p><a href=\"#tsc%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89ncc%E3%81%A7%E3%83%90%E3%83%B3%E3%83%89%E3%83%AB\">tscでビルドNccでバンドル</a></p>\n<ul>\n<li><a href=\"#tsc\">tsc</a></li>\n<li><a href=\"#ncc\">ncc</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9\">ソース</a></p>\n<ul>\n<li><a href=\"#inputoutput\">input/output</a></li>\n<li><a href=\"#update-release%E3%81%AFactionsgithub%E3%81%A7%E3%81%8B%E3%82%93%E3%81%9F%E3%82%93%E3%81%AB%E4%BD%9C%E3%82%8C%E3%81%BE%E3%81%97%E3%81%9F\">update releaseは@actions/githubでかんたんに作れました</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%81%AB%E5%85%AC%E9%96%8B\">デプロイ、マーケットに公開</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"なんで\" style=\"position:relative;\"><a href=\"#%E3%81%AA%E3%82%93%E3%81%A7\" aria-label=\"なんで permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なんで？</h2>\n<p>GitHub Actionsで<strong>uses</strong>を使ったことはありますか？</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Generate Word Cloud\r\n\r\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> master\r\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0 5 * * *\"</span>\r\n\r\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\r\n  <span class=\"token key atrule\">GenerateWordCloud</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\r\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up Python 3.x\r\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>python@v1\r\n <span class=\"token comment\"># ここ</span>\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">python-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.7\"</span>\r\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v1\r\n <span class=\"token comment\"># ここ</span>\r\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\r\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ~/.cache/pip\r\n          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> runner.os <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>pip<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> hashFiles('<span class=\"token important\">**/requirements.txt')</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\r\n          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\r\n            ${{ runner.os }}-pip-</span></code></pre></div>\n<p>GitHub Actionsを使うときには何かと便利なやつですが、公式には<strong>actions</strong>というレポジトリにいます。</p>\n<p><a href=\"https://github.com/actions\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/actions</a></p>\n<p>今回は、<a href=\"https://github.com/tubone24/post_twitter_on_work\" target=\"_blank\" rel=\"noopener noreferrer\">\r\npost_twitter_on_work</a>の開発のなかで、<strong>GitHub ReleasesにGitHub ActionsでBuildしたArtifactsをアップデートしたい</strong>欲求が出てきました。</p>\n<p>通常、GitHub ReleasesをGitHub Actionsで使うには、<a href=\"https://github.com/actions/create-release\" target=\"_blank\" rel=\"noopener noreferrer\">actions\r\n/\r\ncreate-release</a>を使うことが多いです。</p>\n<p>こちらの使い方としては、</p>\n<ol>\n<li>Git Tagを打ってPushする.</li>\n<li>Pushに反応して、actions</li>\n</ol>\n<p>/\r\ncreate-releaseが動く.\r\n3. 出来上がったReleasesに<a href=\"https://github.com/actions/upload-release-asset\" target=\"_blank\" rel=\"noopener noreferrer\">actions/upload-release-asset</a>でArtifactsを上げる.</p>\n<p>という感じの使い方になるかと思います。</p>\n<p>が、しかし、<a href=\"https://github.com/tubone24/post_twitter_on_work\" target=\"_blank\" rel=\"noopener noreferrer\">post_twitter_on_work</a>では下記理由でそれができない（やりたくない）のでした。</p>\n<ul>\n<li>Git Tagうつのめんどくさい。\n<ul>\n<li>GitHub ReleasesからDraft ReleaseでTag打ちたい</li>\n</ul>\n</li>\n<li>matrixで何度もJobが動く\n<ul>\n<li>重複して、Create Releasesできない</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"そこでgithub-javascript-action\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%81%93%E3%81%A7github-javascript-action\" aria-label=\"そこでgithub javascript action permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>そこで、GitHub JavaScript Action</h2>\n<p>いいものがないなら作る。それしかないです。</p>\n<p>GitHub Actionを作るには2種類の方法があります。</p>\n<ul>\n<li><a href=\"https://docs.github.com/ja/actions/creating-actions/about-actions#docker-container-actions\" target=\"_blank\" rel=\"noopener noreferrer\">Dockerコンテナ</a></li>\n<li><a href=\"https://docs.github.com/ja/actions/creating-actions/about-actions#javascript-actions\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript</a></li>\n</ul>\n<p>Dockerコンテナで作る場合、GitHub ActionsのLinux上でコンテナを起動するので、<strong>WindowsやMacのOSでは動きません</strong>。また、いろんなことができる一方、コンテナが立ち上がるための<strong>時間もかかり</strong>ます。</p>\n<p>JavaScriptでは、Node.js 12で動くJSコードを書くだけです。WindowsやMacのOS上でも問題なく動きます。JavaScriptに慣れていて、特定のライブラリや言語を使わないといけない状況でなければJavaScript一択だと思います。</p>\n<p>JavaScript　Actionは、公式にテンプレートがありますので、かんたんに作ることができます。</p>\n<p><a href=\"https://github.com/actions/javascript-action\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/actions/javascript-action</a></p>\n<p>さらにTypeScript用のテンプレートもあります。嬉しいですね。</p>\n<p><a href=\"https://github.com/actions/typescript-action\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/actions/typescript-action</a></p>\n<p>今回はJavaScript Action(TypeScript)を使って開発していこうと思います。</p>\n<h2 id=\"actionyml\" style=\"position:relative;\"><a href=\"#actionyml\" aria-label=\"actionyml permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>action.yml</h2>\n<p>GitHub Actionのメタデータとして、<strong>action.yml</strong>を作ります。</p>\n<p>名前や説明のほかwithで定義するinputやoutputで使える変数や、ランタイムを定義できます。</p>\n<p>inputやoutputは変数名の他、説明とrequiredを定義できます。</p>\n<p>また、JavaScript Actionのランタイムはnode12一択です。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: 'Update GitHub Release'\r\ndescription: 'Update GitHub Release'\r\nauthor: 'tubone24'\r\ninputs:\r\n  release_name:\r\n    description: 'new release name, if not, take over before name'\r\n    required: false\r\n  body:\r\n    description: 'new body text, if not, take over before text'\r\n    required: false\r\n  draft:\r\n    description: 'new draft, if not, take over before draft'\r\n    required: false\r\n  prerelease:\r\n    description: 'new prerelease, if not, take over prerelease'\r\n    required: false\r\n  is_append_body:\r\n    description: 'If true, append body text, If false, overwrite body text, default is false'\r\n    required: false\r\n  body_path:\r\n    description: 'Path to file with new body text.'\r\n    required: false\r\noutputs:\r\n  id:\r\n    description: 'The ID of the Release'\r\n  html_url:\r\n    description: 'The HTML url of the Release'\r\n  upload_url:\r\n    description: 'The upload url of the Release'\r\n  name:\r\n    description: 'The name of the Release'\r\n  body:\r\n    description: 'The body of the Release'\r\n  published_at:\r\n    description: 'The publish at of the Release'\r\n  tag_name:\r\n    description: 'The tag name of the Release'\r\nruns:\r\n  using: 'node12'\r\n  main: 'dist/index.js'\r\nbranding:\r\n  icon: 'tag'\r\n  color: 'green'</code></pre></div>\n<h2 id=\"tscでビルドnccでバンドル\" style=\"position:relative;\"><a href=\"#tsc%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89ncc%E3%81%A7%E3%83%90%E3%83%B3%E3%83%89%E3%83%AB\" aria-label=\"tscでビルドnccでバンドル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tscでビルドNccでバンドル</h2>\n<h3 id=\"tsc\" style=\"position:relative;\"><a href=\"#tsc\" aria-label=\"tsc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>tsc</h3>\n<p>TypeScriptを使って開発したことがある人なら一度は使ったことのある<strong>tsc</strong>。TypeScriptでGitHub Actionを作るにはtscでJavaScriptにビルドしてあげる必要があります。</p>\n<p>まず、srcディレクトリのtsファイルをlibディレクリにビルドするので、tsconfig.jsonを書きましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token string-property property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./lib\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"**/*.test.ts\"</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>rootディレクトリはsrc, outディレクトリはlibとなります。strictがfalseでごめんなさい。真面目にTypeScriptやってなくてすみません。</p>\n<p>packages.jsonでもbuildはtscで設定してしまいます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>npm run buildすれば、libディレクトリにJavaScriptでビルドされるようになりました。</p>\n<h3 id=\"ncc\" style=\"position:relative;\"><a href=\"#ncc\" aria-label=\"ncc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ncc</h3>\n<p>JavaScriptにビルドされたjsファイルを<a href=\"https://github.com/vercel/ncc\" target=\"_blank\" rel=\"noopener noreferrer\">vercel/ncc</a>というバンドルツールを使って、1ファイルにバンドルしてaction.ymlで定義しているmainのjsファイルとして指定してあげる必要があります。</p>\n<p>バンドルツールといえば<strong>Webpack</strong>が有名ですが、それこそVercelでSSRをfunctionに乗っかるJavaScriptをコンパイルするための軽量ツールです。GitHub Actionsでも使えるんですね。</p>\n<p>packages.jsonで、</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\r\n    <span class=\"token string-property property\">\"package\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ncc build lib/main.js -o dist --source-map --license licenses.txt\"</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>npm run packageとすることで、さきほどtscでつくったJavaScriptをバンドルできます。</p>\n<h2 id=\"ソース\" style=\"position:relative;\"><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9\" aria-label=\"ソース permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ソース</h2>\n<h3 id=\"inputoutput\" style=\"position:relative;\"><a href=\"#inputoutput\" aria-label=\"inputoutput permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>input/output</h3>\n<p>action.ymlで設定したinputやoutputは <strong>@actions/core</strong> のgetInput, setOutputでかんたんに使うことができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>getInput<span class=\"token punctuation\">,</span> setFailed<span class=\"token punctuation\">,</span> setOutput<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@actions/core'</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> run <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n\r\n    <span class=\"token keyword\">const</span> newReleaseName <span class=\"token operator\">=</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'release_name'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">const</span> newBody <span class=\"token operator\">=</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">const</span> newDraft <span class=\"token operator\">=</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'draft'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">const</span> newPrerelease <span class=\"token operator\">=</span> <span class=\"token function\">getInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prerelease'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>required<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token punctuation\">(</span>中略<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\r\n    \r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> updatedReleaseId<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html_url'</span><span class=\"token punctuation\">,</span> updatedHtmlUrl<span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'upload_url'</span><span class=\"token punctuation\">,</span> updatedUploadUrl<span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> updatedReleaseName<span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span> updatedBody<span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'published_at'</span><span class=\"token punctuation\">,</span> updatedPublishAt<span class=\"token punctuation\">)</span>\r\n    <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tag_name'</span><span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token function\">setFailed</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<h3 id=\"update-releaseはactionsgithubでかんたんに作れました\" style=\"position:relative;\"><a href=\"#update-release%E3%81%AFactionsgithub%E3%81%A7%E3%81%8B%E3%82%93%E3%81%9F%E3%82%93%E3%81%AB%E4%BD%9C%E3%82%8C%E3%81%BE%E3%81%97%E3%81%9F\" aria-label=\"update releaseはactionsgithubでかんたんに作れました permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>update releaseは@actions/githubでかんたんに作れました</h3>\n<p>GitHub ActionでGitHubの機能を使うには便利な**@actions/github**を使えば一発でした。</p>\n<p>GitHub Actionsから取れるSecretをenvで渡してあげるだけで使えます。便利。</p>\n<p>レポジトリ情報や、Tag情報はcontextから取れます。</p>\n<p>updateReleaseはgithub.repos.updateReleaseからできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>GitHub<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@actions/github'</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> run <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> github <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GitHub</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">GITHUB_TOKEN</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>owner<span class=\"token punctuation\">,</span> repo<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>repo\r\n    <span class=\"token keyword\">const</span> tagName <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>ref\r\n    <span class=\"token keyword\">const</span> tag <span class=\"token operator\">=</span> tagName<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'refs/tags/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">const</span> getReleaseResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> github<span class=\"token punctuation\">.</span>repos<span class=\"token punctuation\">.</span><span class=\"token function\">getReleaseByTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      owner<span class=\"token punctuation\">,</span>\r\n      repo<span class=\"token punctuation\">,</span>\r\n      tag\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\r\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        id<span class=\"token operator\">:</span> oldReleaseId<span class=\"token punctuation\">,</span>\r\n        html_url<span class=\"token operator\">:</span> oldHtmlUrl<span class=\"token punctuation\">,</span>\r\n        upload_url<span class=\"token operator\">:</span> oldUploadUrl<span class=\"token punctuation\">,</span>\r\n        body<span class=\"token operator\">:</span> oldBody<span class=\"token punctuation\">,</span>\r\n        draft<span class=\"token operator\">:</span> oldDraft<span class=\"token punctuation\">,</span>\r\n        name<span class=\"token operator\">:</span> oldName<span class=\"token punctuation\">,</span>\r\n        prerelease<span class=\"token operator\">:</span> oldPrerelease\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getReleaseResponse</span>\r\n\r\n    <span class=\"token punctuation\">(</span>中略<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">const</span> updateReleaseResponse <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> github<span class=\"token punctuation\">.</span>repos<span class=\"token punctuation\">.</span><span class=\"token function\">updateRelease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      owner<span class=\"token punctuation\">,</span>\r\n      release_id<span class=\"token operator\">:</span> oldReleaseId<span class=\"token punctuation\">,</span>\r\n      repo<span class=\"token punctuation\">,</span>\r\n      body<span class=\"token operator\">:</span> bodyFileContent <span class=\"token operator\">||</span> body<span class=\"token punctuation\">,</span>\r\n      name<span class=\"token punctuation\">,</span>\r\n      draft<span class=\"token punctuation\">,</span>\r\n      prerelease\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\r\n      data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n        id<span class=\"token operator\">:</span> updatedReleaseId<span class=\"token punctuation\">,</span>\r\n        body<span class=\"token operator\">:</span> updatedBody<span class=\"token punctuation\">,</span>\r\n        upload_url<span class=\"token operator\">:</span> updatedUploadUrl<span class=\"token punctuation\">,</span>\r\n        html_url<span class=\"token operator\">:</span> updatedHtmlUrl<span class=\"token punctuation\">,</span>\r\n        name<span class=\"token operator\">:</span> updatedReleaseName<span class=\"token punctuation\">,</span>\r\n        published_at<span class=\"token operator\">:</span> updatedPublishAt\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> updateReleaseResponse\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"デプロイマーケットに公開\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%81%AB%E5%85%AC%E9%96%8B\" aria-label=\"デプロイマーケットに公開 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デプロイ、マーケットに公開</h2>\n<p>デプロイはdistディレクトリを含めた形でpushすればいいだけです。</p>\n<p>せっかくなので、distディレクトリのデプロイはGitHub Actionsでpushで動くワークフローでやってます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: Test and Build\r\n\r\non:\r\n  push:\r\n    branches:\r\n      - '*'\r\n    tags-ignore:\r\n      - 'v*' # version Tag push use release workflow\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v1\r\n      - name: Install Dependencies\r\n        run: npm install\r\n      - name: Test and Build\r\n        run: npm run all\r\n      - name: Use Coveralls\r\n        uses: coverallsapp/github-action@master\r\n        with:\r\n          github-token: ${{ secrets.GITHUB_TOKEN }}\r\n      - name: Setup git\r\n        env:\r\n          GITHUB_TOKEN: ${{ secrets.github_token }}\r\n        run: |\r\n          git config --local user.name GitHubActions\r\n          git remote set-url origin https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git\r\n      - name: Git push, tag, upload assets\r\n        run: |\r\n          git checkout master\r\n          git pull origin master\r\n          git add -A\r\n          DIFF=`git diff --cached --numstat | wc -l`\r\n          if [ $DIFF -eq 0 ]; then\r\n            exit 0\r\n          fi\r\n          git commit -am 'GitHub Actions commit' --allow-empty\r\n          git push origin master</code></pre></div>\n<p>pushが終わったらGitHub ReleaseからReleaseを切ってあげることで、marketに公開する形になります。</p>\n<p><img src=\"https://i.imgur.com/5715wbc.png\" alt=\"img\"></p>\n<p>うまく公開できると、こんな漢字で、usesで使えるActionとして公開されます。</p>\n<p><img src=\"https://i.imgur.com/kXVhSw7.png\" alt=\"img\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>今回のソースコード一式は<a href=\"https://github.com/tubone24/update_release\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tubone24/update_release</a>に、</p>\n<p>マーケットプレイスは<a href=\"https://github.com/marketplace/actions/update-github-release\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/marketplace/actions/update-github-release</a>で公開してます。</p>\n<p>GitHub Actionsが徐々に使われるようになってきましたのでビッグウェーブに乗りたいですね。</p>\n<p><img src=\"https://i.imgur.com/rp2VEVO.jpg\" alt=\"img\"></p>","fields":{"slug":"2020/08/14/github-action"},"frontmatter":{"tags":["GitHub","GitHub Actions"],"templateKey":"blog-post","slug":"2020/08/14/github-action","id":null,"title":"GitHub JavaScript Action で GitHub ReleaseのUpdate Releaseを作ってみた。","url":"2020/08/14/github-action","date":"2020-09-13T12:41:20.699Z","description":"GitHub JavaScript Action で GitHub ReleaseのUpdate Releaseを作ってみた。.","headerImage":"https://i.imgur.com/kXVhSw7.png","year":"2020","month":"09"}}}],"pathPrefix":"pages","first":false,"last":false,"index":3,"pageCount":11,"additionalContext":{"totalCount":110}}},"staticQueryHashes":["2959249232"]}