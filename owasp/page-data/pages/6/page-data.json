{"componentChunkName":"component---src-templates-index-tsx","path":"/pages/6","result":{"pageContext":{"totalCount":110,"group":[{"node":{"id":"c5e6d506-eb88-5144-a31b-9748dadbc155","html":"<p>味気ないので作ってみました。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E4%BB%8A%E5%B9%B4%E3%81%AEissue%E4%BB%8A%E5%B9%B4%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AB\">今年のIssue今年のうちに</a></li>\n<li><a href=\"#%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">ということで作ってみた</a></li>\n</ul>\n</div>\n<h2 id=\"今年のissue今年のうちに\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%B9%B4%E3%81%AEissue%E4%BB%8A%E5%B9%B4%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AB\" aria-label=\"今年のissue今年のうちに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今年のIssue今年のうちに</h2>\n<p>はや数ヶ月やってるこのブログですが、今年中にやっておきたいことがありました。</p>\n<p>それは...</p>\n<p>Blog用のロゴを作ることです。</p>\n<h2 id=\"ということで作ってみた\" style=\"position:relative;\"><a href=\"#%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\" aria-label=\"ということで作ってみた permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ということで作ってみた</h2>\n<p>こちらです。</p>\n<p><img src=\"/assets/logo3.svg\" alt=\"logo\"></p>\n<p>サメは私のアイコンから、テーマカラーは好きな色の緑にしました。</p>\n<p>意外に知られていませんが、このブログtubone BOYAKIというサイト名です。</p>\n<p>ぼやきを世界語にしたい。(ぼやき)</p>\n<p>Fontは<a href=\"https://www.fontsquirrel.com/fonts/merienda\" target=\"_blank\" rel=\"noopener noreferrer\">Merienda</a>ということで作りました。軽食という意味です。</p>","fields":{"slug":"2019/12/30/newlogo"},"frontmatter":{"tags":["ぼやき","Logo","SVG"],"templateKey":"blog-post","slug":"2019/12/30/newlogo","id":null,"title":"Blog用に新しいLogo作った話","url":"2019/12/30/newlogo","date":"2019-12-30T03:28:20.540Z","description":"Blog用に新しいLogoを作りました。結構簡単にできました。","headerImage":"https://i.imgur.com/Vpzxism.png","year":"2019","month":"12"}}},{"node":{"id":"b22794e9-de83-5b51-9aa3-09dc6a58bc6f","html":"<p>アフィリエイト系のブログとかでよくお見かけする○○分で読み終わりますという表示をGatsby.jsで作った本ブログにも入れてみようというお話です。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#estimated-reading-time%E3%81%AE%E5%8A%B9%E6%9E%9C\">Estimated Reading Timeの効果</a></p>\n<ul>\n<li><a href=\"#%E5%A7%8B%E3%81%BE%E3%82%8A%E3%81%AF%E3%81%A8%E3%81%82%E3%82%8B%E5%AE%9F%E9%A8%93%E3%81%8B%E3%82%89\">始まりはとある実験から</a></li>\n<li><a href=\"#wordpress%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%82%A8%E3%82%A4%E3%83%88%E3%82%B5%E3%82%A4%E3%83%88%E5%90%91%E3%81%91%E3%81%AB%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B\">WordPressアフィリエイトサイト向けにプラグインができる</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gatsbyjs%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%82%B5%E3%82%A4%E3%83%88%E3%81%A7%E3%82%82%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">Gatsby.jsのブログサイトでも実装してみる</a></p>\n<ul>\n<li><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">インストール</a></li>\n<li><a href=\"#blogpost%E5%A4%89%E6%9B%B4\">blogPost変更</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"estimated-reading-timeの効果\" style=\"position:relative;\"><a href=\"#estimated-reading-time%E3%81%AE%E5%8A%B9%E6%9E%9C\" aria-label=\"estimated reading timeの効果 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Estimated Reading Timeの効果</h2>\n<p>そもそも、<strong>読み終わるまであと○○分</strong>、なんていう表示って必要なのでしょうか？</p>\n<p>いまいち効果が解らなかったので実装の前に効果を確認していきます。</p>\n<h3 id=\"始まりはとある実験から\" style=\"position:relative;\"><a href=\"#%E5%A7%8B%E3%81%BE%E3%82%8A%E3%81%AF%E3%81%A8%E3%81%82%E3%82%8B%E5%AE%9F%E9%A8%93%E3%81%8B%E3%82%89\" aria-label=\"始まりはとある実験から permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>始まりはとある実験から</h3>\n<p>そもそも、Webページを運用するものにとって無くてはならない指標は何でしょうか？</p>\n<p>そうです。<strong>滞在時間</strong>です。</p>\n<p>せっかく優良コンテンツを作ってもすぐ読み飛ばされては仕方がない。これはブログをやる者、ECサイトをやる者、世界のWebページ運用者であれば誰もが抱える悩みなわけです。</p>\n<p>そんな悩みを解決するべくとある実験をしたのがWeb Developerの<a href=\"https://www.linkedin.com/in/briancray\" target=\"_blank\" rel=\"noopener noreferrer\">Brian Cray</a>さんでした。<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>Brian crayさんはWebにおけるユーザビリティ研究の第一人者である<a href=\"https://www.nngroup.com/people/jakob-nielsen/\" target=\"_blank\" rel=\"noopener noreferrer\">Jakob Nielsen</a>博士の<a href=\"https://www.nngroup.com/articles/how-little-do-users-read/\" target=\"_blank\" rel=\"noopener noreferrer\">How Little Do Users Read?</a>というリサーチからWebページの記事のうち<strong>18%しか読まれていない</strong>という事実を知ってしまいます。悲しい。</p>\n<p>ちなみに下記グラフは<a href=\"https://www.nngroup.com/articles/how-little-do-users-read/\" target=\"_blank\" rel=\"noopener noreferrer\">How Little Do Users Read?</a>から引用したものですが18%まで一気に下がるんですね・・・。</p>\n<p><img src=\"https://media.nngroup.com/media/editor/alertbox/percent-of-text-read.gif\" alt=\"img\"></p>\n<p><a href=\"https://www.linkedin.com/in/briancray\" target=\"_blank\" rel=\"noopener noreferrer\">Brian Cray</a>さんの上記問題への解決策は、あらかじめユーザーにどれくらいで読み終わるか教えてあげるというものでした。</p>\n<p>PHPのコードを作り、サイトに<strong>estimated reading time</strong>を設定したのです。</p>\n<blockquote>\n<p>My solution is to set user expectations upfront with an estimated reading time for my articles.</p>\n<p>My hope is that I can influence users to interrupt article abandonment with the thought “well I know it’s only going to be 1 more minute to finish reading this thing, so I’ll just finish.” <cite>Estimated reading time in web design</cite></p>\n</blockquote>\n<p>実装後、サイトの統計を取得し、結果的に13.8%ほど滞在時間が向上したとのこと！すごい。</p>\n<blockquote>\n<p>After testing my estimated time theory on nearly 3,000 visits, I have some results.</p>\n<p>Showing an estimated time improved time on site by 13.8%.</p>\n<p>What’s more interesting though—people either followed me, subscribed to my blog, or retweeted my articles 66.7% more often. <cite>Estimated reading time in web design</cite></p>\n</blockquote>\n<p>引用にも乗っけたとおり、この記事、めちゃくちゃリツイートされて一気に<strong>Estimated reading time</strong>が有名になりました。</p>\n<h3 id=\"wordpressアフィリエイトサイト向けにプラグインができる\" style=\"position:relative;\"><a href=\"#wordpress%E3%82%A2%E3%83%95%E3%82%A3%E3%83%AA%E3%82%A8%E3%82%A4%E3%83%88%E3%82%B5%E3%82%A4%E3%83%88%E5%90%91%E3%81%91%E3%81%AB%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B\" aria-label=\"wordpressアフィリエイトサイト向けにプラグインができる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WordPressアフィリエイトサイト向けにプラグインができる</h3>\n<p><a href=\"https://www.linkedin.com/in/briancray\" target=\"_blank\" rel=\"noopener noreferrer\">Brian Cray</a>さんは、自身のサイトにPHPコードを乗っけたものの、WordPressのプラグイン化は別の方(<a href=\"https://www.nigauri.me/\" target=\"_blank\" rel=\"noopener noreferrer\">nigauri</a>さん)が作成し、滞在時間を延ばしたいアフィリエイトサイトがこぞって<a href=\"https://ja.wordpress.org/plugins/insert-estimated-reading-time/\" target=\"_blank\" rel=\"noopener noreferrer\">insert-estimated-reading-time</a>を導入したことで一気にデファクトスタンダードになりました。</p>\n<h2 id=\"gatsbyjsのブログサイトでも実装してみる\" style=\"position:relative;\"><a href=\"#gatsbyjs%E3%81%AE%E3%83%96%E3%83%AD%E3%82%B0%E3%82%B5%E3%82%A4%E3%83%88%E3%81%A7%E3%82%82%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"gatsbyjsのブログサイトでも実装してみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gatsby.jsのブログサイトでも実装してみる</h2>\n<p>さっそくこのブログにも導入してみます。</p>\n<p>このブログは<strong>Gatsby.js</strong>でできていますが、Gatsby.jsで利用する<strong>GraphQL</strong>にwordcountとEstimated Reading Timeを追加するプラグイン<strong>gatsby-remark-reading-time</strong>があるのでインストールします。</p>\n<h3 id=\"インストール\" style=\"position:relative;\"><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\" aria-label=\"インストール permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>インストール</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save gatsby-remark-reading-time</code></pre></div>\n<p><strong>gatsby-config.js</strong>に、プラグインの設定を追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token string\">'gatsby-transformer-remark'</span><span class=\"token punctuation\">,</span>\n<span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'gatsby-remark-reading-time'</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3 id=\"blogpost変更\" style=\"position:relative;\"><a href=\"#blogpost%E5%A4%89%E6%9B%B4\" aria-label=\"blogpost変更 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>blogPost変更</h3>\n<p>プラグインをインストールするとGraphQLでreadingTimeを使えます。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> pageQuery <span class=\"token operator\">=</span> graphql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span>\n<span class=\"token string\">  fragment post on MarkdownRemark {</span>\n<span class=\"token string\">    fields {</span>\n<span class=\"token string\">      slug</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token string\">      readingTime {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token string\">          minutes</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token string\">          words</span></span><span class=\"token string\">      }</span>\n<span class=\"token string\">    }</span>\n<span class=\"token string\">    frontmatter {</span>\n<span class=\"token string\">      id</span>\n<span class=\"token string\">      title</span>\n<span class=\"token string\">      slug</span>\n<span class=\"token string\">      date</span>\n<span class=\"token string\">      headerImage</span>\n<span class=\"token string\">    }</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span>\n<span class=\"token string\">  query BlogPostQuery($index: Int) {</span>\n<span class=\"token string\">    content: allMarkdownRemark(</span>\n<span class=\"token string\">      sort: { order: DESC, fields: frontmatter___date }</span>\n<span class=\"token string\">      skip: $index</span>\n<span class=\"token string\">      limit: 1</span>\n<span class=\"token string\">    ) {</span>\n<span class=\"token string\">      edges {</span>\n<span class=\"token string\">        node {</span>\n<span class=\"token string\">          id</span>\n<span class=\"token string\">          html</span>\n<span class=\"token string\">          excerpt</span>\n<span class=\"token string\">          ...post</span>\n<span class=\"token string\">        }</span>\n<span class=\"token string\">      }</span>\n<span class=\"token string\">    }</span>\n<span class=\"token string\">  }</span>\n<span class=\"token string\"></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>blog-post.jsで利用します。</p>\n<p>こんな感じ↓</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> node <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>edges<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      html<span class=\"token punctuation\">,</span> frontmatter<span class=\"token punctuation\">,</span> fields<span class=\"token punctuation\">,</span> excerpt<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> slug<span class=\"token punctuation\">,</span> readingTime <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> fields<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> minutes<span class=\"token punctuation\">,</span> words <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> readingTime<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"row post order-2\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col-xl-7 col-lg-6 col-md-12 col-sm-12 order-10 content\"</span><span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>div\n            className<span class=\"token operator\">=</span><span class=\"token string\">\"countdown\"</span>\n            style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">padding</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token string\">'#97ff85'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>FontAwesomeIcon icon<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token string\">'fa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'clock'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>この記事は<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>words<span class=\"token punctuation\">}</span>文字<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>b<span class=\"token operator\">></span>で<span class=\"token operator\">&lt;</span>b<span class=\"token operator\">></span>約<span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>minutes <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span>分<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>b<span class=\"token operator\">></span>で読めます<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><img src=\"https://i.imgur.com/rYZdFYX.png\" alt=\"img\"></p>\n<p>こんな感じで無事実装できました。(CSSは別で当ててます)</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>そもそも読み終わるまで〇〇分の歴史から追いかけると面白いですね。無事できてよかったです。</p>\n<p>該当ページはすでに消えていたので魚拓<a href=\"http://web.archive.org/web/20120414184643/http://briancray.com/2010/04/09/estimated-reading-time-web-design/\" target=\"_blank\" rel=\"noopener noreferrer\">archive.org</a>で読んだ.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\"><a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li>\n</ol>\n</div>","fields":{"slug":"2019/12/20/readingtime"},"frontmatter":{"tags":["JavaScript","Gatsby.js","Estimated Reading Time","あと何分"],"templateKey":"blog-post","slug":"2019/12/20/readingtime","id":null,"title":"Gatsby.jsで作ったブログに読み終わるまで○○分を追加した話","url":"2019/12/20/readingtime","date":"2019-12-20T12:48:26.231Z","description":"Gatsby.jsを使って作ったブログに読み終わるまでの時間を表示させました。ついでにEstimated Reading Timeの歴史も深ぼっていきます。","headerImage":"https://i.imgur.com/rYZdFYX.png","year":"2019","month":"12"}}},{"node":{"id":"dda1215a-12a7-5cd1-9029-86c02f6e6bc0","html":"<p>システムのリリース実績を取る必要がでてきたものの、管理表にはしてなかったので<strong>GitHub API v4</strong>から取得し、まとめましたというお話.</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E8%83%8C%E6%99%AF\">背景</a></p>\n</li>\n<li>\n<p><a href=\"#github-api-v4%E3%82%92%E4%BD%BF%E3%81%86\">GitHub API v4を使う</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%AA%E3%81%9Cgraphql%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84%E3%81%A8%E4%BC%9A%E7%A4%BE%E3%81%A7%E3%83%90%E3%82%AB%E3%81%AB%E3%81%95%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B\">なぜGraphQLを使わないと会社でバカにされるのか</a></p>\n<ul>\n<li><a href=\"#%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%94%E3%81%A8%E3%81%ABapi%E3%82%92%E3%82%B3%E3%83%BC%E3%83%AB%E3%81%97%E3%81%AA%E3%81%8F%E3%81%A6%E3%81%84%E3%81%84\">リソースごとにAPIをコールしなくていい</a></li>\n<li><a href=\"#bff%E3%81%A8%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E3%81%AE%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E3%82%89%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%88%E3%81%84\">BFFとして使うことでたくさんのエンドポイントを作らなくてよい</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#python%E3%81%A7%E3%81%AFrequests%E3%81%8C%E4%BE%BF%E5%88%A9%E3%81%A0%E3%82%88%E3%81%AD%E3%81%A3%E3%81%A6%E3%81%84%E3%81%86%E8%A9%B1\">PythonではRequestsが便利だよねっていう話</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E5%AE%9F%E7%B8%BE%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E9%A0%85%E7%9B%AE%E3%81%AF\">リリース実績に必要な項目は？</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"背景\" style=\"position:relative;\"><a href=\"#%E8%83%8C%E6%99%AF\" aria-label=\"背景 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>背景</h2>\n<p>どうしてこんなことしなきゃいけなくなったかというとちょっとした頼まれごときっかけです。</p>\n<p>ふつうシステムをリリースするとリリース管理というリリース日やリリースの内容などをまとめておく管理表があって然るべきなんですが、それがまとまっていなくて困った！なんとかしてというものでした。</p>\n<p>困りましたね…。</p>\n<p>ただ、我々のソースはGitHubで管理していて、かならず**<a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" target=\"_blank\" rel=\"noopener noreferrer\">Git-flow</a>**というブランチ戦略を取っているのでPRやコミットの履歴を集めればええやんけ！となったわけです。</p>\n<p><img src=\"https://i.imgur.com/qj5McGT.png\" alt=\"Git-flow\"></p>\n<p>上記の通りProduction環境へのリリースはmasterブランチから行います。</p>\n<h2 id=\"github-api-v4を使う\" style=\"position:relative;\"><a href=\"#github-api-v4%E3%82%92%E4%BD%BF%E3%81%86\" aria-label=\"github api v4を使う permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub API v4を使う</h2>\n<p>このブログだと2回目の取り上げになりますが、GitHubのAPIには2種類あります。</p>\n<p><a href=\"https://developer.github.com/v3/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub API v3 (RestAPI)</a>と<a href=\"https://developer.github.com/v4/\" target=\"_blank\" rel=\"noopener noreferrer\">v4(GraphQL)</a>です。</p>\n<p>もちろん使い慣れたRestAPIを使ってもいいのですが、GraphQLくらい使えないと会社でバカにされそうなので<strong>GraphQL</strong>を使うことにします。</p>\n<h2 id=\"なぜgraphqlを使わないと会社でバカにされるのか\" style=\"position:relative;\"><a href=\"#%E3%81%AA%E3%81%9Cgraphql%E3%82%92%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84%E3%81%A8%E4%BC%9A%E7%A4%BE%E3%81%A7%E3%83%90%E3%82%AB%E3%81%AB%E3%81%95%E3%82%8C%E3%82%8B%E3%81%AE%E3%81%8B\" aria-label=\"なぜgraphqlを使わないと会社でバカにされるのか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>なぜGraphQLを使わないと会社でバカにされるのか</h2>\n<p>ちょっと閑話休題。</p>\n<p>最近流行ってますね。GraphQL。</p>\n<p>こういった新しい技術は会社の若い人たちがどんどん使っていくので追いつくのに必死です。</p>\n<p>APIサービスを提供する人も使う人両者からみてRESTよりはいいところがあるから流行るわけですがどういった点でしょうか？</p>\n<h3 id=\"リソースごとにapiをコールしなくていい\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%94%E3%81%A8%E3%81%ABapi%E3%82%92%E3%82%B3%E3%83%BC%E3%83%AB%E3%81%97%E3%81%AA%E3%81%8F%E3%81%A6%E3%81%84%E3%81%84\" aria-label=\"リソースごとにapiをコールしなくていい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リソースごとにAPIをコールしなくていい</h3>\n<p>利用側からするとこれが一番大きいのではないでしょうか？</p>\n<p>ちょっと複雑なAPIになるとアルアルなのが、</p>\n<p><strong>記事情報API</strong>から<strong>コメントID</strong>を取得して、<strong>コメントID</strong>を使って<strong>コメントAPI</strong>を叩いて、結果から<strong>ユーザーID</strong>をとって<strong>ユーザーID</strong>を使って<strong>ユーザーAPI</strong>から……</p>\n<p>どんだけリクエストするんや…と。</p>\n<p>GraphQLなら自分が必要な項目を必要なだけ取得できます。</p>\n<h3 id=\"bffとして使うことでたくさんのエンドポイントを作らなくてよい\" style=\"position:relative;\"><a href=\"#bff%E3%81%A8%E3%81%97%E3%81%A6%E4%BD%BF%E3%81%86%E3%81%93%E3%81%A8%E3%81%A7%E3%81%9F%E3%81%8F%E3%81%95%E3%82%93%E3%81%AE%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%82%92%E4%BD%9C%E3%82%89%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%88%E3%81%84\" aria-label=\"bffとして使うことでたくさんのエンドポイントを作らなくてよい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFFとして使うことでたくさんのエンドポイントを作らなくてよい</h3>\n<p><a href=\"https://samnewman.io/patterns/architectural/bff/\" target=\"_blank\" rel=\"noopener noreferrer\">Backends For Frontends</a>な世界では、フロントエンドが使いやすい形式でさまざまな業務ロジックをGatewayしてあげることが求められます。</p>\n<p>GraphQLはまさに呼び手、つまりフロントエンドがデータの形式を決められるためにBFFとの親和性が高いと思います。</p>\n<h2 id=\"pythonではrequestsが便利だよねっていう話\" style=\"position:relative;\"><a href=\"#python%E3%81%A7%E3%81%AFrequests%E3%81%8C%E4%BE%BF%E5%88%A9%E3%81%A0%E3%82%88%E3%81%AD%E3%81%A3%E3%81%A6%E3%81%84%E3%81%86%E8%A9%B1\" aria-label=\"pythonではrequestsが便利だよねっていう話 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PythonではRequestsが便利だよねっていう話</h2>\n<p>タイトルの通り面倒なことはPythonに任せようなのでPythonで実装していくわけですが、Pythonには<strong>Requests</strong>という超便利ライブラリがあるのでこちらを使ってGraphQLコール部を作っていきます。</p>\n<p>次のような形で作るとGraphQLのリクエストができ、PythonのDictで結果を受け取ることができます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bearer \"</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">}</span>\n <span class=\"token comment\"># tokenはbearer</span>\n    res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>query<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># res.json()でJSONをPytnon Dict形式に</span></code></pre></div>\n<p>それでは早速、作っていきましょう。</p>\n<h2 id=\"リリース実績に必要な項目は\" style=\"position:relative;\"><a href=\"#%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E5%AE%9F%E7%B8%BE%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E9%A0%85%E7%9B%AE%E3%81%AF\" aria-label=\"リリース実績に必要な項目は permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>リリース実績に必要な項目は？</h2>\n<p>今回のリリース実績取得に当たって下記のものがリリース実績としてカウントするものとします。</p>\n<ul>\n<li>masterブランチへのPRで\n<ul>\n<li>マージされてるものが対象</li>\n<li>マージされずにCloseしているものは対象外</li>\n<li>マージ日がリリース日とする</li>\n<li>どんな変更が当たっているか後追いしたいのでPRに含まれるCommitのメッセージも添付する</li>\n<li>結果は標準出力とCSVで出す</li>\n</ul>\n</li>\n</ul>\n<p>さて、こちらを実現したソースがこちら。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"python\"><pre style=\"counter-reset: linenumber 0\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> csv\n<span class=\"token keyword\">import</span> pytz\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> os</span><span class=\"gatsby-highlight-code-line\"> </span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">from</span> os<span class=\"token punctuation\">.</span>path <span class=\"token keyword\">import</span> join<span class=\"token punctuation\">,</span> dirname</span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">from</span> dotenv <span class=\"token keyword\">import</span> load_dotenv</span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">dotenv_path <span class=\"token operator\">=</span> join<span class=\"token punctuation\">(</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"../.env\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">load_dotenv<span class=\"token punctuation\">(</span>dotenv_path<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\"># dotenv経由で環境変数取得</span></span><span class=\"gatsby-highlight-code-line\"></span>TOKEN <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span>\nENDPOINT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"ENDPOINT\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># token</span>\ntoken <span class=\"token operator\">=</span> TOKEN\n\n<span class=\"token comment\"># endpoint</span>\nendpoint <span class=\"token operator\">=</span> ENDPOINT\n\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token comment\"># If you want to search repo's in organization `org:hoge` instead of user:hoge</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">get_master_pr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token string\">\"query\"</span><span class=\"token punctuation\">:</span> <span class=\"token triple-quoted-string string\">\"\"\"</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">  query {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">  search(query: \"user:tubone24\", type: REPOSITORY, first: 100) {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">      pageInfo {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">      endCursor</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">      startCursor</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">    }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">    edges {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">      node {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">        ... on Repository {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">          name</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">          url</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">          pullRequests (first: 100){</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">            edges {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">            node {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              baseRefName</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              createdAt</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              closedAt</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              merged</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              mergedAt</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              mergedBy {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">                login</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              commits (first: 45){</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">                nodes {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">                  commit {</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">                    message</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">                  }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">                }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              title</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              url</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              headRefName</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">              }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">            }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">            }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">          }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">        }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">    }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">  }</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token triple-quoted-string string\">  }</span></span><span class=\"token triple-quoted-string string\">  \"\"\"</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"bearer \"</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">}</span>\n    res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>endpoint<span class=\"token punctuation\">,</span> json<span class=\"token operator\">=</span>query<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">.</span>status_code <span class=\"token operator\">!=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"failed : {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">def</span> <span class=\"token function\">iso_to_jst</span><span class=\"token punctuation\">(</span>iso_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\"># ISO8601(RFC3339)形式をJST %Y/%m/%d %H:%M:%Sに変換</span></span><span class=\"gatsby-highlight-code-line\">    dt <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>iso_str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%dT%H:%M:%SZ\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        dt <span class=\"token operator\">=</span> pytz<span class=\"token punctuation\">.</span>utc<span class=\"token punctuation\">.</span>localize<span class=\"token punctuation\">(</span>dt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astimezone<span class=\"token punctuation\">(</span>pytz<span class=\"token punctuation\">.</span>timezone<span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Tokyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">            dt <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>strptime<span class=\"token punctuation\">(</span>iso_str<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%Y-%m-%dT%H:%M:%Sz\"</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">            dt <span class=\"token operator\">=</span> dt<span class=\"token punctuation\">.</span>astimezone<span class=\"token punctuation\">(</span>pytz<span class=\"token punctuation\">.</span>timezone<span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Tokyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span></span><span class=\"gatsby-highlight-code-line\">            <span class=\"token keyword\">pass</span></span>    <span class=\"token keyword\">if</span> dt <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">return</span> dt<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%Y/%m/%d %H:%M:%S\"</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\"></span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_csv_header</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"master_pr.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf_8_sig\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n <span class=\"token comment\"># BOM付UTF-8</span>\n        writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"Repository\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Repository URL\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"PR#\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"PR Title\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Target Branch\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Merged By\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Merged at\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Created at\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"PR URL\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"Commit Msgs\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    create_csv_header<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> post<span class=\"token punctuation\">(</span>get_master_pr<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"search\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"edges\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        repo_name <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span>\n        repo_url <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span>\n        pr_count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> pr <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"pullRequests\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"edges\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            base_ref_name <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"baseRefName\"</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> base_ref_name <span class=\"token operator\">!=</span> <span class=\"token string\">\"master\"</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            head_ref_name <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"headRefName\"</span><span class=\"token punctuation\">]</span>\n            created_at <span class=\"token operator\">=</span> iso_to_jst<span class=\"token punctuation\">(</span>pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"createdAt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"merged\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                pr_count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                merged_at <span class=\"token operator\">=</span> iso_to_jst<span class=\"token punctuation\">(</span>pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"mergedAt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                merged_by <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"mergedBy\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"login\"</span><span class=\"token punctuation\">]</span>\n                pr_title <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span>\n                pr_url <span class=\"token operator\">=</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span>\n                commit_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n                    x<span class=\"token punctuation\">[</span><span class=\"token string\">\"commit\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> pr<span class=\"token punctuation\">[</span><span class=\"token string\">\"node\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"commits\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"nodes\"</span><span class=\"token punctuation\">]</span>\n                <span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> pr_count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token string\">\"{repo_name}:  {repo_url}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n                            repo_name<span class=\"token operator\">=</span>repo_name<span class=\"token punctuation\">,</span> repo_url<span class=\"token operator\">=</span>repo_url\n                        <span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"  #{pr_count} {pr_title} for {head_ref_name} by {merged_by} at {merged_at}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>\n                        pr_count<span class=\"token operator\">=</span>pr_count<span class=\"token punctuation\">,</span>\n                        pr_title<span class=\"token operator\">=</span>pr_title<span class=\"token punctuation\">,</span>\n                        head_ref_name<span class=\"token operator\">=</span>head_ref_name<span class=\"token punctuation\">,</span>\n                        merged_by<span class=\"token operator\">=</span>merged_by<span class=\"token punctuation\">,</span>\n                        merged_at<span class=\"token operator\">=</span>merged_at<span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"        {pr_url}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>pr_url<span class=\"token operator\">=</span>pr_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"master_pr.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf_8_sig\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n                    writer <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>writer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n                    writer<span class=\"token punctuation\">.</span>writerow<span class=\"token punctuation\">(</span>\n                        <span class=\"token punctuation\">[</span>\n                            repo_name<span class=\"token punctuation\">,</span>\n                            repo_url<span class=\"token punctuation\">,</span>\n                            pr_count<span class=\"token punctuation\">,</span>\n                            pr_title<span class=\"token punctuation\">,</span>\n                            head_ref_name<span class=\"token punctuation\">,</span>\n                            merged_by<span class=\"token punctuation\">,</span>\n                            merged_at<span class=\"token punctuation\">,</span>\n                            created_at<span class=\"token punctuation\">,</span>\n                            pr_url<span class=\"token punctuation\">,</span>\n                            <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>commit_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token punctuation\">]</span>\n                    <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>TOKENとENDPOINTは.envファイルから取得するようにしてます。</p>\n<p>また、GitHubのAPIから帰ってくる時刻は**ISO8601(RFC3339)**形式なのでJSTに変換してます。</p>\n<p>細かいですが、<strong>CSVはUTF-8</strong>で作成するところ、Excelで開けるように<strong>BOM付UTF-8</strong>にしてます。</p>\n<p>print文が残念なかんじですね。今回は急ぎ作ってしまいましたが、今後ちょっとリファクタします。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>急ぎの依頼でしたが楽しくプログラミングできました。</p>\n<p>Terminalでこんな感じで出ます。</p>\n<p><img src=\"https://i.imgur.com/kOEaC3q.png\" alt=\"terminal\"></p>\n<p>集計用のCSVもばっちりです。</p>\n<p><img src=\"https://i.imgur.com/CyagH52.png\" alt=\"csv\"></p>\n<p>今回はレポジトリが100件未満だったので特にベージネーションをしてませんが次はベージネーションも実装しようかと思います。</p>","fields":{"slug":"2019/12/16/python-auto"},"frontmatter":{"tags":["Python","GitHub","GraphQL","GitHub API v4","リリース実績"],"templateKey":"blog-post","slug":"2019/12/16/python-auto","id":null,"title":"面倒なことはPythonにやらせよう@GitHub API v4を使ったリリース実績取得","url":"2019/12/16/python-auto","date":"2019-12-15T23:30:57.397Z","description":"頼まれついでにPythonスクリプトを作ってGitHubでリリース実績を取ってみることにした話","headerImage":"https://i.imgur.com/kOEaC3q.png","year":"2019","month":"12"}}},{"node":{"id":"c6c55737-7df0-5dca-bdab-bcdd94b2abdc","html":"<p>初めてプログラミングの授業を受けた後に書いたしょーもないプログラムを振り返ります。</p>\n<p>当時の思い出とともに見ていきましょう。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E6%9C%80%E8%BF%91%E8%A9%B1%E9%A1%8C%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%BE%E3%81%99%E3%81%AD\">最近話題になってますね</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BB%96%E5%AD%A6%E9%83%A8%E8%81%B4%E8%AC%9B%E3%81%A7c%E6%BC%94%E7%BF%92%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B\">他学部聴講でC演習を受ける</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AD%A6%E7%B1%8D%E7%95%AA%E5%8F%B7%E3%81%AB%E5%A6%99%E3%81%AB%E5%9F%B7%E7%9D%80%E3%81%99%E3%82%8B\">学籍番号に妙に執着する</a></p>\n<ul>\n<li><a href=\"#%E6%B3%95%E5%89%87\">法則</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AF%E3%81%93%E3%82%8C%E3%82%92javascript%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%88\">初めてのプログラミングはこれをJavaScriptで書いたよ</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"最近話題になってますね\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E8%BF%91%E8%A9%B1%E9%A1%8C%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%BE%E3%81%99%E3%81%AD\" aria-label=\"最近話題になってますね permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最近話題になってますね</h2>\n<p><strong>未経験</strong>からのソフトウェアエンジニアになろう系。</p>\n<p>まぁ、結論から言えば程度の差こそあれ、<strong>誰だってやってけます</strong>。</p>\n<p>こんなしょぼしょぼ人間ができるような仕事です。（できているのかはさておき、お金はいただいているので）そんなもんです。</p>\n<p>ただ、実際の就職はバイアスがかかったりしてチャンスに恵まれないことも多々あるかと思います。自分も大学の専攻がまったくコンピューターサイエンスを掠ってもいなかったのでつらいこともありました。</p>\n<p>これはそんな私がとりあえず何かプログラミングを初めて、そのポートフォリオを全く活かさないで就活した軌跡が詰まったのが今回ご紹介するプログラムだったりします。</p>\n<h2 id=\"他学部聴講でc演習を受ける\" style=\"position:relative;\"><a href=\"#%E4%BB%96%E5%AD%A6%E9%83%A8%E8%81%B4%E8%AC%9B%E3%81%A7c%E6%BC%94%E7%BF%92%E3%82%92%E5%8F%97%E3%81%91%E3%82%8B\" aria-label=\"他学部聴講でc演習を受ける permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>他学部聴講でC演習を受ける</h2>\n<p>思えばこれが最初です。自分みたいなクソ陰キャが営業職なんてできない、ましてや金融ソルジャーもできないなぁと思い、一発逆転を狙って飛び込んだのがこの世界でした。</p>\n<p>Cの先生は優しかったです。コンピューターサイエンスを何一つしらない私にも色々わかりやすく教えてくれました。</p>\n<p>その先生が言ったことが私の人生を変えました。</p>\n<blockquote>\n<p>授業にまじめに来てくれててこんなこと言うのも心苦しいんだが今時、**Cなんかできてもねぇ。。隣でやってるRuby演習でも受けなよ～</p>\n</blockquote>\n<p><strong>衝撃でした。</strong></p>\n<p>その後、<strong>「プログラミング　求人」<strong>のキーワードでググったら確かに</strong>Ruby</strong>が出てくるではありませんか。</p>\n<p>ただ、悲しいかな。Rubyの授業は別の授業とかぶってたため、諦めました。</p>\n<p>代わりに自分でRubyをお勉強しようかと思ったのですが、<strong>JavaScript</strong>のほうが手軽でいいよーと<strong>理系のお友達</strong>に言われたのでJavaScriptをお勉強することに。</p>\n<p>権威に弱いのです。</p>\n<h2 id=\"学籍番号に妙に執着する\" style=\"position:relative;\"><a href=\"#%E5%AD%A6%E7%B1%8D%E7%95%AA%E5%8F%B7%E3%81%AB%E5%A6%99%E3%81%AB%E5%9F%B7%E7%9D%80%E3%81%99%E3%82%8B\" aria-label=\"学籍番号に妙に執着する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>学籍番号に妙に執着する</h2>\n<p>今考えれば謎なんですが、大学の学籍番号の**CD(Check Digit)**の法則を知りたくなってた時期がありました。</p>\n<p>お友達の代わりに授業に出てあげてたとき(代行というあれです。)に、出席カードが配られてそこに学籍番号は覚えていたのですがCDが思い出せず、てきとーに書いた、という苦い記憶がありました。</p>\n<p><del>そんなことしなくていいから</del></p>\n<p>CDという値がエラー検知、エラー訂正に使う値という知識くらいはありましたので、この法則が知りたくなったわけです。</p>\n<p>お友達からあらかじめ学籍番号を教えてもらっていたため、バイトの合間、頭で色々考えてとある法則を見つけるにいたりました。</p>\n<h3 id=\"法則\" style=\"position:relative;\"><a href=\"#%E6%B3%95%E5%89%87\" aria-label=\"法則 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>法則</h3>\n<p>学籍番号はこんな感じです。（当時は）</p>\n<p><strong>1A11B002</strong> (架空の番号です)</p>\n<p>1Aは学部, 11は入学年度(2011年), Bはわからん, 016は学科の名簿順っぽいです。</p>\n<p>まずはA～Fまでの文字を数字に置換します。</p>\n<table>\n<thead>\n<tr>\n<th>文字</th>\n<th>置換後数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td>1</td>\n</tr>\n<tr>\n<td>B</td>\n<td>2</td>\n</tr>\n<tr>\n<td>C</td>\n<td>3</td>\n</tr>\n<tr>\n<td>D</td>\n<td>4</td>\n</tr>\n<tr>\n<td>E</td>\n<td>5</td>\n</tr>\n<tr>\n<td>F</td>\n<td>6</td>\n</tr>\n</tbody>\n</table>\n<p>まんまですね。</p>\n<p>こんな感じになります。</p>\n<p><strong>11112002</strong></p>\n<p>その次に、</p>\n<p>最左の1桁、左から3桁目を除いた6桁の各桁に桁数をかけて足しこんでいきます。</p>\n<p>(学部の数的に1A～1Fで学部を表現できる＆大学に10年以上いないだろうということでCD上不要な桁を取っているわけです。多分。)</p>\n<p>つまり最左桁を抜いたので、2桁目から足し算しますが、こちら2桁目として掛け算します。</p>\n<p>1×2 + 1×3 + 2×4 + 0×5 + 0×6 + 2×7 = <strong>27</strong></p>\n<p>CD値は1桁なので11で割ったあまりを出します。よくやるテクニックですね。</p>\n<p>27 ÷ 11 = 2あまり <strong>5</strong></p>\n<p>よっしゃ！5や！と思ったら残念。これの11の補数みたいなものを取ります。</p>\n<p>11 - 5 = <strong>6</strong></p>\n<p>そうです。 6がCDとなります。</p>\n<p>こんなのどうやってわかるんだよーって思うのですが、当然自力で解ききれませんでした。</p>\n<p>理系のお友達に手伝ってもらったのをよく覚えてます。</p>\n<h2 id=\"初めてのプログラミングはこれをjavascriptで書いたよ\" style=\"position:relative;\"><a href=\"#%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%AF%E3%81%93%E3%82%8C%E3%82%92javascript%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%88\" aria-label=\"初めてのプログラミングはこれをjavascriptで書いたよ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>初めてのプログラミングはこれをJavaScriptで書いたよ</h2>\n<p>ゴミですが、この法則を世に広めたくて当時こんなものを作ってました。<strong>21歳！JavaScriptで！👊</strong></p>\n<p>今考えたらゴミくそなんですが、未経験で書いたんです!!<del>許してください!!なんでもしますから!!</del></p>\n<p><a href=\"https://github.com/tubone24/waseda_cd_calc\" target=\"_blank\" rel=\"noopener noreferrer\">waseda_cd_calc\n</a></p>\n<p><img src=\"https://i.imgur.com/441v5cJ.png\" alt=\"img\"></p>\n<p>あまりにゴミだったのでコメントで赤ペンしてます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>早稲田<span class=\"token constant\">CD</span>計算機<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">calcCd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input_check_digit</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> input_cd <span class=\"token operator\">=</span> input_check_digit<span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//キャメルケースとスネークケースが混在。ムカつく</span>\n    <span class=\"token keyword\">var</span> split_cd <span class=\"token operator\">=</span> input_cd<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//桁をsplitで分割したのはよくできました</span>\n    <span class=\"token keyword\">var</span> answer<span class=\"token punctuation\">;</span>\n    answer <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>split_cd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>split_cd<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token operator\">+</span>split_cd<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">4</span><span class=\"token operator\">+</span>split_cd<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token operator\">+</span>split_cd<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">6</span><span class=\"token operator\">+</span>split_cd<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">11</span>\n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">replaceSn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//関数名が意味不明(Snってシリアルナンバー？)</span>\n    <span class=\"token keyword\">var</span> input_check_digit <span class=\"token operator\">=</span> inputN\n    after_cd <span class=\"token operator\">=</span> input_check_digit<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//頭悪い実装・・。まぁ愚直ですね</span>\n    after_cd <span class=\"token operator\">=</span> after_cd<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    after_cd <span class=\"token operator\">=</span> after_cd<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    after_cd <span class=\"token operator\">=</span> after_cd<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    after_cd <span class=\"token operator\">=</span> after_cd<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    after_cd <span class=\"token operator\">=</span> after_cd<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> after_cd<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">goAnswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> input_check_digit <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input_check_digit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[A-Z0-9]{8}$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//未経験にしては優秀。ちゃんとバリデートしている。が、中途半端。</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>input_check_digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学籍番号入れてね\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input_check_digit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"answer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">calcCd</span><span class=\"token punctuation\">(</span><span class=\"token function\">replaceSn</span><span class=\"token punctuation\">(</span>input_check_digit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n  学籍番号を入力してね 例<span class=\"token operator\">:</span>1A11A001<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"input_check_digit\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"calc_cd\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"計算！\"</span> onClick<span class=\"token operator\">=</span><span class=\"token string\">\"goAnswer()\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n  答え<span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>input id<span class=\"token operator\">=</span><span class=\"token string\">\"answer\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre></div>\n<p>あまりにもしょぼいのでこの記事を書くにあたってGitHub Pagesにしちゃいました。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>結局このプログラミングは何も役に立たなかったのですが、この業界に進もうという覚悟の現れがあふれた瞬間でした。</p>\n<p>図書館でMac片手に色々調べながら動くものができた快感を今でも覚えてます。</p>\n<p>その後はプログラミングよりはLinuxとかネットワークに興味を持っていくことになるので、就活も全くプログラマー的な感じでは進まなかったです。結局。</p>\n<p>今こうして、プログラミングもする仕事をしているのですが、昔書いたソースを見てとりあえず何かを作ることの大切さをあらためて思い出しました。</p>","fields":{"slug":"2019/12/15/beginner-gomi"},"frontmatter":{"tags":["ぼやき","JavaScript","早稲田"],"templateKey":"blog-post","slug":"2019/12/15/beginner-gomi","id":null,"title":"初めてプログラミングをした時のゴミソース見つけた","url":"2019/12/15/beginner-gomi","date":"2019-12-14T16:14:53.576Z","description":"大学時代、初めてプログラミングしたときのゴミソースを発見","headerImage":"https://i.imgur.com/441v5cJ.png","year":"2019","month":"12"}}},{"node":{"id":"4937f64d-6e33-5d90-88c0-15e9954e695c","html":"<p>会社のデスクにかわいいやつらが増えてきました、というお話.</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E3%81%8B%E3%82%8F%E3%81%84%E3%81%84\">かわいい</a></li>\n<li><a href=\"#%E6%81%90%E7%AB%9C%E6%99%82%E4%BB%A3\">恐竜時代</a></li>\n<li><a href=\"#%E3%81%93%E3%81%A8%E3%82%8A%E9%9A%8A\">ことり隊</a></li>\n<li><a href=\"#python%E3%81%AE%E3%81%82%E3%82%8C\">Pythonのあれ</a></li>\n</ul>\n</div>\n<h2 id=\"かわいい\" style=\"position:relative;\"><a href=\"#%E3%81%8B%E3%82%8F%E3%81%84%E3%81%84\" aria-label=\"かわいい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>かわいい</h2>\n<p>机にかわいいやつらが増えてきました。</p>\n<p><img src=\"https://i.imgur.com/2U4CzKK.jpg\" alt=\"img\"></p>\n<h2 id=\"恐竜時代\" style=\"position:relative;\"><a href=\"#%E6%81%90%E7%AB%9C%E6%99%82%E4%BB%A3\" aria-label=\"恐竜時代 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>恐竜時代</h2>\n<p>恐竜時代というUFOキャッチャーの景品です。</p>\n<p><a href=\"https://www.amunet.co.jp/media/2019/12/02/500\" target=\"_blank\" rel=\"noopener noreferrer\">ハラハラ恐竜時代</a></p>\n<h2 id=\"ことり隊\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%81%A8%E3%82%8A%E9%9A%8A\" aria-label=\"ことり隊 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ことり隊</h2>\n<p>ことり隊というUFOキャッチャーの景品です。</p>\n<p><a href=\"https://www.amunet.co.jp/character/kotoritai.html\" target=\"_blank\" rel=\"noopener noreferrer\">ことり隊\n</a></p>\n<h2 id=\"pythonのあれ\" style=\"position:relative;\"><a href=\"#python%E3%81%AE%E3%81%82%E3%82%8C\" aria-label=\"pythonのあれ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pythonのあれ</h2>\n<p>後ろにいるやつはPythonのロゴの蛇です。</p>\n<p><img src=\"https://i.imgur.com/l1fqoms.png\" alt=\"img\"></p>","fields":{"slug":"2019/12/14/kawaii"},"frontmatter":{"tags":["かわいい","ぼやき","恐竜時代","ことり隊"],"templateKey":"blog-post","slug":"2019/12/14/kawaii","id":null,"title":"デスクのかわいいやつら","url":"2019/12/14/kawaii","date":"2019-12-14T14:44:47.971Z","description":"デスクにかわいいやつらが増えてきた、というお話","headerImage":"https://i.imgur.com/2U4CzKK.jpg","year":"2019","month":"12"}}},{"node":{"id":"4c8574de-0663-5717-9ec4-664f8c710907","html":"<p>新しめの言語をお勉強しないと会社でゴミ扱いされそうなので、<strong>Julia</strong>を使って簡単な何かを作ってみます。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#julia%E3%81%A8%E3%81%AF\">Juliaとは</a></p>\n<ul>\n<li><a href=\"#%E7%A7%81%E5%8B%95%E7%9A%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AA%E3%81%AE%E3%82%88\">私動的プログラミング言語なのよ</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%86%86%E5%91%A8%E7%8E%87%E3%82%92%E8%A8%88%E7%AE%97%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">円周率を計算してみる</a></p>\n<ul>\n<li><a href=\"#%E3%83%A9%E3%82%A4%E3%83%97%E3%83%8B%E3%83%83%E3%83%84%E3%81%AE%E5%85%AC%E5%BC%8F\">ライプニッツの公式</a></li>\n<li><a href=\"#%E3%82%AC%E3%82%A6%E3%82%B9%E3%83%AB%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%89%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\">ガウス＝ルジャンドルのアルゴリズム</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"juliaとは\" style=\"position:relative;\"><a href=\"#julia%E3%81%A8%E3%81%AF\" aria-label=\"juliaとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Juliaとは</h2>\n<p><img src=\"https://i.imgur.com/UQoGvbD.png\" alt=\"img\"></p>\n<p>Juliaとは、<del>セクシー女優です。</del></p>\n<p>違います。<strong>科学技術計算分野でのプログラミング言語</strong>の座をPython, R, MATLABから奪い取ろうとしてる言語です。</p>\n<p>色々な会話でちやほやされている言語ですが、お前何がすごいねんを少し掘り下げます。</p>\n<h3 id=\"私動的プログラミング言語なのよ\" style=\"position:relative;\"><a href=\"#%E7%A7%81%E5%8B%95%E7%9A%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%AA%E3%81%AE%E3%82%88\" aria-label=\"私動的プログラミング言語なのよ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>私動的プログラミング言語なのよ</h3>\n<p>Juliaは<strong>動的プログラミング言語</strong>です。コンパイルは実行時に処理されるということです。</p>\n<p>なんや、Pythonと同じやんけと思ってましたがところがどっこい。</p>\n<p><a href=\"https://julialang.org/\" target=\"_blank\" rel=\"noopener noreferrer\">julialang.org</a>に次のように書かれていました。</p>\n<blockquote>\n<p>Julia is fast!</p>\n<p>Julia was designed from the beginning for high performance. Julia programs compile to efficient native code for multiple platforms via LLVM.</p>\n</blockquote>\n<p>なんでそんなに早いのかというと**実行時コンパイル(JIT)**だからです。</p>\n<p>科学技術計算に多いループ処理を効率よく実行するわけですね。</p>\n<p>いやいや、じゃあPythonの**<a href=\"https://pypy.org/\" target=\"_blank\" rel=\"noopener noreferrer\">PyPy</a>**使えばええんやい？って声が聞こえてくるかもしれませんが、ポイントはJITの方式です。</p>\n<p><img src=\"https://i.imgur.com/FKNN9z2.png\" alt=\"pypy\"></p>\n<p><a href=\"https://pypy.org/\" target=\"_blank\" rel=\"noopener noreferrer\">PyPy</a>はJavaでいうところの<strong>Hotspot</strong>みたいな方式(<a href=\"https://en.wikipedia.org/wiki/Tracing_just-in-time_compilation\" target=\"_blank\" rel=\"noopener noreferrer\">TracingJIT</a>というらしいです)でJITを行っているらしく、起動時プロファイルを取りながらHotSpotに対してコンパイルや最適化を実施していくようです。</p>\n<p>その点Juliaは**<a href=\"https://llvm.org/\" target=\"_blank\" rel=\"noopener noreferrer\">LLVM</a><strong>という技術を使って</strong>型推論と最適化**を行ったのち実行されます。</p>\n<p><img src=\"https://i.imgur.com/OzFlEBB.png\" alt=\"llvm\"></p>\n<p>型が同定できることで強力な最適化がなされるので早いらしいです。</p>\n<p>どうでもいいですがLLVMのロゴのドラゴンかっこいいですね。遊戯王カードに出てきそうですね。</p>\n<p><img src=\"https://i.imgur.com/P1kfH3c.png\" alt=\"img\"></p>\n<p><del>遊戯王カード</del></p>\n<p><img src=\"https://i.imgur.com/bnDbMA0.jpg\" alt=\"img\"></p>\n<p>Pythonの**<a href=\"http://numba.pydata.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Namba</a>**もLLVMでJITしてます。なのでもちろん型の指定もできるのでこの手の最適化は強いはず。（早いとは聞いたことがありますが試したことはないです。）</p>\n<p><img src=\"https://i.imgur.com/JdmowXn.jpg\" alt=\"nmb\"></p>\n<p>言語としてネイティブにLLVM対応しているのがJuliaのすごいところだと思います。</p>\n<h2 id=\"円周率を計算してみる\" style=\"position:relative;\"><a href=\"#%E5%86%86%E5%91%A8%E7%8E%87%E3%82%92%E8%A8%88%E7%AE%97%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"円周率を計算してみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>円周率を計算してみる</h2>\n<p>別にベンチマークをとってやろうとかそう言うわけではないのですが、取り急ぎ練習として円周率を計算してみたいと思います。</p>\n<p>この手の計算には有名どころがいくつかあります。</p>\n<h3 id=\"ライプニッツの公式\" style=\"position:relative;\"><a href=\"#%E3%83%A9%E3%82%A4%E3%83%97%E3%83%8B%E3%83%83%E3%83%84%E3%81%AE%E5%85%AC%E5%BC%8F\" aria-label=\"ライプニッツの公式 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ライプニッツの公式</h3>\n<p>超有名どころですね。</p>\n<p><img src=\"https://camo.githubusercontent.com/84934f0d5e27c2df396d1a32d68e6bfcf03f19a5/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f312673706163653b2d2673706163653b2535436672616325374231253744253742332537442673706163653b2b2673706163653b2535436672616325374231253744253742352537442673706163653b2d2673706163653b2535436672616325374231253744253742372537442673706163653b2b2673706163653b2535436672616325374231253744253742392537442673706163653b2d2673706163653b25354363646f74732673706163653b3d2673706163653b25354366726163253742253543706925374425374234253744\" alt=\"img\"></p>\n<p>summation symbolで書くと</p>\n<p><img src=\"https://camo.githubusercontent.com/f9cf648caac28b13d3c03320e68fc44f826d6ed8/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f25354373756d5f2537426e3d302537442535452673706163653b253543696e6674792673706163653b25354366726163253742282d31292535456e253744253742326e2673706163653b2b2673706163653b312537442673706163653b3d2673706163653b25354366726163253742253543706925374425374234253744\" alt=\"inmg\"></p>\n<p>これをJuliaで書くと</p>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">function</span> leibniz<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">::</span>BigInt<span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    ret<span class=\"token punctuation\">::</span>BigFloat <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>n\n        ret <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span>i <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">4</span>ret\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>BigInt, BigFloatが使えるのでこの手の演算は気持ちいいですねー。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">julia<span class=\"token operator\">></span> leibniz<span class=\"token punctuation\">(</span>BigInt<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">3.141692643590543213460768320877940222544825752138710733999805489190209879980251</span></code></pre></div>\n<p>実際に演算してみると、10000ループでも全く精度出ていないことがわかります。</p>\n<p>3.14169......</p>\n<p>ライプニッツの公式は実際の円周率の計算に用いるには収束が非常に遅いために全く適していないので別の方法も試してみます。</p>\n<h3 id=\"ガウスルジャンドルのアルゴリズム\" style=\"position:relative;\"><a href=\"#%E3%82%AC%E3%82%A6%E3%82%B9%E3%83%AB%E3%82%B8%E3%83%A3%E3%83%B3%E3%83%89%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\" aria-label=\"ガウスルジャンドルのアルゴリズム permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ガウス＝ルジャンドルのアルゴリズム</h3>\n<p>というのがあるらしいです。</p>\n<p>スーパーコンピュータの検収時このアルゴリズムを使って、πの超高精度計算が用いられることが有名です。</p>\n<p>初期値</p>\n<p><img src=\"https://camo.githubusercontent.com/1993e5f261c59e39060c55c5051b6d566d2e0f47/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f615f302673706163653b3d2673706163653b31\" alt=\"igm\"></p>\n<p><img src=\"https://camo.githubusercontent.com/8d736f56ddd07118a1774f0995632f7ed92cb93d/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f625f302673706163653b3d2673706163653b25354366726163253742312537442537422535437371727425374232253744253744\" alt=\"img\"></p>\n<p><img src=\"https://camo.githubusercontent.com/dfb35fcea4cee700d28fe04ba0b482c9cc288c8b/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f745f302673706163653b3d2673706163653b253543667261632537423125374425374234253744\" alt=\"igm\"></p>\n<p><img src=\"https://camo.githubusercontent.com/65c098ff3f0f75c0430293533e17e16b504f3844/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f705f302673706163653b3d2673706163653b31\" alt=\"img\"></p>\n<p>を定義したうえでイテレーションごとに</p>\n<p><img src=\"https://camo.githubusercontent.com/cba3537d1ea8e1e2920bac6d2d986d8668c6dc94/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f615f2537426e2b312537442673706163653b3d2673706163653b25354366726163253742615f6e2673706163653b2b2673706163653b625f6e25374425374232253744\" alt=\"inm\"></p>\n<p><img src=\"https://camo.githubusercontent.com/6f8a76b7d734e0230d977c5bbf76cd3067a77f4b/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f625f2537426e2b312537442673706163653b3d2673706163653b25354373717274253742615f6e2673706163653b625f6e253744\" alt=\"img\"></p>\n<p><img src=\"https://camo.githubusercontent.com/2ef3a9f33e942ccd75582186758058ec13713027/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f745f2537426e2b312537442673706163653b3d2673706163653b745f6e2673706163653b2d2673706163653b705f6e28615f6e2673706163653b2d2673706163653b615f2537426e2b312537442925354532\" alt=\"img\"></p>\n<p><img src=\"https://camo.githubusercontent.com/b6bdb73be9756147bb52874cf609e376da7111ad/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f705f2537426e2b312537442673706163653b3d2673706163653b32705f6e\" alt=\"img\"></p>\n<p>という計算をすると</p>\n<p><img src=\"https://camo.githubusercontent.com/c1b93830bd82afea5f8c22c861fd9b8c135af3d6/68747470733a2f2f6c617465782e636f6465636f67732e636f6d2f706e672e6c617465783f25354370692673706163653b253543617070726f782673706163653b2535436672616325374228612673706163653b2b2673706163653b6229253545322537442537423474253744\" alt=\"img\"></p>\n<p>とπに近似するという感じです。</p>\n<p>これをJuliaで書くと</p>\n<div class=\"gatsby-highlight\" data-language=\"julia\"><pre class=\"language-julia\"><code class=\"language-julia\"><span class=\"token keyword\">function</span> gauss_legendre<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">::</span>BigInt<span class=\"token punctuation\">,</span> debug<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> a<span class=\"token punctuation\">::</span>BigFloat <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n    <span class=\"token keyword\">local</span> b<span class=\"token punctuation\">::</span>BigFloat <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">local</span> t<span class=\"token punctuation\">::</span>BigFloat <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span>\n    <span class=\"token keyword\">local</span> p<span class=\"token punctuation\">::</span>BigFloat <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span>\n    <span class=\"token keyword\">local</span> tmp<span class=\"token punctuation\">::</span>BigFloat <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>n\n        tmp <span class=\"token operator\">=</span> a\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n        b <span class=\"token operator\">=</span> sqrt<span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n        t <span class=\"token operator\">=</span> t <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> tmp<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        p <span class=\"token operator\">=</span> <span class=\"token number\">2</span>p\n    <span class=\"token keyword\">end</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span>t\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>おおー直感的ですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">julia<span class=\"token operator\">></span> gauss_legendre<span class=\"token punctuation\">(</span>BigInt<span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">3.14159265358979311120035621508437779160333415473350005136581079848894037301245</span></code></pre></div>\n<p>私が覚えている範囲3.1415926535..。</p>\n<p>まではあっていますね。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>Juliaをもっと書こうかと思いました。あと、ベンチマークは測ってみます。</p>","fields":{"slug":"2019/12/12/julia-beginner"},"frontmatter":{"tags":["Julia","円周率","初心者","The Gauss–Legendre algorithm","Leibniz formula for π"],"templateKey":"blog-post","slug":"2019/12/12/julia-beginner","id":null,"title":"【初学者】Juliaを使って円周率を求める","url":"2019/12/12/julia-beginner","date":"2019-12-11T15:13:29.739Z","description":"初めて触るJuliaのお勉強のためにJuliaを使って円周率を求めます。","headerImage":"https://i.imgur.com/y1Av3h3.png","year":"2019","month":"12"}}},{"node":{"id":"93d42956-fc6d-5dc6-9d92-c7b001c9500a","html":"<p>フロントエンド初学者の私が、Vue.jsの新しいAPIである<a href=\"https://vue-composition-api-rfc.netlify.com/#summary\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API</a>を使って<strong>Nuxt.js</strong>の実装を行なう機会があり、<strong>Vuexを使ったストアで非常につらい思いをした</strong>のでまとめます。</p>\n<p>多分、もっとちゃんとしたやり方があるとは思いますがひとまず動いたので記事にしていきます。</p>\n<p>とりあえず動いたゴミコードは<a href=\"https://github.com/tubone24/ebook-homebrew-nuxt-with-typescript-client\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのGitHub</a>にあげてます。</p>\n<p><del>結構適当にやってます。</del></p>\n<p>なお、Composition-APIについてよくまとまっている記事はVue Advent Calendar 2019に載っていた<a href=\"https://qiita.com/ushironoko/items/2aa90f38acea9439c09b\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Composition APIってなんだ</strong></a>という記事が大変に参考になるかと思いますし、本実装のモチベーションになった記事として<a href=\"https://qiita.com/neutron63zf/items/506c7493a53cea44860e#vue-next%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%99%A5%E7%A9%BD\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>きたるべきvue-nextのコアを理解する</strong></a>という記事の存在があります。</p>\n<p>大変参考にさせていただきました！</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E5%89%8D%E6%8F%90\">前提</a></p>\n<ul>\n<li><a href=\"#%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\">作りたいもののイメージ</a></li>\n<li><a href=\"#%E6%A4%9C%E8%A8%BC%E3%81%AB%E4%BD%BF%E3%81%86%E3%82%B7%E3%83%A7%E3%83%9Capi\">検証に使うショボAPI</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#nuxtjs%E3%81%A7%E3%81%AEvuex%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">Nuxt.jsでのVuexの使い方</a></p>\n<ul>\n<li><a href=\"#%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E4%BD%BF%E3%81%84%E6%96%B9\">間違った使い方</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#vuex%E3%81%AEstore%E3%82%92composition-api%E3%81%A7%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95\">VuexのstoreをComposition APIで使う方法</a></p>\n<ul>\n<li><a href=\"#%E3%82%B9%E3%83%88%E3%82%A2%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%96%B9%E6%B3%95\">ストアへのアクセス方法</a></li>\n<li><a href=\"#action%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">Actionの呼び出し</a></li>\n<li><a href=\"#getter%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">Getterの呼び出し</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BD%95%E5%BA%A6%E3%82%82%E8%A8%80%E3%81%A3%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8C%E5%8B%95%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93\">何度も言ってますが動きません</a></p>\n</li>\n<li>\n<p><a href=\"#reactive%E3%81%AAvuex%E3%82%B9%E3%83%88%E3%82%A2%E3%82%92%E4%BD%9C%E3%82%8B\">ReactiveなVuexストアを作る</a></p>\n<ul>\n<li>\n<p><a href=\"#composition-api%E3%81%AEreactive%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">Composition APIのReactiveについて</a></p>\n</li>\n<li>\n<p><a href=\"#reactive%E3%81%AA%E9%96%A2%E4%BF%82%E6%80%A7%E3%82%92%E5%BC%95%E3%81%8D%E7%B6%99%E3%81%90torefs\">Reactiveな関係性を引き継ぐtoRefs</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B91-state%E3%81%AE%E5%9E%8B%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B%E3%81%AE9\">問題点1: Stateの型ってどうやって設定するの？(※9)</a></p>\n<ul>\n<li><a href=\"#%E8%A7%A3%E6%B1%BA%E6%B3%95\">解決法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B92-getter%E3%81%AE%E8%AC%8E%E3%81%AEif%E6%96%8710\">問題点2: getterの謎のif文(※10)</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%8F%82%E8%80%83\">参考</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"前提\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E6%8F%90\" aria-label=\"前提 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前提</h2>\n<p>今回の検証、というか無理やり実装の前提事項です。</p>\n<ul>\n<li>TypeScriptで実装します</li>\n<li>Composition APIは<code class=\"language-text\">@vue/composition-api</code>をVue.useする形で実装します</li>\n<li>Composition APIでの具体的な実装例(Composition Functionなど)は解説省きます。\n<ul>\n<li>CreateComponentやSetupなどのお話はさらっとスキップして進めちゃいます。</li>\n<li>Composition APIの基本的な使い方はこちらが参考になりそうです。<a href=\"https://qiita.com/ryo2132/items/f055679e9974dbc3f977\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>先取りVue 3.x !! Composition API を試してみる</strong></a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作りたいもののイメージ\" style=\"position:relative;\"><a href=\"#%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\" aria-label=\"作りたいもののイメージ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>作りたいもののイメージ</h3>\n<ul>\n<li>バックエンドからAPI経由で情報を取得する</li>\n<li>取得した情報はVuexでステート管理する</li>\n<li>Vuexストアにactionsを作成し、呼び出すことでaxiosを使ってバックエンドのAPIから情報を受け取りストアに格納する</li>\n<li>getterを設定し、getter経由で最新のストア情報が取得できるようにする</li>\n</ul>\n<h3 id=\"検証に使うショボapi\" style=\"position:relative;\"><a href=\"#%E6%A4%9C%E8%A8%BC%E3%81%AB%E4%BD%BF%E3%81%86%E3%82%B7%E3%83%A7%E3%83%9Capi\" aria-label=\"検証に使うショボapi permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>検証に使うショボAPI</h3>\n<p>今回はバックエンドAPIとして拙作の下記APIを使います。</p>\n<p>本APIからサーバーの<strong>ステータス</strong>と<strong>バージョン</strong>を取得し、<strong>リアクティブに画面</strong>に表現することを目標にします。</p>\n<p>APIのリソースはstatusという名前です。詳しくは下記OpenAPIをご参照↓</p>\n<p><a href=\"https://ebook-homebrew.herokuapp.com/docs\" target=\"_blank\" rel=\"noopener noreferrer\">Herokuで作ったエンドポイント</a></p>\n<p><a href=\"https://github.com/tubone24/ebook_homebrew\" target=\"_blank\" rel=\"noopener noreferrer\">ソースGitHub</a></p>\n<p><img src=\"https://i.imgur.com/9OhZRsB.png\" alt=\"img\" title=\"利用するAPIリファレンス\"></p>\n<h2 id=\"nuxtjsでのvuexの使い方\" style=\"position:relative;\"><a href=\"#nuxtjs%E3%81%A7%E3%81%AEvuex%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"nuxtjsでのvuexの使い方 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nuxt.jsでのVuexの使い方</h2>\n<p>Nuxt.jsではVuexのストアを使いたい場合比較的簡単に実装でき<code class=\"language-text\">store</code>ディレクトリの中に、<code class=\"language-text\">hoge.ts</code> のような形でファイルを作ることで、<strong>モジュールモード</strong>というストアモードが利用できるようになります。(素のVuexでいうところのnamespace付のストアですね)</p>\n<p>参考: <a href=\"https://ja.nuxtjs.org/guide/vuex-store/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex ストア</a></p>\n<p>早速ストアを作っていきます。</p>\n<h3 id=\"間違った使い方\" style=\"position:relative;\"><a href=\"#%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E4%BD%BF%E3%81%84%E6%96%B9\" aria-label=\"間違った使い方 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>間違った使い方</h3>\n<p>まずは間違った例です。</p>\n<p>端的に言えばストアがReactiveじゃないので値更新がされません。</p>\n<p>詳しくはあとで解説しますが、いたって普通のVuexストアを書いています。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> backendURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://ebook-homebrew.herokuapp.com/'</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\">//Stateの型を宣言</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//State: 先ほど宣言したState型を使ってます</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  version<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Mutation: stateに新しい値をセットするだけ</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>version <span class=\"token operator\">=</span> version<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Action: サーバからステータスなどを取得し、mutation経由で値をセット</span>\n<span class=\"token comment\">//Actionなのでasync awaitな非同期な処理もOK</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">fetchServerInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>backendURL <span class=\"token operator\">+</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>setStatus<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>setVersion<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>setStatus<span class=\"token punctuation\">,</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span>setVersion<span class=\"token punctuation\">,</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Getter: stateの中身を取り出してreturnする</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>基本的なことかもしれませんが、Stateの更新はAction, Mutationどちらからでもできますが、Componentsからの更新は非同期を許容するActionに統一したほうがいいかもです。</p>\n<p><img src=\"https://vuex.vuejs.org/vuex.png\" alt=\"img\" title=\"Vuexのライフサイクル\"></p>\n<h2 id=\"vuexのstoreをcomposition-apiで使う方法\" style=\"position:relative;\"><a href=\"#vuex%E3%81%AEstore%E3%82%92composition-api%E3%81%A7%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95\" aria-label=\"vuexのstoreをcomposition apiで使う方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VuexのstoreをComposition APIで使う方法</h2>\n<p>それでは上記で作成したVuexストアをComponentsで使っていきます。</p>\n<p><strong>何度も言っていますがVuexストアを正しく直さないと動きませんよ</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"status\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token function\">actionの呼び出し</span><span class=\"token punctuation\">(</span>※<span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>b<span class=\"token operator\">-</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"get-status\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"is-primary\"</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">click</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"fetchStatus(store)\"</span><span class=\"token operator\">></span>Get Status <span class=\"token constant\">NOW</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>b<span class=\"token operator\">-</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> setupの<span class=\"token keyword\">return</span><span class=\"token function\">に設定したものはtemplate内で使える</span><span class=\"token punctuation\">(</span>※<span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">--</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>ServerStatus<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>b<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token string\">'status/getStatus'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>b<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>ServerVersion<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>b<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token string\">'status/getStatus'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>b<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    createComponent<span class=\"token punctuation\">,</span>\n    reactive<span class=\"token punctuation\">,</span>\n    onBeforeMount<span class=\"token punctuation\">,</span>\n    onUpdated<span class=\"token punctuation\">,</span>\n    SetupContext<span class=\"token punctuation\">,</span>\n    onMounted<span class=\"token punctuation\">,</span>\n    computed<span class=\"token punctuation\">,</span>\n    watch<span class=\"token punctuation\">,</span>\n    ref\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/composition-api'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> backendURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://ebook-homebrew.herokuapp.com/'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    propHello<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchStatus</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// store.dispatchでActionを呼び出す</span>\n   <span class=\"token comment\">// setupからstoreを受け取る (※4)</span>\n    <span class=\"token keyword\">await</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'status/fetchServerInfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// createComponentする</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      propHello<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> String\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token comment\">//setupを呼び出すとSetupContextのrootでVueインスタンス内の要素にアクセスできる</span>\n    <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> root <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span>SetupContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// props</span>\n      <span class=\"token keyword\">const</span> propsHello <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>propHello<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">//storeをVueインスタンスから取り出す(※1)</span>\n      <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> root<span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//methods</span>\n      <span class=\"token function\">onBeforeMount</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 当然setup外で設定した関数にもアクセス可能(※4)</span>\n        <span class=\"token comment\">// 関数内でstoreを使うため引数で渡しておく(※2)</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">fetchStatus</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        fetchStatus<span class=\"token punctuation\">,</span>\n        store<span class=\"token punctuation\">,</span> <span class=\"token comment\">//storeをtemplate内で利用するためにreturn(※3)</span>\n        propsHello<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"ストアへのアクセス方法\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%88%E3%82%A2%E3%81%B8%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E6%96%B9%E6%B3%95\" aria-label=\"ストアへのアクセス方法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ストアへのアクセス方法</h3>\n<p>Composition APIでは<strong>Vuexストアはsetup内でしか取り出せません</strong>。</p>\n<p>なぜならComposition APIはsetupしたタイミングでVueインスタンスが利用できるため、いままでのVue.jsでいうところの<strong>this.$store</strong>で取り出すことがsetup内でしか使えないからです。</p>\n<p>なので、setupのなかで<strong>root.$store</strong>を取り出して(※1)、Vuexストアを使う別の関数(※2)やtemplateで利用するためsetupのreturnに渡しています。(※3)</p>\n<h3 id=\"actionの呼び出し\" style=\"position:relative;\"><a href=\"#action%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"actionの呼び出し permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actionの呼び出し</h3>\n<p>上記Componentsでは、Vue.jsライフサイクルの<strong>onBeforeMount</strong>と、template内の<strong>get-status</strong>ボタンの押下で<strong>fetchStatus</strong>という関数が呼び出され、同関数でActionがdispatchされる作りです。(※4)(※5)</p>\n<p><strong>fetchStatus</strong>はsetup外に作られた関数なので、<strong>seutupのなかでfetshStatusの引数にstoreを渡して</strong>あげます。</p>\n<h3 id=\"getterの呼び出し\" style=\"position:relative;\"><a href=\"#getter%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\" aria-label=\"getterの呼び出し permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getterの呼び出し</h3>\n<p>(※3)のようにあらかじめVuexストア(store)をsetupのreturnに設定することで(※6)のように **store.getters['status/getStatus']**というVuexモジュールモードのgetterの呼び出しの形でtemplate内でGetterが利用できます。</p>\n<h2 id=\"何度も言ってますが動きません\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E5%BA%A6%E3%82%82%E8%A8%80%E3%81%A3%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8C%E5%8B%95%E3%81%8D%E3%81%BE%E3%81%9B%E3%82%93\" aria-label=\"何度も言ってますが動きません permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何度も言ってますが動きません</h2>\n<p>何度も言っておりますが上記のコードでは正しく動きません。</p>\n<p>Actionを正しくdispatchしていても、ServerStatus, ServerVersionはtemplateで<strong>更新されません</strong>。</p>\n<p><img src=\"https://i.imgur.com/xihsCyz.png\" alt=\"img\"></p>\n<p>なぜなら<strong>VuexストアのステートがReactive</strong>じゃない。つまり、<strong>値更新を検知できない</strong>ためです。</p>\n<p>ではVuexのストアをReactiveにしてしまいましょう。</p>\n<h2 id=\"reactiveなvuexストアを作る\" style=\"position:relative;\"><a href=\"#reactive%E3%81%AAvuex%E3%82%B9%E3%83%88%E3%82%A2%E3%82%92%E4%BD%9C%E3%82%8B\" aria-label=\"reactiveなvuexストアを作る permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ReactiveなVuexストアを作る</h2>\n<p>結論から言えば、VuexストアのStateをReactiveにしちゃえばいいわけなので</p>\n<p>ストアを次のように作り直します。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  reactive<span class=\"token punctuation\">,</span>\n  Ref<span class=\"token punctuation\">,</span>\n  toRefs<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/composition-api'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> backendURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://ebook-homebrew.herokuapp.com/'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Reactiveなstateを作る(7)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//型について(※9)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reactive</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//toRefsでreturnする(※8)</span>\n    status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">setVersion</span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>version <span class=\"token operator\">=</span> version<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">fetchServerInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>backendURL <span class=\"token operator\">+</span> <span class=\"token string\">'status'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_STATUS</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_VERSION</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_STATUS</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SET_VERSION</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 意味わかんないif文。ここが問題点(※10)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ぶっちゃけこれだけの変更です。</p>\n<p>少し細かく見ていきます。</p>\n<h3 id=\"composition-apiのreactiveについて\" style=\"position:relative;\"><a href=\"#composition-api%E3%81%AEreactive%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\" aria-label=\"composition apiのreactiveについて permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composition APIのReactiveについて</h3>\n<p>そもそもReactiveって何よ？って話は<a href=\"https://qiita.com/neutron63zf/items/506c7493a53cea44860e#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%81%A8%E3%81%AF\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>きたるべきvue-nextのコアを理解する: そもそも「リアクティブ」とは?</strong></a>がすさまじくわかりやすいので解説はそちらに譲ります。</p>\n<p>Composition APIにはReactiveな値を作り出すことのできる方法として有名どころで<strong>ref</strong>と<strong>reactive</strong>がありますが、VuexストアはStateという自己定義の<strong>オブジェクト</strong>なので<strong>プリミティブのみ許容のrefは使えません</strong>。<strong>reactiveを使います</strong>。</p>\n<p>(注7)のように<strong>Stateオブジェクトをreactiveで囲んであげれば</strong>ReactiveなStateになります。</p>\n<h3 id=\"reactiveな関係性を引き継ぐtorefs\" style=\"position:relative;\"><a href=\"#reactive%E3%81%AA%E9%96%A2%E4%BF%82%E6%80%A7%E3%82%92%E5%BC%95%E3%81%8D%E7%B6%99%E3%81%90torefs\" aria-label=\"reactiveな関係性を引き継ぐtorefs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reactiveな関係性を引き継ぐtoRefs</h3>\n<p>StateをReactiveにすることはできました。</p>\n<p>ですが、reactiveには<strong>スコープ</strong>が存在しますのでreturnで戻してしまうと<strong>戻り先でReactiveな関係が解消</strong>されてしまいます。</p>\n<p>それを解決する方法として<strong>toRefs</strong>というものがあります。</p>\n<p>(注8)のようにtoRefsにreactiveな値を引数に設定し、returnすることで<strong>戻り先でもreactiveな変数</strong>として扱えます。</p>\n<p>toRefsはどうやら<a href=\"https://github.com/vuejs/composition-api/blob/master/src/reactivity/ref.ts#L142\" target=\"_blank\" rel=\"noopener noreferrer\">Composition APIのソース</a>を見ると、受け取ったreactiveな値をRefで再定義し、一個一個getter, setterを設定しているproxyらしいです。</p>\n<p>インターセプトな動き・・・。なるほどわからん。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">toRefs</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Data <span class=\"token operator\">=</span> Data<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Refs<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> Refs<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> val<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// use ref to proxy the property</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isRef</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      val <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">createRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> v <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">as</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// todo</span>\n    res<span class=\"token punctuation\">[</span>key <span class=\"token keyword\">as</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ともかくこれでComponents側でもreactiveな値として扱えますね！</p>\n<h3 id=\"問題点1-stateの型ってどうやって設定するの9\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B91-state%E3%81%AE%E5%9E%8B%E3%81%A3%E3%81%A6%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B%E3%81%AE9\" aria-label=\"問題点1 stateの型ってどうやって設定するの9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題点1: Stateの型ってどうやって設定するの？(※9)</h3>\n<p>確かにこれで無事ReactiveなVuexストアができたのですが、少し問題点があります。</p>\n<p>間違った旧ストアコードではVuexストアのStateにinterfaceを使ってきちんと型を設定していたかと思いますが新コードではできてません。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token comment\">//Stateの型を宣言</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//State: 先ほど宣言したState型を使ってます</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> State <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  version<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token comment\">//Stateの型を宣言</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//型がないよ！！</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reactive</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"解決法\" style=\"position:relative;\"><a href=\"#%E8%A7%A3%E6%B1%BA%E6%B3%95\" aria-label=\"解決法 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>解決法</h4>\n<p>実はStateの型問題はかなりトリッキーというか、Composition APIの深掘れば何とか解決できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  reactive<span class=\"token punctuation\">,</span>\n  Ref<span class=\"token punctuation\">,</span>\n  toRefs<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/composition-api'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Refs<span class=\"token operator\">&lt;</span>Data<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//謎のtype</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> Data<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Data<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ref<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> Ref<span class=\"token operator\">&lt;</span><span class=\"token constant\">V</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> Ref<span class=\"token operator\">&lt;</span>Data<span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  status<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  version<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Refs<span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//Refs&lt;State>が型です</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">toRefs</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">reactive</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>State<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    status<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    version<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>**declare type Refs<Data>**という超謎なことをしてますが、これは、toRefsの戻り型としてComposition APIのソースそのものに定義されていた型ものそのものです。</p>\n<p>Ref型は**@vue/composition-api**からimportで取ってこれるのですが、Refs型は取ってこれないので、取ってこれるRef型からゴリゴリ作って、それを使ってあげるわけです。</p>\n<p>これで一応Stateの型が設定できます。</p>\n<h3 id=\"問題点2-getterの謎のif文10\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B92-getter%E3%81%AE%E8%AC%8E%E3%81%AEif%E6%96%8710\" aria-label=\"問題点2 getterの謎のif文10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題点2: getterの謎のif文(※10)</h3>\n<p>新しいgetterは謎のif文がかまされています。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getStatus</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">//引数の型ないよー</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//謎if文</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getVersion</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//謎・・</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これは、StateをtoRefs化した弊害によって入れざるを得ないif文です。</p>\n<p>Components内でtoRefsを受け取らないことにはRefsのProxyが効かないようで、Computeしたときに返るrefオブジェクトっぽいものが返ってきます。</p>\n<p>なので、その場合はvalueで値を取得しなければいけません。</p>\n<p>んー。これはどうしようもありませんね・・・。</p>\n<p>あと、toRefsがProxy的な動きをするのでTypeScriptに怒られないような型定義がうまくできませんでした(涙)</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>色々試行錯誤しましたが、なんとか動きました。</p>\n<p><img src=\"https://i.imgur.com/BWyjwja.png\" alt=\"img\"></p>\n<p>Composition APIとVuexの相性があまりよくないことが分かった気がしますが、それでもdevtool使いたいとかでVuexの需要はあると思うので何か抜け道が発見できればと願うばかりです。</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://vue-composition-api-rfc.netlify.com/#summary\" target=\"_blank\" rel=\"noopener noreferrer\">Composition API RFC</a></li>\n<li><a href=\"https://qiita.com/ushironoko/items/2aa90f38acea9439c09b\" target=\"_blank\" rel=\"noopener noreferrer\">Composition APIってなんだ</a></li>\n<li><a href=\"https://qiita.com/neutron63zf/items/506c7493a53cea44860e#vue-next%E3%81%AE%E3%83%AA%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%96%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E9%99%A5%E7%A9%BD\" target=\"_blank\" rel=\"noopener noreferrer\">きたるべきvue-nextのコアを理解する</a></li>\n</ul>","fields":{"slug":"2019/12/09/nuxt-composition-vuex"},"frontmatter":{"tags":["JavaScript","Nuxt.js","Composition API","Vue.js","TypeScript","Vuex","ストアパターン"],"templateKey":"blog-post","slug":"2019/12/09/nuxt-composition-vuex","id":null,"title":"Nuxt.js + Composition APIでVuexのStateをReactiveに使う方法","url":"2019/12/09/nuxt-composition-vuex","date":"2019-12-09T11:41:54.861Z","description":"Qiitaにあげた記事Nuxt.js + Composition APIでVuexのStateをReactiveに使う方法の転載です。","headerImage":"https://i.imgur.com/BWyjwja.png","year":"2019","month":"12"}}},{"node":{"id":"5ec257e9-56c2-55d0-bb12-33307896afff","html":"<p>前回の続きです。</p>\n<p>前回<a href=\"https://blog.tubone-project24.xyz/2019/12/04/nuxt-toast\" target=\"_blank\" rel=\"noopener noreferrer\">Nuxt.jsのmodulesをCompositionAPIで使ってみる(@nuxtjs/toast編)\n</a>ではNuxt.jsのmodulesを使ってtoastを出してみました。</p>\n<p>ただ、前回の実装だとどこからともなく</p>\n<blockquote>\n<p>特に再利用もしてないし、共通処理も定義してないからpluginsとか使ってあげれば、modulesじゃなくていいんじゃないんですかねぇ</p>\n</blockquote>\n<p>という声が聞こえてきそうです。</p>\n<p>いやはやその通りだとは思いますのでmodulesのもう一つの魅力、<strong>global options</strong>の実装を進めようかと思います。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#toast%E3%81%AEoption%E5%95%8F%E9%A1%8C\">toastのoption問題</a></li>\n<li><a href=\"#modules-global-option%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">modules global optionを使ってみる</a></li>\n<li><a href=\"#%E3%82%82%E3%81%A3%E3%81%A8%E8%A6%8B%E9%80%9A%E3%81%97%E3%82%92%E3%82%88%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84register%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\">もっと見通しをよくしたい。registerを使おう</a></li>\n<li><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></li>\n</ul>\n</div>\n<h2 id=\"toastのoption問題\" style=\"position:relative;\"><a href=\"#toast%E3%81%AEoption%E5%95%8F%E9%A1%8C\" aria-label=\"toastのoption問題 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>toastのoption問題</h2>\n<p>toastを使う際にはtoastを出す場所(<strong>position</strong>), toastをひっこめるまでの時間(<strong>duration</strong>)、色合いなどをtoastを呼び出す際に設定しますが・・・。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> doDownload <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    position<span class=\"token operator\">:</span> <span class=\"token string\">'top-center'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    fullWidth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    type<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadPDF</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    link<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'result.pdf'</span><span class=\"token punctuation\">;</span>\n    link<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">PdfFileNotFoundError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No File!!'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"></span>      toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UnknownError!!'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>コードの見通しが悪いですね・・。</p>\n<p>同じような設定を複数のtoastにoptionsで設定するのはめんどくさい・・。</p>\n<h2 id=\"modules-global-optionを使ってみる\" style=\"position:relative;\"><a href=\"#modules-global-option%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"modules global optionを使ってみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>modules global optionを使ってみる</h2>\n<p>では、こちらを改善していきます。</p>\n<p><strong>@nuxtjs/toast</strong>には<strong>global options</strong>の機能があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//nuxt.config.ts</span>\n\n  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'@nuxtjs/toast'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  toast<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> <span class=\"token string\">'top-center'</span><span class=\"token punctuation\">,</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n    fullWidth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    iconPack <span class=\"token operator\">:</span> <span class=\"token string\">'material'</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>このように<strong>modules</strong>で**@nuxtjs/toast**を読み込んだ後、<strong>toast共通設定</strong>を入れます。</p>\n<p>たったこれだけ簡単！</p>\n<h2 id=\"もっと見通しをよくしたいregisterを使おう\" style=\"position:relative;\"><a href=\"#%E3%82%82%E3%81%A3%E3%81%A8%E8%A6%8B%E9%80%9A%E3%81%97%E3%82%92%E3%82%88%E3%81%8F%E3%81%97%E3%81%9F%E3%81%84register%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\" aria-label=\"もっと見通しをよくしたいregisterを使おう permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>もっと見通しをよくしたい。registerを使おう</h2>\n<p>さらにコードの見通しをよくしたければ、<strong>register</strong>という機能を使うことができます。</p>\n<p>たとえば致命的なエラーの時は共通のメッセージを出すtoastを各コンポーネントに量産しなければならない場合など、コードのコピペはしんどいしメンテナンスもよくないのでこいつが便利です。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token comment\">//nuxt.config.ts</span>\n\n  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'@nuxtjs/toast'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  toast<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    position<span class=\"token operator\">:</span> <span class=\"token string\">'top-center'</span><span class=\"token punctuation\">,</span>\n    duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n    fullWidth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    iconPack <span class=\"token operator\">:</span> <span class=\"token string\">'material'</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    register<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        name<span class=\"token operator\">:</span> <span class=\"token string\">'nofileError'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        message<span class=\"token operator\">:</span> <span class=\"token string\">'No File!!'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          type<span class=\"token operator\">:</span> <span class=\"token string\">'info'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">        name<span class=\"token operator\">:</span> <span class=\"token string\">'unknownError'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">//toast名: 利用するときに使う名前</span></span><span class=\"gatsby-highlight-code-line\">        message<span class=\"token operator\">:</span> <span class=\"token string\">'UnknownError!!'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">//toastのmessage</span></span><span class=\"gatsby-highlight-code-line\">        options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">          type<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"> <span class=\"token comment\">//個別に設定したいオプションがあれば</span></span><span class=\"gatsby-highlight-code-line\">        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>とtoastの情報を登録しておくことにより利用側で</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"typescript\"><pre style=\"counter-reset: linenumber 0\" class=\"language-typescript line-numbers\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> doDownload <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadPDF</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    link<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'result.pdf'</span><span class=\"token punctuation\">;</span>\n    link<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">PdfFileNotFoundError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      toast<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">.</span><span class=\"token function\">nofileError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//呼び出し</span></span>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      toast<span class=\"token punctuation\">.</span>global<span class=\"token punctuation\">.</span><span class=\"token function\">unknownError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span> <span class=\"token comment\">//呼び出し</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>とtoastのインスタンスに対して<strong>global.name</strong>と宣言するだけで使えちゃいます!!</p>\n<p><img src=\"https://i.imgur.com/29nafu5.png\" alt=\"img\"></p>\n<p>当然、見た目は同じですね。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>modulesのglobal optionsをつかうことによりコードの見通しが良くなった気がします。</p>","fields":{"slug":"2019/12/08/nuxtjs-toast-module"},"frontmatter":{"tags":["JavaScript","TypeScript","Nuxt.js","Vue.js","CompositionAPI","toast"],"templateKey":"blog-post","slug":"2019/12/08/nuxtjs-toast-module","id":null,"title":"Nuxt.jsのmodulesをCompositionAPIで使ってみる(@nuxtjs/toast Global Option編)","url":"2019/12/08/nuxtjs-toast-module","date":"2019-12-08T04:16:00.000Z","description":"Nuxt.jsのmodulesでGlobal Optionを使ってみます。","headerImage":"https://i.imgur.com/29nafu5.png","year":"2019","month":"12"}}},{"node":{"id":"4ada49c4-b623-5643-a35e-9afea16ceb0a","html":"<p>リベンジ</p>\n<p>先日<a href=\"https://blog.tubone-project24.xyz/2019/11/21/ramen\" target=\"_blank\" rel=\"noopener noreferrer\">スープの衝撃！ここまでうまいスープはあるのか！？なラーメン\n</a>で訪問した<a href=\"https://tabelog.com/tokyo/A1308/A130802/13212916/\" target=\"_blank\" rel=\"noopener noreferrer\">利尻昆布ラーメン くろおび</a>に再訪。</p>\n<p><img src=\"https://i.imgur.com/uY2Lqm7.jpg\" alt=\"img\"></p>\n<p>塩ラーメン相変わらずうまい！</p>\n<p>そして今日は・・・</p>\n<h2 id=\"チャーシュー飯\" style=\"position:relative;\"><a href=\"#%E3%83%81%E3%83%A3%E3%83%BC%E3%82%B7%E3%83%A5%E3%83%BC%E9%A3%AF\" aria-label=\"チャーシュー飯 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>チャーシュー飯</h2>\n<p><img src=\"https://i.imgur.com/nfpuVuH.jpg\" alt=\"img\"></p>\n<p>こりゃうまい!!!</p>\n<p>ラーメンとは逆ですっげぇ味濃いうまい!!</p>\n<h2 id=\"デブ活\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%96%E6%B4%BB\" aria-label=\"デブ活 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デブ活</h2>\n<p>どんどんデブになる</p>","fields":{"slug":"2019/12/06/ramen"},"frontmatter":{"tags":["ぼやき","ラーメン","チャーシュー飯","デブ活"],"templateKey":"blog-post","slug":"2019/12/06/ramen","id":null,"title":"くろおびらーめん with チャーシュー飯","url":"2019/12/06/ramen","date":"2019-12-05T15:37:55.677Z","description":"うまい！くろおびらーめん with チャーシュー飯","headerImage":"https://i.imgur.com/nfpuVuH.jpg","year":"2019","month":"12"}}},{"node":{"id":"aeb03262-b212-59bc-bcbd-36c2adbb1ca2","html":"<p>わからん</p>\n<p>最近<a href=\"https://ja.nuxtjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Nuxt.js</strong></a>と戯れるようにしてますが、Nuxt.jsと<a href=\"https://jp.vuejs.org/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js</a>の新しいAPIである<a href=\"https://vue-composition-api-rfc.netlify.com/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>CompositionAPI</strong></a>の相性があまりよくないのか色々苦戦してます。</p>\n<p>いよいよツラミもわかってきた頃合いなので一つずつまとめていこうかと思います。</p>\n<p>今回は<strong>Nuxt.js</strong>の<strong>modules</strong>を<strong>CompositionAPI</strong>でどう使っていくかを書きます。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E5%85%88%E3%81%AB%E7%B5%90%E8%AB%96\">先に結論</a></li>\n<li><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82compositionapi%E3%81%A8%E3%81%AF\">そもそもCompositionAPIとは？</a></li>\n<li><a href=\"#nuxtjs%E3%81%A8%E3%81%AE%E7%9B%B8%E6%80%A7\">Nuxt.jsとの相性</a></li>\n<li><a href=\"#nuxtjs%E3%81%AEmodules%E3%81%8Ccompositionapi%E3%81%A7%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E3%82%93%E3%81%A0%E3%81%8C\">Nuxt.jsのmodulesがCompositionAPIで使いたいんだが</a></li>\n<li><a href=\"#compositionapi%E3%81%A0%E3%81%A8vue%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%AE%E3%81%AFsetup%E5%86%85%E3%81%AE%E3%81%BF\">CompositionAPIだとVueインスタンスにアクセスできるのはsetup内のみ</a></li>\n<li><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></li>\n</ul>\n</div>\n<h2 id=\"先に結論\" style=\"position:relative;\"><a href=\"#%E5%85%88%E3%81%AB%E7%B5%90%E8%AB%96\" aria-label=\"先に結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先に結論</h2>\n<p><strong>実装方法だけ見たい人は下記に進んでください。</strong></p>\n<p><a href=\"#compositionapi%E3%81%A0%E3%81%A8vue%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%AE%E3%81%AFsetup%E5%86%85%E3%81%AE%E3%81%BF\">CompositionAPIだとVueインスタンスにアクセスできるのはsetup内のみ</a></p>\n<p>また、本実装を施したWebアプリを作ってみました。</p>\n<p><a href=\"https://github.com/tubone24/ebook-homebrew-nuxt-with-typescript-client\" target=\"_blank\" rel=\"noopener noreferrer\">ebook-homebrew-nuxt-with-typescript-client</a></p>\n<p><a href=\"https://github.com/tubone24/ebook-homebrew-nuxt-with-typescript-client/blob/master/components/FileList.vue#L28\" target=\"_blank\" rel=\"noopener noreferrer\">該当のComponent</a></p>\n<p><img src=\"https://i.imgur.com/29nafu5.png\" alt=\"img\"></p>\n<h2 id=\"そもそもcompositionapiとは\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82compositionapi%E3%81%A8%E3%81%AF\" aria-label=\"そもそもcompositionapiとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>そもそもCompositionAPIとは？</h2>\n<p><a href=\"https://vue-composition-api-rfc.netlify.com/\" target=\"_blank\" rel=\"noopener noreferrer\">CompositionAPI</a>とは、<strong>Vue3.x系</strong>から正式採用される新しいVue.jsの使い方です。</p>\n<p>公式的には</p>\n<blockquote>\n<p>a set of additive, function-based APIs that allow flexible composition of component logic. （コンポーネントロジックの構成を柔軟にできる関数ベースな追加API）</p>\n</blockquote>\n<p>とのこと。</p>\n<p>ここら辺はだんだん使っていけば何となく良いところが見えてきますが、そちらのまとめはまた今度。</p>\n<p>CompositionAPIを使おうと思ったのは、Vue3.xで採用されるというのと、もはや<strong>TypeScript</strong>で書かないと現場で<strong>いじめられてしまう</strong>この世のなかで、VueもTypeScriptで書くことが急務になりつつある状況の中、Vue + TypeScriptで一定のデファクトスタンダードを勝ち得た<a href=\"https://github.com/vuejs/vue-class-component\" target=\"_blank\" rel=\"noopener noreferrer\">ClassAPI</a>という使い方が、色々問題になっているようだったのでそのツラミを取り除いたらしいCompositionAPIを採用しました。</p>\n<p>上記のツラミ・スゴミについて詳しくは下記のプレゼンがすごくわかりやすかったです。</p>\n<iframe loading=\"lazy\" id=\"talk_frame_546926\" class=\"speakerdeck-iframe\" src=\"//speakerdeck.com/player/8b4b30397b814c89872e72f1d0118f93\" width=\"710\" height=\"399\" style=\"aspect-ratio:710/399; border:0; padding:0; margin:0; background:transparent;\" frameborder=\"0\" allowtransparency=\"true\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n\n<p>ざっくりと書き方の違いとしては</p>\n<p>ClassAPI(decoratorを使ったパターン)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Prop<span class=\"token punctuation\">,</span> Vue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-property-decorator\"</span><span class=\"token punctuation\">;</span>\n\n@Component\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// props</span>\n  @<span class=\"token function\">Prop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> propHoge<span class=\"token operator\">!</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// data</span>\n  <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"Hoge\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">hogeCount</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// computed</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hogeCount<span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// mounted</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">gethoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// methods</span>\n  <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    axios\n      <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://hogehoge.com\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>CompositionAPIで書くパターン</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    createComponent<span class=\"token punctuation\">,</span>\n    reactive<span class=\"token punctuation\">,</span>\n    onBeforeMount<span class=\"token punctuation\">,</span>\n    onMounted<span class=\"token punctuation\">,</span>\n    computed<span class=\"token punctuation\">,</span>\n    ref\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/composition-api'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> toast <span class=\"token keyword\">from</span> <span class=\"token string\">'@nuxtjs/toast'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>PdfFileNotFoundError<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"~/types/error\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> backendURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://ebook-homebrew.herokuapp.com/'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// data</span>\n  <span class=\"token comment\">// ref,またはreactiveとして設定するとTemplateでreactiveに変更が反映される</span>\n  <span class=\"token comment\">// setup()の外でも中でもOK</span>\n  <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">reactive</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>\n    uploadList<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">>></span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    uploadList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// methods</span>\n  <span class=\"token keyword\">const</span> updateFileList <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n     <span class=\"token punctuation\">(</span>ロジック<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> downloadPDF <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Blob<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n　　　<span class=\"token punctuation\">(</span>ロジック<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// typeまたはinterfaceでpropsの型指定</span>\n  <span class=\"token keyword\">type</span> <span class=\"token class-name\">Props</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    propHello<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">//createComponet内でprops, components, layoutなどを設定</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//props</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      propHello<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> String\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//setup()で初めてVueインスタンス化されるのでinjectされたものはsetup内でしかとれない。</span>\n    <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> Props<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token comment\">// propsをsetup内ローカル変数で再設定</span>\n      <span class=\"token keyword\">const</span> propsHello <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>propHello<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//Contextをsetupで受け取ることができ、module化されたものはroot要素からとれる</span>\n      <span class=\"token keyword\">const</span> toast <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>$root<span class=\"token punctuation\">.</span>$toast<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//setup内でもmethods作成可能。Context rootから取得するものを使わないといけない場合、setup内で実装するしか道はなさそう</span>\n      <span class=\"token keyword\">const</span> doDownload <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n         <span class=\"token punctuation\">(</span>ロジック<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//ライフサイクルはsetup内で記載、またライフサイクル自体も従来と異なる</span>\n      <span class=\"token function\">onBeforeMount</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">updateFileList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//setupのreturnで返したものがtemplateで使える変数</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">,</span>\n        propsHello<span class=\"token punctuation\">,</span>\n        doDownload\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<p>となります。</p>\n<p>ぜんぜんかきっぷり違ってびっくり！</p>\n<p>ぱっと見<strong>ClassAPI</strong>のデコレーターの方が<strong>コード量少なくて</strong>見通しはいい気がしますが、ロジック、ステート、レンダリングを好きなように（究極別ファイルに切り出しも可）宣言して、setupでまとめ上げるのは確かに見通しよいかもしれませんね。</p>\n<p>まだ、ここらへんは自分のなかでのベストプラクティスができあがってないので今後考察します。</p>\n<p>あと、<strong>テストコード</strong>はまだ書いてないのですが、毎回Vueインスタンスを<strong>shallowMount</strong>して頑張って書く感じから解放されそうでテストコード的なメリットはありそうです。</p>\n<h2 id=\"nuxtjsとの相性\" style=\"position:relative;\"><a href=\"#nuxtjs%E3%81%A8%E3%81%AE%E7%9B%B8%E6%80%A7\" aria-label=\"nuxtjsとの相性 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nuxt.jsとの相性</h2>\n<p>CompositionAPIとNuxt.jsの<strong>相性</strong>は今のところ<strong>よくない</strong>と思います。</p>\n<p>その一例が<strong>modules</strong>だと思うので検証がてら考察していきます。</p>\n<h2 id=\"nuxtjsのmodulesがcompositionapiで使いたいんだが\" style=\"position:relative;\"><a href=\"#nuxtjs%E3%81%AEmodules%E3%81%8Ccompositionapi%E3%81%A7%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E3%82%93%E3%81%A0%E3%81%8C\" aria-label=\"nuxtjsのmodulesがcompositionapiで使いたいんだが permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nuxt.jsのmodulesがCompositionAPIで使いたいんだが</h2>\n<p>ここからが本題なのですが、よくあるNuxt.jsのmodulesを使う実装例のなかで全くといっていいほどCompositionAPIでやってるものがないので、Nuxt.jsの動き方を逐次確認しながらmodulesを使ってみます。</p>\n<p>例えば、ClassAPI（またはOptionsAPI）の場合よくあるNuxt.jsモジュールの例はaxiosです。</p>\n<p>次のようなお困りごとを解決する使い方が例によく出ます。</p>\n<ul>\n<li>HeadlessCMSなど他コンテンツURIをProxyしている場合などで、APIコール時に<strong>HTTP Statusチェック</strong>し、<strong>404</strong>だった場合は別ページを表示させる</li>\n</ul>\n<p>こういったケースだとOptionsAPIでは下記のような実装例があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//あらかじめnuxt.config.jsにmodules: ['@nuxtjs/axios']を宣言し、同configにplugins: ['~/plugins/axios'] も宣言しておく</span>\n<span class=\"token comment\">//@/plugins/axios.js</span>\n\n<span class=\"token comment\">// modulesのaxiosを呼び出す際の共通のエラー処理を記載</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $axios<span class=\"token punctuation\">,</span> redirect <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    $axios<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> statusCode <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response <span class=\"token operator\">&amp;&amp;</span> err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/not-found-page'</span><span class=\"token punctuation\">)</span>\n \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//利用側components: hoge.vue</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//methods内では this.$axios</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$axios<span class=\"token punctuation\">.</span><span class=\"token function\">$get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://hoge.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      res <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>Accept<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">asyncData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> $axios <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//asyncData, fetchなどでは $axiosで取得</span>\n    <span class=\"token keyword\">const</span> hoges<span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> $axios<span class=\"token punctuation\">.</span><span class=\"token function\">$get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://hoge/hoge\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">userId</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hoon\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hoges <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>共通のエラーハンドリングを<strong>plugins</strong>に記載するだけで<strong>冗長なハンドリング</strong>を回避できるのはすごいですね。</p>\n<p>ポイントはmodulesで宣言した<code class=\"language-text\">@nuxtjs/axios</code>は書くpage, componentで利用可能でVueインスタンス内では<code class=\"language-text\">this.$axios</code>で取得できるということです。</p>\n<h2 id=\"compositionapiだとvueインスタンスにアクセスできるのはsetup内のみ\" style=\"position:relative;\"><a href=\"#compositionapi%E3%81%A0%E3%81%A8vue%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%AE%E3%81%AFsetup%E5%86%85%E3%81%AE%E3%81%BF\" aria-label=\"compositionapiだとvueインスタンスにアクセスできるのはsetup内のみ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CompositionAPIだとVueインスタンスにアクセスできるのはsetup内のみ</h2>\n<p>ということは先ほど話したとおりなのですがそうするとmodulesの利用側はsetup内でのみ使えることになります。</p>\n<p>ということを頭に入れながら<code class=\"language-text\">@nuxtjs/toast</code>を実装していきます。</p>\n<p>まずnuxt.config.ts\nにmodulesを設定していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">//nuxt.config.ts</span>\n\n<span class=\"token punctuation\">(</span>中略<span class=\"token punctuation\">)</span>\nmodules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'@nuxtjs/toast'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>toastの利用側のコンポーネントではsetup内で使います。</p>\n<p>ただ、できるだけ<strong>ロジックをsetup内にごちゃごちゃ書きたくないので</strong>、<strong>エラーハンドリング</strong>を使いながら頑張ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    createComponent<span class=\"token punctuation\">,</span>\n    reactive<span class=\"token punctuation\">,</span>\n    onBeforeMount<span class=\"token punctuation\">,</span>\n    onMounted<span class=\"token punctuation\">,</span>\n    computed<span class=\"token punctuation\">,</span>\n    ref\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vue/composition-api'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">import</span> toast <span class=\"token keyword\">from</span> <span class=\"token string\">'@nuxtjs/toast'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 独自エラー(404 NotFound)を作ってtoastを出しわける</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">PdfFileNotFoundError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n      Object<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> backendURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://ebook-homebrew.herokuapp.com/'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// ロジック</span>\n  <span class=\"token keyword\">const</span> downloadPDF <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Blob<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>backendURL <span class=\"token operator\">+</span> <span class=\"token string\">'convert/pdf/download'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> uploadId<span class=\"token operator\">:</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>responseType<span class=\"token operator\">:</span> <span class=\"token string\">'blob'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PdfFileNotFoundError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PdfFileNotFound'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">//404 NotFoundだったら独自エラーをthrow</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>type<span class=\"token operator\">:</span> <span class=\"token string\">'application/pdf'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">createComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">setup</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token comment\">//setupでContextを受け取れるので受け取る</span>\n      \n      <span class=\"token comment\">//modulesはContextのrootから取れる</span>\n      <span class=\"token keyword\">const</span> toast <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">.</span>$root<span class=\"token punctuation\">.</span>$toast<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> doDownload <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>filePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          position<span class=\"token operator\">:</span> <span class=\"token string\">'top-center'</span><span class=\"token punctuation\">,</span>\n          duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n          fullWidth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> blob <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">downloadPDF</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>blob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          link<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> <span class=\"token string\">'result.pdf'</span><span class=\"token punctuation\">;</span>\n          link<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">//errorをキャッチ</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">PdfFileNotFoundError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No File!!'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n <span class=\"token comment\">//エラーハンドリングでtoast呼び出し</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token string\">'UnknownError!!'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        state<span class=\"token punctuation\">,</span>\n        doDownload\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n</code></pre></div>\n<p>とまぁ、結局のところmodulesはsetupで使うのですが、stateの処理やAPIコール部分はなるべく外だししました。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>むずかしい。</p>","fields":{"slug":"2019/12/04/nuxt-toast"},"frontmatter":{"tags":["JavaScript","TypeScript","Nuxt.js","Vue.js","modules","toast","CompositionAPI"],"templateKey":"blog-post","slug":"2019/12/04/nuxt-toast","id":null,"title":"Nuxt.jsのmodulesをCompositionAPIで使ってみる(@nuxtjs/toast編)","url":"2019/12/04/nuxt-toast","date":"2019-12-04T23:43:19.895Z","description":"Nuxt.jsのわかりにくい機能の一つ、modulesを使ってみます。","headerImage":"https://i.imgur.com/29nafu5.png","year":"2019","month":"12"}}}],"pathPrefix":"pages","first":false,"last":false,"index":6,"pageCount":11,"additionalContext":{"totalCount":110}}},"staticQueryHashes":["2959249232"]}