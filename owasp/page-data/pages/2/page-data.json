{"componentChunkName":"component---src-templates-index-tsx","path":"/pages/2","result":{"pageContext":{"totalCount":110,"group":[{"node":{"id":"08bc38d6-0eef-58ae-b40f-d8f78b3bb97c","html":"<p>年末ですね。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%B1%9A%E3%82%8C%E4%BB%8A%E5%B9%B4%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AB\">今年の汚れ今年のうちに。</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\">問題点</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%84%E3%81%96%E7%9B%B4%E3%81%99%E6%97%85%E3%81%B8\">いざ直す旅へ</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E5%95%8F%E9%A1%8C%E7%82%B9%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\">そもそも問題点を考える</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">やったこと</a></p>\n<ul>\n<li><a href=\"#dropdown-menu%E3%81%AE%E5%A4%89%E6%9B%B4\">Dropdown menuの変更</a></li>\n<li><a href=\"#column-order%E3%81%AE%E5%88%B6%E9%99%90\">Column orderの制限</a></li>\n<li><a href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7a%E3%82%BF%E3%82%B0%E3%81%ABtext-decoration-underline%E3%81%8C%E3%81%A4%E3%81%8F\">デフォルトでaタグにtext-decoration: underlineがつく</a></li>\n<li><a href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7scroll-behavior-smooth%E3%81%8C%E3%81%A4%E3%81%8F\">デフォルトでscroll-behavior smoothがつく</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#purge%E3%81%AE%E9%87%8E%E6%9C%9B\">Purgeの野望</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%8C%E6%88%90\">完成</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\">最後に</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"今年の汚れ今年のうちに\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%B9%B4%E3%81%AE%E6%B1%9A%E3%82%8C%E4%BB%8A%E5%B9%B4%E3%81%AE%E3%81%86%E3%81%A1%E3%81%AB\" aria-label=\"今年の汚れ今年のうちに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今年の汚れ今年のうちに。</h2>\n<p>ということで、長らく超技術負債となってしまっていた<strong>このブログ</strong>をなんとかします。</p>\n<p>このブログは、Gatsby.jsをGitHub ActionsでビルドしてNetlifyにデプロイして作られているのですが、CSSフレームワークは<strong>Bootstrap v3.5.1</strong>を使って作られていました。</p>\n<p>さすがに<a href=\"https://blog.getbootstrap.com/2019/07/24/lts-plan/\" target=\"_blank\" rel=\"noopener noreferrer\">2019年にサポート対象外</a>となっているフレームワークを使い続けるのはどうかと思っておりましたが、別に動いているしいいかと思い放置していました。</p>\n<p>が、しかしさすがに今年の汚れ今年のうちにと思い立ち、思い切って脱Bootstrapを考え、<a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind</a>とか<a href=\"https://daisyui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">daisyUI</a>とか、<a href=\"https://tailwind-bootstrap-grid.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">tailwind-bootstrap-grid\n</a>とか色々試した結果、めんどくさくなって<strong>Bootstrap v5</strong>に移行することにしました。</p>\n<h2 id=\"問題点\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\" aria-label=\"問題点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題点</h2>\n<p>BootStrap v3で動いていたこのブログのソースを見てもらえばわかるのですが、Gatsby.jsで動いているブログなのに、Bootstrapは <strong>&#x3C;script></strong> タグを使ってCDNライクに使ってました。(CDN配信ではありません。ここらへんも闇です。)</p>\n<p>Gatsby.jsでは<strong>html.js</strong>というファイルを作ることでHTMLファイルのビルド時に任意のタグを埋め込むことができます。</p>\n<p>それを<strong>悪用</strong>して次のようにBootstrapのCSSを <strong>&#x3C;link></strong> タグで、jQueryとBootstrapのJSを <strong>&#x3C;script></strong> タグでそれぞれ配信されたものを使っている形となっておりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">HTML</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  htmlAttributes<span class=\"token punctuation\">,</span>\n  headComponents<span class=\"token punctuation\">,</span>\n  bodyAttributes<span class=\"token punctuation\">,</span>\n  preBodyComponents<span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">,</span>\n  postBodyComponents<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>html <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>htmlAttributes<span class=\"token punctuation\">}</span> lang<span class=\"token operator\">=</span><span class=\"token string\">\"ja\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>link\n        rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span>\n        href<span class=\"token operator\">=</span><span class=\"token string\">\"/vendors/css/bootstrap.min.custom.css\"</span> <span class=\"token comment\">// Bootstrap cssを利用</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>headComponents<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>body <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>bodyAttributes<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>preBodyComponents<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>div\n        key<span class=\"token operator\">=</span><span class=\"token string\">\"body\"</span>\n        id<span class=\"token operator\">=</span><span class=\"token string\">\"___gatsby\"</span>\n        dangerouslySetInnerHTML<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">__html</span><span class=\"token operator\">:</span> body <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>postBodyComponents<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"/vendors/js/jquery-3.5.1.slim.custom.min.js\"</span> defer <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// Bootstrapで利用するjQueryを利用</span>\n      <span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"/vendors/js/bootstrap.custom.min.js\"</span> defer <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\">// Bootstrap JSを利用</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token constant\">HTML</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>これでは下記の問題が発生する形になり大変問題に感じてました。</p>\n<ul>\n<li>npmの管理外になり、パッケージの更新ができない(もはややる気がなかった)</li>\n<li>Bootstrap特有の超でかいCSSをheadでlinkさせてしまっていることでパフォーマンスに悪影響</li>\n<li>deferで読み込むようにしているがBootstrapJS, JQueryも同様に問題</li>\n<li>上記のパフォーマンス問題を解決するために、CSS, JS, JQueryをゴリゴリに改造(Purge)したものをホスティングし、それを配信し使っていた。(もはや...)</li>\n</ul>\n<p>ゴリゴリに改造したCSSとかが正直<a href=\"https://www.nomura.co.jp/terms/japan/sa/A02367.html#:~:text=%E8%8B%B1%E8%AA%9E%E8%A1%A8%E8%A8%98%E3%81%AFsunk%20cost,%E3%82%B5%E3%83%B3%E3%82%AF%E3%82%B3%E3%82%B9%E3%83%88%E5%8A%B9%E6%9E%9C%E3%81%A8%E5%91%BC%E3%81%B6%E3%80%82\" target=\"_blank\" rel=\"noopener noreferrer\">サンクコスト</a>になっており、かつブログのレイアウトを変えたくない気持ちもあったため長らく放置されることになったのです。</p>\n<p>余談ですが、サンクコストって最近言葉知りました。</p>\n<h2 id=\"いざ直す旅へ\" style=\"position:relative;\"><a href=\"#%E3%81%84%E3%81%96%E7%9B%B4%E3%81%99%E6%97%85%E3%81%B8\" aria-label=\"いざ直す旅へ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>いざ直す旅へ</h2>\n<p>ということで早速直していきましょう。冒頭でもお話しましたが、やはり最近のトレンド的に<a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind</a>で行きたいですよね!!!!!! (行きたいです〜)</p>\n<p>というわけで<a href=\"https://tailwindcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Tailwind</a>を利用する決断をするのですがやってみて次のような悩みが出てきました。</p>\n<p><strong>膨大に作ってしまったコンポーネントをUtility classにするのだるい</strong></p>\n<p>はい...ぶっちゃけそういった悩みが出ました。困りましたね...。なんとかならないものでしょうか...。</p>\n<p>探していたら、<a href=\"https://daisyui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">daisyUI</a>というBootstrapライクなUtility classがあったので使ってみましたが、自分の環境だとほぼ置き換えなしでできそうなのがボタンくらいでした。</p>\n<p>加えてめんどくさいのはこのブログの<strong>Gridシステム</strong>です。ある意味Bootstrapから抜けることのできない一番の理由がGridかもしれません。いや...ちゃんと作り直せばいいだけなんですけどね。</p>\n<p>困り果てていると<a href=\"https://tailwind-bootstrap-grid.netlify.app/\" target=\"_blank\" rel=\"noopener noreferrer\">tailwind-bootstrap-grid</a>というまたもや便利そうなものが出てくるじゃあありませんか。しかしこれも導入を断念しました。</p>\n<p>理由はこのブログのカスタムCSSを管理しているSASSとの相性が悪いことで、ビルドすると次のようなエラーが出てきてしまうことです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ModuleBuildError: Module build failed (from ./node_modules/postcss-loader/dist/cjs.js): TypeError: config is not a function</code></pre></div>\n<p>node-sassやめてPostCSSにすれば直りそうですが、年末にCSSをいじりまくるときっと辛いと思うので断念することにしました。</p>\n<h2 id=\"そもそも問題点を考える\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E5%95%8F%E9%A1%8C%E7%82%B9%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\" aria-label=\"そもそも問題点を考える permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>そもそも問題点を考える</h2>\n<p>そもそもの話ですが、Tailwind化が目的ではなくBootstrap v3をなんとかしたいことが問題でしたので、いっそのことBootstrapを問題ないバージョンまでバージョンアップすればいいと気が付きました。</p>\n<p>そうと決まれば、Bootstrap v5からはjQueryを使わなくてよくなっていたのでいっそのことv3 => v5のビックバンリライトを実施することにしました。</p>\n<h2 id=\"やったこと\" style=\"position:relative;\"><a href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\" aria-label=\"やったこと permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>やったこと</h2>\n<p>まず、html.jsでの <strong>&#x3C;script></strong> タグでのBootstrap利用をやめました。</p>\n<p>Gatsby.jsでは<strong>gatsby-browser.js</strong>を使って、ブラウザ側で利用したいモジュールを設定できますのでこちらにCSSとJSをimportするようにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'./src/styles/global.scss'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Dropdown <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'bootstrap/dist/js/bootstrap'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//　必要なJSモジュールはDropdownなので</span>\n\n<span class=\"token comment\">// global.scssには @import \"~bootstrap/scss/bootstrap.scss\"; という形でBootstrapのCSSをimportする</span></code></pre></div>\n<p>これだけでうまくいくかなーと思いましたが、さすがに甘くありませんでした。ちょっとコードの方も手直しします。</p>\n<h3 id=\"dropdown-menuの変更\" style=\"position:relative;\"><a href=\"#dropdown-menu%E3%81%AE%E5%A4%89%E6%9B%B4\" aria-label=\"dropdown menuの変更 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dropdown menuの変更</h3>\n<p>Dropdown menuのtoggle buttonの実装方法がちょっとだけ変わってました。 <strong>data-toggle</strong>と<strong>data-target</strong>がそれぞれ<strong>data-bs-toggle</strong>、<strong>data-bs-target</strong>に変わっただけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// before</span>\n  <span class=\"token operator\">&lt;</span>button\n   className<span class=\"token operator\">=</span><span class=\"token string\">\"navbar-toggler\"</span>\n   type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span>\n   data<span class=\"token operator\">-</span>toggle<span class=\"token operator\">=</span><span class=\"token string\">\"collapse\"</span>\n   aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"navbar-toggler\"</span>\n   data<span class=\"token operator\">-</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"#navbarSupportedContent\"</span>\n  <span class=\"token operator\">></span>\n        \n<span class=\"token comment\">// after</span>\n  <span class=\"token operator\">&lt;</span>button\n   className<span class=\"token operator\">=</span><span class=\"token string\">\"navbar-toggler\"</span>\n   type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span>\n   data<span class=\"token operator\">-</span>bs<span class=\"token operator\">-</span>toggle<span class=\"token operator\">=</span><span class=\"token string\">\"collapse\"</span>\n   aria<span class=\"token operator\">-</span>label<span class=\"token operator\">=</span><span class=\"token string\">\"navbar-toggler\"</span>\n   data<span class=\"token operator\">-</span>bs<span class=\"token operator\">-</span>target<span class=\"token operator\">=</span><span class=\"token string\">\"#navbarSupportedContent\"</span>\n  <span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"column-orderの制限\" style=\"position:relative;\"><a href=\"#column-order%E3%81%AE%E5%88%B6%E9%99%90\" aria-label=\"column orderの制限 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Column orderの制限</h3>\n<p>Columnの順番を制御できるOrderについて今までは無邪気にorder-10とかできたのですが、order-5までの制限となっておりました。なのでこちらも修正します。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// before</span>\n    <span class=\"token operator\">&lt;</span>Sidebar <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col-xl-7 col-lg-6 col-md-12 col-sm-12 order-10 content\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>html<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n \n<span class=\"token comment\">// after</span>\n    <span class=\"token operator\">&lt;</span>Sidebar <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"col-xl-7 col-lg-6 col-md-12 col-sm-12 order-2 content\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content post<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>html<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<h3 id=\"デフォルトでaタグにtext-decoration-underlineがつく\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7a%E3%82%BF%E3%82%B0%E3%81%ABtext-decoration-underline%E3%81%8C%E3%81%A4%E3%81%8F\" aria-label=\"デフォルトでaタグにtext decoration underlineがつく permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デフォルトでaタグにtext-decoration: underlineがつく</h3>\n<p>といういらない変更が入っていたので、こちらは<strong>global.scss</strong>でnoneを上書きします。</p>\n<p><img src=\"https://i.imgur.com/RRvEIHy.png\" alt=\"underlineがつく\"></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">a</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"デフォルトでscroll-behavior-smoothがつく\" style=\"position:relative;\"><a href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7scroll-behavior-smooth%E3%81%8C%E3%81%A4%E3%81%8F\" aria-label=\"デフォルトでscroll behavior smoothがつく permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>デフォルトでscroll-behavior smoothがつく</h3>\n<p>というおせっかいが入っているのでこちらもglobal.scssで無効化します。別にあってもいいかなとも思ったのですが、画像の<strong>Lazy loading</strong>との相性が最悪で遷移先のページでうまく画像を読み込んでくれなかったので無効化します。</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">scroll-behavior</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>あとは細かいレイアウト崩れをちょこちょこ直して完成です。</p>\n<h2 id=\"purgeの野望\" style=\"position:relative;\"><a href=\"#purge%E3%81%AE%E9%87%8E%E6%9C%9B\" aria-label=\"purgeの野望 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Purgeの野望</h2>\n<p>さてこれでBootstrap v5化はできました。Tailwindを使おうと思った理由はPurgeだったので、Purgeしてしまいます。</p>\n<p>Gatsby.jsではCSSのPurgeに<a href=\"https://www.gatsbyjs.com/plugins/gatsby-plugin-purgecss/\" target=\"_blank\" rel=\"noopener noreferrer\">gatsby-plugin-purgecss</a>が利用できます。今回はglobal.scssにBootstrapのCSSをimportしているので<strong>gatsby-config.js</strong>に次のように設定してあげることで利用してないCSS RuleをPurgeしてくれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">gatsby-plugin-purgecss</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">printRejected</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">develop</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">purgeOnly</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'src/styles/global.scss'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// global.scssを指定</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"完成\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%88%90\" aria-label=\"完成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成</h2>\n<p>というわけで完成しました。</p>\n<p>今あなたが見ているブログがまさに<strong>Bootstrap v5で動いているブログ</strong>なわけです。</p>\n<p>ちなみに、Purgeの効果あってかわかりませんが、Lighthouseのパフォーマンススコアは次のとおりでした。</p>\n<p><img src=\"https://i.imgur.com/FX0kdBo.png\" alt=\"lighthouse\"></p>\n<p>みなさまこのブログは <strong>なんでTypeScriptでリライトしないのか？</strong> という疑問があると思うのですが、それもこのBootstrap問題がちょっと絡んでいるので、この際頑張ってTypeScript化しようかなと思ってます。</p>\n<h2 id=\"最後に\" style=\"position:relative;\"><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\" aria-label=\"最後に permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>最後に</h2>\n<p>本年もお世話になりました。来年もよろしくおねがいします!!!</p>\n<p><img src=\"https://i.imgur.com/mwxtvWim.png\" alt=\"tora\"></p>","fields":{"slug":"2021/12/31/blog-bootstrap"},"frontmatter":{"tags":["JavaScript","BootStrap","年越し"],"templateKey":"blog-post","slug":"2021/12/31/blog-bootstrap","id":null,"title":"今年も最後だからBlogのBootstrap v3を何とかする","url":"2021/12/31/blog-bootstrap","date":"2021-12-31T07:09:52.428Z","description":"長らくBlogのスタイルを支えてきたBootstrap v3が技術負債になってしまっていたのでとりあえずBootstrap v5にしたお話。","headerImage":"https://i.imgur.com/nVO9loz.png","year":"2021","month":"12"}}},{"node":{"id":"fb9c2cab-81f9-5fdc-89d1-65249340f0a8","html":"<p>package.jsonはNodeのつらいところ。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに</a></li>\n<li><a href=\"#depcheck\">depcheck</a></li>\n<li><a href=\"#%E3%81%93%E3%82%8C%E3%82%92github-actions%E3%81%AB%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%9F%E3%81%84\">これをGitHub Actionsに組み込みたい</a></li>\n<li><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">まとめ</a></li>\n</ul>\n</div>\n<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>JavaScriptやTypeScriptでのシステム開発に必要不可欠なNode.js Package Manager、いわゆるnpmはしばしばライブラリサイズが大きくなりがちなことが問題になります。</p>\n<p><img src=\"https://i.imgur.com/yxDDBOX.jpg\" alt=\"img\"></p>\n<p>もちろんこちらの問題はさまざまな議論が尽くされているわけですし、今更どうこう言うつもりはないです。</p>\n<iframe loading=\"lazy\" width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/SHIci8-6_gs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"Tink: A Next Generation Package Manager by Kat Marchán | JSConf EU 2019\"></iframe>\n<p>上記問題を解決する方法はいろいろあると思いますが、私のような末端開発者にはとりあえず使ってないライブラリを削除する、くらいしかできないのでそれらを加速させる方法を考えていきましょう。</p>\n<h2 id=\"depcheck\" style=\"position:relative;\"><a href=\"#depcheck\" aria-label=\"depcheck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>depcheck</h2>\n<p><a href=\"https://github.com/depcheck/depcheck\" target=\"_blank\" rel=\"noopener noreferrer\">depcheck</a>とはnpmでパッケージ管理されたプロジェクトについて、各ライブラリの依存関係がどのように使用されているか、どの依存関係が使われていないか、package.jsonからどの依存関係が欠落しているかを確認するためのツールです。</p>\n<p>プロジェクトルートでnpxを使って、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx depcheck</code></pre></div>\n<p>で実行することで簡単に結果を得ることができます。例えば<a href=\"https://github.com/tubone24/portfolio\" target=\"_blank\" rel=\"noopener noreferrer\">こちらのレポジトリ</a>で実行すると、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">> npx depcheck\nnpx: installed 120 in 12.136s\n\nUnused dependencies\n* @fortawesome/free-regular-svg-icons\n* @fortawesome/free-solid-svg-icons\n* react-error-overlay\n* react-flickr-hero\n* sharp\n* tween\nUnused devDependencies\n* @storybook/addon-a11y\n* @storybook/addon-controls\n* @storybook/addon-docs\n* @storybook/addon-essentials\n* @storybook/addon-info\n* @storybook/addon-knobs\n* @storybook/addon-links\n* @storybook/addon-storyshots\n* @types/aws-lambda\n* @types/jest\n* @types/node\n* @types/react-fontawesome\n* @types/storybook__addon-info\n* babel-preset-gatsby\n* babel-preset-react-app\n* greenkeeper-lockfile\n* identity-obj-proxy\n* netlify-cli\n* netlify-lambda\n* react-test-renderer\n* stylelint-config-idiomatic-order\n* stylelint-config-prettier\n* stylelint-config-recommended\n* stylelint-config-styled-components\n* stylelint-processor-styled-components\n* ts-dedent\n* ts-jest\n* tslint-react\nMissing dependencies\n* build-url: .\\src\\components\\flickrHero.tsx\n* @fortawesome/fontawesome-common-types: .\\src\\components\\socialIcons.tsx\n* axios: .\\functions\\src\\contact.js\n* @babel/preset-react: .\\.storybook\\main.js\n* @babel/preset-env: .\\.storybook\\main.js\n* @babel/plugin-proposal-class-properties: .\\.storybook\\main.js\n* babel-plugin-remove-graphql-queries: .\\.storybook\\main.js</code></pre></div>\n<p>このようにpackage.jsonで定義されているにも関わらずコード上で使われてないライブラリ、もしくはコード上で見つかったけどpackage.jsonに定義されてないライブラリを一覧化できます。</p>\n<h2 id=\"これをgithub-actionsに組み込みたい\" style=\"position:relative;\"><a href=\"#%E3%81%93%E3%82%8C%E3%82%92github-actions%E3%81%AB%E7%B5%84%E3%81%BF%E8%BE%BC%E3%81%BF%E3%81%9F%E3%81%84\" aria-label=\"これをgithub actionsに組み込みたい permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>これをGitHub Actionsに組み込みたい</h2>\n<p>やはり、PRを出したときに自動でdepcheckが走るといいですよね。</p>\n<p>そしてその結果を通知してくれたらさらにうれしいですよね。</p>\n<p>そこで、GitHub Actionsを作りました。</p>\n<p><a href=\"https://github.com/marketplace/actions/depcheck-action-with-pr\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/marketplace/actions/depcheck-action-with-pr</a></p>\n<p>使い方は簡単でお手元のGitHub Actionsでまず、Pull RequestをトリガーにしたYAMLを作ります。</p>\n<p>このとき、入力としてGitHub TokenとPRコメントのURLが必要になりますが、これらはGitHub Actionsの環境変数として取得できます。</p>\n<p>どちらもGitHub Actionsの環境変数として取得できます。</p>\n<ul>\n<li>GITHUB_TOKEN\n<ul>\n<li>これはsecrets.GITHUB_TOKENとして取得できます。</li>\n</ul>\n</li>\n<li>PR_COMMENT_URL\n<ul>\n<li>PRイベントの際に、github.event.pull_request.comments_urlから取得できます。</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n      \n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout source code\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> 14.x\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"depcheck\"</span>\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> tubone24/depcheck_action@v1.0.0\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">GITHUB_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.GITHUB_TOKEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">PR_COMMENT_URL</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> github.event.pull_request.comments_url <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>のようにuseすればいいだけ。</p>\n<p>そうすれば、PRコメントとして結果が出力されます。</p>\n<p><img src=\"https://i.imgur.com/x0HzZEF.png\" alt=\"img\"></p>\n<ul>\n<li>Unused dependenciesセクションは、package.jsonのdependenciesで定義されたライブラリが、.js、.ts、.jsx、.tsx、.coffee、.sass、.scss、.vueの各ファイルで使用されていないことを示しています。</li>\n<li>Unused devDpendenciesセクションは、package.jsonのdevDependenciesで定義されたライブラリが各ファイルに存在しないことを示しています。</li>\n<li>Missingセクションは、コードで使用されているライブラリがpackage.jsonに存在していないことを示しています。CDNからインポートされたライブラリや、グローバルに宣言されたライブラリを使用している可能性があります。</li>\n</ul>\n<h2 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h2>\n<p>自分が欲してたものなのでサクッと作ってみたが、めんどくさかったので<a href=\"https://docs.github.com/ja/actions/creating-actions/creating-a-docker-container-action\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub ActionsはDockerで作ってしまった</a>ので、主にスピード面で課題があります。</p>\n<p>一応、base imageを作って高速化はしてますが、Full JavaScriptで作って、もっと丁寧に作ってもよかったと大後悔。</p>","fields":{"slug":"2021/11/21/depcheck"},"frontmatter":{"tags":["JavaScript","depcheck","GitHub"],"templateKey":"blog-post","slug":"2021/11/21/depcheck","id":null,"title":"depcheckをGitHub Actionで使い、PRコメントに結果を出力させる","url":"2021/11/21/depcheck","date":"2021-11-21T11:16:54.648Z","description":"depcheckを使うと、package.jsonで定義されたライブラリがコードで使われているかどうかを確認することができます。確認の結果は、以下の例のように、GitHub Actions の実行時に PR コメントでユーザーに通知することができます。","headerImage":"https://i.imgur.com/x0HzZEF.png","year":"2021","month":"11"}}},{"node":{"id":"7a422f30-1e28-5924-8e15-171b22382851","html":"<p>モ～。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E3%83%A4%E3%82%AF%E3%81%AE%E6%AF%9B%E5%88%88%E3%82%8Ayak-shaving\">ヤクの毛刈り(Yak shaving)</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%83%A4%E3%82%AF%E3%81%AE%E7%94%9F%E6%85%8B\">ヤクの生態</a></p>\n<ul>\n<li><a href=\"#%E3%81%8B%E3%82%8F%E3%81%84%E3%81%84%E6%98%A0%E5%83%8F\">かわいい映像</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%85%9C\">兜</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%83%A9%E3%83%94%E3%83%A5%E3%82%BF\">ラピュタ</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"ヤクの毛刈りyak-shaving\" style=\"position:relative;\"><a href=\"#%E3%83%A4%E3%82%AF%E3%81%AE%E6%AF%9B%E5%88%88%E3%82%8Ayak-shaving\" aria-label=\"ヤクの毛刈りyak shaving permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ヤクの毛刈り(Yak shaving)</h2>\n<p>という言葉があります。</p>\n<p><a href=\"https://dic.nicovideo.jp/a/%E3%83%A4%E3%82%AF%E3%81%AE%E6%AF%9B%E5%88%88%E3%82%8A\" target=\"_blank\" rel=\"noopener noreferrer\">ニコニコ大百科</a>によるとヤクの毛狩りとは<strong>泥沼状態</strong>であるらしいです。</p>\n<p>意味としては問題を解決しようとすると次々問題が出てくるモグラタタキのような状態を形容するのですが、色々文献を読むと次の2つの理由があるみたいです。</p>\n<ul>\n<li>ヤクの毛が長く、太く、固く、縮れていて、ウールにするまでにたくさんのめんどくさい行程があるから</li>\n<li>ヤクの毛が長くてたくさんあるので単純に刈りきるまでに大きな工数がかかるから</li>\n</ul>\n<p>たぶんどっちも正解なんでしょうけど、<a href=\"http://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipediaにある出典</a>を読むにおそらく前者が近いんじゃないかなと思ってます。</p>\n<h2 id=\"ヤクの生態\" style=\"position:relative;\"><a href=\"#%E3%83%A4%E3%82%AF%E3%81%AE%E7%94%9F%E6%85%8B\" aria-label=\"ヤクの生態 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ヤクの生態</h2>\n<p>とまぁ、ヤクの毛狩りが大好きなIT屋さんが多いですが、そもそもヤクがどんな動物か日本人にはあまりなじみがないこともあり、即答できる人は少なく感じます。</p>\n<p>Wikiによると、「ヤク」の語はチベット語「གཡག་」(g-yag) に由来するらしいですが、チベット語では雄のヤクだけを指す言葉で、メスはディというらしいです。</p>\n<p>えっ...！知らなかった...。</p>\n<p>チベットなどの山岳地帯に暮らしているウシの仲間で群れで過ごし、早朝と夕方に山地の草類を求めて歩きまわります。同じくチベットでは家畜として利活用されており、乳をバターにしたり、食用肉にしたりうんちを燃料にしたり、毛を編み物に利用したりするそうです。</p>\n<p><img src=\"https://i.imgur.com/ohJWElY.jpg\" alt=\"img\"></p>\n<p>特徴はヤクの毛刈りというようにながーい毛です。山岳地帯の寒い気候に対応するように持っているウェアで、換毛はしないそうです。なので暑いのは苦手。</p>\n<h3 id=\"かわいい映像\" style=\"position:relative;\"><a href=\"#%E3%81%8B%E3%82%8F%E3%81%84%E3%81%84%E6%98%A0%E5%83%8F\" aria-label=\"かわいい映像 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>かわいい映像</h3>\n<iframe loading=\"lazy\" width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/i6bdPbfH2TE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"インドやネパールの高地に住むヤク\"></iframe>\n<p>かわいいですね!!!!!！</p>\n<h2 id=\"兜\" style=\"position:relative;\"><a href=\"#%E5%85%9C\" aria-label=\"兜 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>兜</h2>\n<p>兜のファサーってしている毛。あれ、ヤクの毛らしいですよ。</p>\n<h2 id=\"ラピュタ\" style=\"position:relative;\"><a href=\"#%E3%83%A9%E3%83%94%E3%83%A5%E3%82%BF\" aria-label=\"ラピュタ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ラピュタ</h2>\n<p>ヤクらしいですよ!!</p>\n<p><img src=\"https://i.imgur.com/2smiPg1.jpg\" alt=\"img\"></p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>結論がよくわからなくなってきましたが、ともかくかわいいですね。</p>","fields":{"slug":"2021/09/22/yak"},"frontmatter":{"tags":["ヤク"],"templateKey":"blog-post","slug":"2021/09/22/yak","id":null,"title":"ヤクの毛刈りから考えるヤクの可愛さ","url":"2021/09/22/yak","date":"2021-09-21T15:00:28.237Z","description":"ヤクの毛刈りという言葉がIT業界にあってだな...","headerImage":"https://i.imgur.com/qBtbBN5.jpg","year":"2021","month":"09"}}},{"node":{"id":"67afdae9-bf1f-591f-8c9b-b72773ab4edb","html":"<p>体重が落ちてきました！</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AEtypescript%E5%8C%96\">スクリプトのTypeScript化</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#deno%E3%81%A8%E3%81%AF\">Denoとは？</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\">書いたコード</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h3 id=\"スクリプトのtypescript化\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AEtypescript%E5%8C%96\" aria-label=\"スクリプトのtypescript化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スクリプトのTypeScript化</h3>\n<p>前回<a href=\"https://blog.tubone-project24.xyz/2021/07/27/hasura-graphql#%E5%8F%8D%E7%9C%81\" target=\"_blank\" rel=\"noopener noreferrer\">Hasura CloudのGraphQLが便利すぎた話</a>の記事の最後の方でSlackにダッシュボードの情報をあげるスクリプトを作って定期的に実行させることをしました。</p>\n<p>がしかし、あろうことかスクリプトは<strong>TypeScript</strong>じゃなく、**JavaScript(ES module)**でした。</p>\n<p>どうして、TypeScriptにしなかったかというと、</p>\n<ul>\n<li>Projectで設定しているtsconfigをいじりたくなかった(Next.jsと単なるNode.jsスクリプトを共存させたくなかった)</li>\n<li>Buildしたdistの取り回しがめんどくさい</li>\n<li>ならばとDenoを使おうと思ったが色々失敗した</li>\n</ul>\n<p>という理由で、まぁただの付加機能でしかないのでmjsでぱぱっと作ってしまった、というわけです。</p>\n<p>今回はロジックは特に変えずにランタイムをDenoに変更し、ついでにTypeScript化させちゃいましょう。</p>\n<h2 id=\"denoとは\" style=\"position:relative;\"><a href=\"#deno%E3%81%A8%E3%81%AF\" aria-label=\"denoとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Denoとは？</h2>\n<p>Denoとは、Node.jsの作者であるRyan Dahlによって作られた、新しいJavaScript/TypeScriptランタイムです。</p>\n<p>Node.jsに関する10の反省点という講演のなかで氏がNode.jsのここがまずかった！ということをあげて、Denoのプロトタイプ版を出したのが始まりとか。</p>\n<p>ちなみに、Nodeを並べ替えるとDeno。</p>\n<p>ちなみにアイコンは恐竜らしい。ダイナソーでDeno。</p>\n<p>アイコンについてのおもしろ話は、</p>\n<iframe loading=\"lazy\" src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fhashrock.hatenablog.com%2Fentry%2F2019%2F02%2F04%2F040505\" title=\"Deno公式にアニメロゴが採用されたことと、許容的なリーダーの話 - No Regrets in Bathing\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe>\n<p>を参照しよう！直接作者と会話できるのはいいですね。</p>\n<h2 id=\"書いたコード\" style=\"position:relative;\"><a href=\"#%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"書いたコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>書いたコード</h2>\n<p>実際、Denoで動かそうとNodeで動かそうとあまり違いがないと思ってたのですが細かい違いがありました。(初心者)</p>\n<p>まず、基本的なことですがビルトインの機能がすべて<strong>Deno</strong>に内包されてます。</p>\n<p>なので環境変数は、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const imgurClientId = Deno.env.get('IMGUR_CLIENT_ID') as string;</code></pre></div>\n<p>のように取得します。<strong>process.env</strong>ではないんですね。\r\nあとas stringという記述がありますがas stringしておかないと、fetch関数に渡すときTypeErrorとなってしまいます。</p>\n<p>Denoにはnpmやらpackage.jsonのようなモジュール管理がランタイムに内蔵されているため、importはURLで参照します。</p>\n<p>もちろんCommonJSのrequireなんてありません。なので、requireしていた部分も書き直しです。</p>\n<p>やはり便利だなと思ったのは<strong>サーバーでfetchが使える</strong>ことでしょうか？cross-fetchとか入れないでいいんですよ！</p>\n<p>(でもaxios使いたいマンなので、喜び半分くらいですね。)</p>\n<p>あと便利だなと思ったのはtop levelのコードで<strong>await</strong>って書いていいことですね。これはありがたい。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'https://deno.land/std/encoding/base64.ts'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URI_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://xxxxx.hasura.app/v1/graphql'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">'./cypress/screenshots/screenshot.spec.js/screenShot.png'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> dashBoardUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://plant-check-graph.vercel.app/'</span>\r\n<span class=\"token keyword\">const</span> slackWebhookUrl <span class=\"token operator\">=</span> Deno<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SLACK_WEBHOOK_URL'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> imgurClientId <span class=\"token operator\">=</span> Deno<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IMGUR_CLIENT_ID'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> readImageData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Deno<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> encodedData <span class=\"token operator\">=</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>readImageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> imgurPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  image<span class=\"token operator\">:</span> encodedData<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.*base64,'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'base64'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> imgurHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Client-ID </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imgurClientId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> imgurRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.imgur.com/3/image'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> imgurHeaders<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>imgurPayload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> imgurJson <span class=\"token operator\">=</span> imgurRes<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> imgurData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> imgurJson\r\n<span class=\"token keyword\">const</span> imgurLink <span class=\"token operator\">=</span> imgurData<span class=\"token punctuation\">.</span>link\r\n\r\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  query<span class=\"token operator\">:</span> <span class=\"token string\">'query MyQuery {\\nraspi_plant_checker(order_by: {timestamp: desc}, limit: 1) {\\n      light\\n      moisture\\n      timestamp\\n      id\\n  }\\n}'</span><span class=\"token punctuation\">,</span>\r\n  variables<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\r\n  operationName<span class=\"token operator\">:</span> <span class=\"token string\">'MyQuery'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> hasuraHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> hasuraRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URI_ENDPOINT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> hasuraHeaders<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> hasuraJson <span class=\"token operator\">=</span> hasuraRes<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> hasuraData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> hasuraJson\r\n<span class=\"token keyword\">const</span> latestHasuraData <span class=\"token operator\">=</span> hasuraData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>raspi_plant_checker<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>latestHasuraData<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> slackPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*How are you?* \\n&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dashBoardUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|Click here> for details! \\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imgurLink<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n  attachments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n        <span class=\"token punctuation\">{</span>\r\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'Moisture'</span><span class=\"token punctuation\">,</span>\r\n          value<span class=\"token operator\">:</span> latestHasuraData<span class=\"token punctuation\">.</span>moisture<span class=\"token punctuation\">,</span>\r\n          short<span class=\"token operator\">:</span> <span class=\"token string\">'true'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">{</span>\r\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'Light'</span><span class=\"token punctuation\">,</span>\r\n          value<span class=\"token operator\">:</span> latestHasuraData<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\r\n          short<span class=\"token operator\">:</span> <span class=\"token string\">'true'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">]</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> slackHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>slackWebhookUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> slackHeaders<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>slackPayload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>使いどころはまだ限られる気もしますが、徐々にDenoに慣れていこうと思います!!!！</p>","fields":{"slug":"2021/07/28/deno-slack"},"frontmatter":{"tags":["Deno","GraphQL","Slack"],"templateKey":"blog-post","slug":"2021/07/28/deno-slack","id":null,"title":"Denoを使ってGraphQLを叩きながらSlackに投稿する","url":"2021/07/28/deno-slack","date":"2021-07-27T15:07:09.874Z","description":"以前Deno化を断念したSlackアップロードスクリプトをDeno化したというお話し。\n","headerImage":"https://i.imgur.com/iXpteuJ.jpg","year":"2021","month":"07"}}},{"node":{"id":"b9d74dd9-1196-5822-9f87-a901a8c2bbe1","html":"<p>勉強しようと思うと掃除してしまうのはなんででしょうかね。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#hasura-cloud\">Hasura Cloud</a></li>\n<li><a href=\"#hasura\">Hasura</a></li>\n<li><a href=\"#postgresql%E3%81%AE%E6%BA%96%E5%82%99%E3%81%AFheroku%E3%81%A7\">PostgreSQLの準備はHerokuで</a></li>\n<li><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\">アーキテクチャ</a></li>\n<li><a href=\"#db%E3%81%A8%E3%81%AE%E6%8E%A5%E7%B6%9A\">DBとの接続</a></li>\n<li><a href=\"#python%E3%81%A7%E5%AE%9A%E6%9C%9F%E7%9A%84%E3%81%ABgraphql%E3%81%AEmutation%E3%82%92%E3%81%99%E3%82%8B\">Pythonで定期的にGraphQLのmutationをする</a></li>\n<li><a href=\"#%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">ロールを設定する</a></li>\n<li><a href=\"#nextjsreact-typescript%E3%81%8B%E3%82%89graphql%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">Next.js(React TypeScript)からGraphQLを利用する</a></li>\n<li><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F\">できた</a></li>\n<li><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91-slack%E3%81%AB%E6%AF%8E%E6%97%A5%E7%8A%B6%E6%B3%81%E3%82%92%E3%82%B0%E3%83%A9%E3%83%95%E4%BB%98%E3%81%8D%E3%81%A7%E6%8A%95%E7%A8%BF%E3%81%99%E3%82%8B\">おまけ Slackに毎日状況をグラフ付きで投稿する</a></li>\n<li><a href=\"#%E5%8F%8D%E7%9C%81\">反省</a></li>\n</ul>\n</div>\n<h2 id=\"hasura-cloud\" style=\"position:relative;\"><a href=\"#hasura-cloud\" aria-label=\"hasura cloud permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hasura Cloud</h2>\n<p>皆さんは<a href=\"https://hasura.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Hasura Cloud</a>を知ってますか？</p>\n<p>PostgreSQLやMS SQL Serverに接続するだけで、DBのテーブルから<strong>GraphQLエンドポイント</strong>を作ってくれる、というSaaS(API as a Service)です。</p>\n<p>今更ながら最近この便利なサービスを知ったのでご紹介がてらゴーミー(Go Me!)サービスを作っていきます。</p>\n<h2 id=\"hasura\" style=\"position:relative;\"><a href=\"#hasura\" aria-label=\"hasura permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hasura</h2>\n<p>Hasura自体はOSSで<a href=\"https://github.com/hasura/graphql-engine\" target=\"_blank\" rel=\"noopener noreferrer\">hasura/graphql-engine</a>にて公開されております。Dockerコンテナでコンソールも立ち上げることができるので気軽な検証はDockerを使うのもありだと思います。</p>\n<p>ですが、Hasura Cloudが<strong>Hobby用に無料枠を公開している</strong>のでそちらを今回使っていきたいと思います。</p>\n<p><img src=\"https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif\" alt=\"img\"></p>\n<p>↑公式ドキュメントからの引用ですがこんな感じでWebコンソールでPostgreSQLに接続して簡単にGraphQLのエンドポイントを作れるようになるらしいです。</p>\n<h2 id=\"postgresqlの準備はherokuで\" style=\"position:relative;\"><a href=\"#postgresql%E3%81%AE%E6%BA%96%E5%82%99%E3%81%AFheroku%E3%81%A7\" aria-label=\"postgresqlの準備はherokuで permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PostgreSQLの準備はHerokuで</h2>\n<p>Hasuraを使うためにPostgreSQLを作らなければいけません。もちろんお金はないので無料で作れるところを探します。</p>\n<p>これは個人Webサービス開発者なら定石過ぎて逆に嫌煙されるくらい有名な手段かもしれませんが、今回はHerokuの<a href=\"https://data.heroku.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Database</a>にてPostgreSQLを作っていきます。</p>\n<p>作成は非常に簡単で、HerokuのダッシュボードからElementsを選択し、Addonsで<a href=\"https://elements.heroku.com/addons/heroku-postgresql\" target=\"_blank\" rel=\"noopener noreferrer\">Heroku-PostgreSQL</a>を選択するだけです。</p>\n<p><img src=\"https://i.imgur.com/hkpshVql.png\" alt=\"ma\"></p>\n<p>こちらレプリケーションやレコード上限がありますが、無料枠があります。<strong>10000レコードを超えると課金対象</strong>になるので、ならないように定期レコード削除機能も開発する必要がありますね。</p>\n<h2 id=\"アーキテクチャ\" style=\"position:relative;\"><a href=\"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3\" aria-label=\"アーキテクチャ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>アーキテクチャ</h2>\n<p><img src=\"https://i.imgur.com/iz9IpHf.png\" alt=\"arch\"></p>\n<p>今回はこのようなアーキテクチャにします。以前<a href=\"https://blog.tubone-project24.xyz/2020/05/10/plant-check\" target=\"_blank\" rel=\"noopener noreferrer\">Raspberry PIを使って植物の水やり監視システムを作る</a>で作ったラズパイ水やり管理システムのメトリックを定期的に収集してHasuraのGraphQL mutationを介してHeroku PostgreSQLに書き込み、それをVercel + Next.jsで作ったダッシュボードでこれまたHasura GraphQLを介してQuery取得し可視化する、というものです。</p>\n<p><del>別に毎日水やりすればいいだけなのですが...</del></p>\n<h2 id=\"dbとの接続\" style=\"position:relative;\"><a href=\"#db%E3%81%A8%E3%81%AE%E6%8E%A5%E7%B6%9A\" aria-label=\"dbとの接続 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DBとの接続</h2>\n<p>Hasura CloudとPostgreSQLを接続するために先ほど作成したHeroku PostgreSQLの接続情報を確認します。DB自体はHerokuダッシュボードのDatabaseから確認できますのでそちらからSetting=>View Crendencialsを選択します。</p>\n<p><img src=\"https://i.imgur.com/TR9WSti.png\" alt=\"ima\"></p>\n<p>こちらの情報を控え、Hasura CloudのコンソールからDataを選択し、新しいDababaseの情報を入れ込みます。執筆しながら気が付いたのですがよく見たらHeroku PostgreSQLが作れるメニューがありますね..。</p>\n<p><img src=\"https://i.imgur.com/vzpBanB.png\" alt=\"ima\"></p>\n<p>無事接続が完了すると、このようにスキーマやテーブルが作れるようになります。</p>\n<p><img src=\"https://i.imgur.com/c1BI53V.png\" alt=\"img\"></p>\n<p>テーブルを作ってみましょう。create tableから簡単に作れます。</p>\n<p><img src=\"https://i.imgur.com/dm0FJPU.png\" alt=\"img\"></p>\n<p>default valueにnow()などの関数が入れられますのでtimestampはこちらで作っちゃうことにしました。便利ですね。</p>\n<p>無事接続ができて適当な行を作ればこのようにメインコンソールからGraphQLが実行できるようになります。</p>\n<p><img src=\"https://i.imgur.com/R0GFe6X.png\" alt=\"img\"></p>\n<p>Query↓</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token definition-query function\">MyQuery</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property-query\">raspi_plant_checker</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">timestamp</span><span class=\"token punctuation\">:</span> <span class=\"token property\">desc</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">light</span>\n    <span class=\"token property\">id</span>\n    <span class=\"token property\">moisture</span>\n    <span class=\"token property\">timestamp</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>結果↓</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"raspi_plant_checker\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"light\"</span><span class=\"token operator\">:</span> <span class=\"token number\">175</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"moisture\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-25T12:17:47.776369+00:00\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"light\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"moisture\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-24T02:48:54.994038+00:00\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"light\"</span><span class=\"token operator\">:</span> <span class=\"token number\">175</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"moisture\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-23T12:51:50.070372+00:00\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"light\"</span><span class=\"token operator\">:</span> <span class=\"token number\">175</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"moisture\"</span><span class=\"token operator\">:</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-23T08:26:12.603547+00:00\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"light\"</span><span class=\"token operator\">:</span> <span class=\"token number\">175</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"moisture\"</span><span class=\"token operator\">:</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2021-07-23T07:54:17.186706+00:00\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>まだロールを設定してないのでリクエストヘッダーにx-hasura-admin-secretを設定しないといけないですがこの状態ですでにエンドポイントURLが使えるようになっております。</p>\n<p>めちゃくちゃ簡単ですね。</p>\n<h2 id=\"pythonで定期的にgraphqlのmutationをする\" style=\"position:relative;\"><a href=\"#python%E3%81%A7%E5%AE%9A%E6%9C%9F%E7%9A%84%E3%81%ABgraphql%E3%81%AEmutation%E3%82%92%E3%81%99%E3%82%8B\" aria-label=\"pythonで定期的にgraphqlのmutationをする permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pythonで定期的にGraphQLのmutationをする</h2>\n<p>PythonのGraphQLクライアントといえば、<a href=\"https://github.com/graphql-python/gql\" target=\"_blank\" rel=\"noopener noreferrer\">gql</a>が有名です。</p>\n<p>基本的にドキュメント通りなのですが、ポイントになるところはヘッダーに<strong>x-hasura-admin-secret</strong>を設定してあげると特に制限なくmutationできますので、Clientで設定してます。本当はちゃんとロール作ったほうがいいですが、JWT認証がめんどくさかったのでadmin使ってしまいました。</p>\n<p>また、mutationでDBにinsertするときは<strong>insert_{{table名}}_one</strong>でできます。さらに、下記の通りvariablesを渡すこともできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> gql <span class=\"token keyword\">import</span> gql<span class=\"token punctuation\">,</span> Client\n<span class=\"token keyword\">from</span> gql<span class=\"token punctuation\">.</span>transport<span class=\"token punctuation\">.</span>requests <span class=\"token keyword\">import</span> RequestsHTTPTransport\n\nHASURA_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://xxxxx\"</span>\nHASURA_SECRET <span class=\"token operator\">=</span> <span class=\"token string\">\"xxxxxxx\"</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">upload_metric_to_hasura</span><span class=\"token punctuation\">(</span>moisture<span class=\"token punctuation\">,</span> light<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span>\n        transport<span class=\"token operator\">=</span>RequestsHTTPTransport<span class=\"token punctuation\">(</span>\n            url<span class=\"token operator\">=</span>HASURA_URL<span class=\"token punctuation\">,</span>\n            use_json<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"x-hasura-admin-secret\"</span><span class=\"token punctuation\">:</span> HASURA_SECRET\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            retries<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        fetch_schema_from_transport<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    query <span class=\"token operator\">=</span> gql<span class=\"token punctuation\">(</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        mutation MyMutation ($light: numeric!, $moisture: numeric!){\n            insert_raspi_plant_checker_one(object: {light: $light, moisture: $moisture}) {\n                id\n                light\n                moisture\n                timestamp\n            }\n        }\n        \"\"\"</span>\n    <span class=\"token punctuation\">)</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"light\"</span><span class=\"token punctuation\">:</span> light<span class=\"token punctuation\">,</span> <span class=\"token string\">\"moisture\"</span><span class=\"token punctuation\">:</span> moisture<span class=\"token punctuation\">}</span>\n    result <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> variable_values<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    \nupload_metric_to_hasura<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>GraphQLだけ切り出すとこんな感じ。</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">        <span class=\"token keyword\">mutation</span> <span class=\"token definition-mutation function\">MyMutation</span> <span class=\"token punctuation\">(</span><span class=\"token variable variable-input\">$light</span><span class=\"token punctuation\">:</span> <span class=\"token property\">numeric</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span> <span class=\"token variable variable-input\">$moisture</span><span class=\"token punctuation\">:</span> <span class=\"token property\">numeric</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property-query property-mutation\">insert_raspi_plant_checker_one</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">object</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">light</span><span class=\"token punctuation\">:</span> <span class=\"token variable variable-input\">$light</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">moisture</span><span class=\"token punctuation\">:</span> <span class=\"token variable variable-input\">$moisture</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">id</span>\n                <span class=\"token property\">light</span>\n                <span class=\"token property\">moisture</span>\n                <span class=\"token property\">timestamp</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>また、今回はHeroku PostgreSQLのレコード制限があるので古いデータは消すことにします。</p>\n<p>なので、同じくmutationでdeleteを実現する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">delete_old_metrics_to_hasura</span><span class=\"token punctuation\">(</span>days_before<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dt_now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span>timezone<span class=\"token punctuation\">.</span>utc<span class=\"token punctuation\">)</span>\n    before_day <span class=\"token operator\">=</span> dt_now <span class=\"token operator\">-</span> timedelta<span class=\"token punctuation\">(</span>days<span class=\"token operator\">=</span>days_before<span class=\"token punctuation\">)</span>\n    dt <span class=\"token operator\">=</span> before_day<span class=\"token punctuation\">.</span>astimezone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isoformat<span class=\"token punctuation\">(</span>timespec<span class=\"token operator\">=</span><span class=\"token string\">'microseconds'</span><span class=\"token punctuation\">)</span>\n    client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span>\n        transport<span class=\"token operator\">=</span>RequestsHTTPTransport<span class=\"token punctuation\">(</span>\n            url<span class=\"token operator\">=</span>HASURA_URL<span class=\"token punctuation\">,</span>\n            use_json<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n            headers<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">\"Content-type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"x-hasura-admin-secret\"</span><span class=\"token punctuation\">:</span> HASURA_SECRET\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            retries<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        fetch_schema_from_transport<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    query <span class=\"token operator\">=</span> gql<span class=\"token punctuation\">(</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        mutation MyMutation ($dt: timestamptz){\n            delete_raspi_plant_checker(where: {timestamp: {_lt: $dt}}) {\n                returning {\n                    id\n                    light\n                    moisture\n                    timestamp\n                }\n            }\n        }\n        \"\"\"</span>\n    <span class=\"token punctuation\">)</span>\n    params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"dt\"</span><span class=\"token punctuation\">:</span> dt<span class=\"token punctuation\">}</span>\n    result <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span> variable_values<span class=\"token operator\">=</span>params<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\ndelete_old_metrics_to_hasura<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>_ltをwhere句で使えるので簡単ですね。↓がGraphQLです。</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">        <span class=\"token keyword\">mutation</span> <span class=\"token definition-mutation function\">MyMutation</span> <span class=\"token punctuation\">(</span><span class=\"token variable variable-input\">$dt</span><span class=\"token punctuation\">:</span> <span class=\"token property\">timestamptz</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token property-query property-mutation\">delete_raspi_plant_checker</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">where</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">timestamp</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token attr-name\">_lt</span><span class=\"token punctuation\">:</span> <span class=\"token variable variable-input\">$dt</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token object\">returning</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token property\">id</span>\n                    <span class=\"token property\">light</span>\n                    <span class=\"token property\">moisture</span>\n                    <span class=\"token property\">timestamp</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"ロールを設定する\" style=\"position:relative;\"><a href=\"#%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\" aria-label=\"ロールを設定する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ロールを設定する</h2>\n<p>今回はNext.jsで作ったフロントから直接Hasuraを叩く必要がありますので、やはりadminのままでは使いにくいので読み込みのみロールを作ることにします。といってもユーザー認証の必要ないanonymousのロールを作り、そこにテーブルのSelect権限だけつける形を取ります。</p>\n<p><img src=\"https://i.imgur.com/gvA0pe2.png\" alt=\"img\"></p>\n<p>まず、テーブル設定画面からpermissionを設定し、とりあえず<strong>anonymous</strong>というユーザーを作ります。</p>\n<p>Hasuraではanonymous接続はデフォルトでOffになっているのでこちらを有効にしていきます。</p>\n<p>プロジェクトコンソールまで戻って、環境変数<strong>HASURA_GRAPHQL_UNAUTHORIZED_ROLE</strong>に先ほど作った<strong>anonymous</strong>を設定します。</p>\n<p><img src=\"https://i.imgur.com/rRAVwPw.png\" alt=\"img\"></p>\n<p>さらに、いたずらにQueryを発行されて無料利用枠を消費されたくないのでリミットをつけます。こちらはコンソールのSecurityから設定できます。</p>\n<p>anonymousはglobalの設定を踏襲することにしますので、globalでそれぞれのリミットを設定して、IPアドレスごとにリミット制御するようにしました。</p>\n<p><img src=\"https://i.imgur.com/FvSFqnx.png\" alt=\"img\"></p>\n<h2 id=\"nextjsreact-typescriptからgraphqlを利用する\" style=\"position:relative;\"><a href=\"#nextjsreact-typescript%E3%81%8B%E3%82%89graphql%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\" aria-label=\"nextjsreact typescriptからgraphqlを利用する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next.js(React TypeScript)からGraphQLを利用する</h2>\n<p>さて、準備ができましたのでいよいよダッシュボードの開発に移ります。</p>\n<p>JavaScriptで使えるGraphQLクライアントといえば<a href=\"https://www.apollographql.com/docs/\" target=\"_blank\" rel=\"noopener noreferrer\">Apollo</a>が有名なので今回はこちらを利用していきます。</p>\n<p>何番煎じかわからないので詳しい解説は抜きにしていきます。下のようにすればうまく取れるはずです。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient<span class=\"token punctuation\">,</span> InMemoryCache<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URI_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"https://xxxxxxxxxxxx.hasura.app/v1/graphql\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token operator\">:</span> <span class=\"token constant\">URI_ENDPOINT</span><span class=\"token punctuation\">,</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> Table <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPlantData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      query<span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">          \n          query MyQuery {\n              raspi_plant_checker {\n                  id\n                  light\n                  moisture\n                  timestamp\n              }\n          }\n      </span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> plantCheckerData <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>raspi_plant_checker<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> light<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span> moisture<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>moisture<span class=\"token punctuation\">,</span> timestamp<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> plantCheckerData\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>省略<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ちょっと詰まったなと思ったところはAppoloから取得したGraphQLの結果にはQueryで指定した項目以外に[[Prototype]]が付いてきます。今回取得した値をrecoilを使って状態管理しようと思ったのですが、このprototypeが邪魔でrecoilがうまく動かなかったので、mapで配列を再定義している、というわけです。</p>\n<p>他はmeterial table使ったり、chart.js使ったりしてますがこちらは以前作った<a href=\"https://blog.tubone-project24.xyz/2021/01/11/vercel-next\" target=\"_blank\" rel=\"noopener noreferrer\">Next.jsとVercelとRecoilとMaterial Tableを使ってAWSのステータスダッシュボードを作ってみた話</a>のパクリコードなので解説は割愛します。</p>\n<h2 id=\"できた\" style=\"position:relative;\"><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F\" aria-label=\"できた permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>できた</h2>\n<p>こんな感じでできました。我が家の植物情報なんてほかの人は興味なさそうですがVercelにあげて公開することにしました。</p>\n<p><a href=\"https://plant-check-graph.vercel.app/\" target=\"_blank\" rel=\"noopener noreferrer\">https://plant-check-graph.vercel.app/</a></p>\n<p><img src=\"https://i.imgur.com/YznBG45.png\" alt=\"img\"></p>\n<p>ちょっと失敗したなと思ったのは土壌水分量(moisture)はセンサーの抵抗値から算出するのですが、0が抵抗値が低い状態を示しているので、つまり湿っているという状態です。直感的に逆ですね。</p>\n<p>ともあれ出来上がってよかったです。</p>\n<h2 id=\"おまけ-slackに毎日状況をグラフ付きで投稿する\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91-slack%E3%81%AB%E6%AF%8E%E6%97%A5%E7%8A%B6%E6%B3%81%E3%82%92%E3%82%B0%E3%83%A9%E3%83%95%E4%BB%98%E3%81%8D%E3%81%A7%E6%8A%95%E7%A8%BF%E3%81%99%E3%82%8B\" aria-label=\"おまけ slackに毎日状況をグラフ付きで投稿する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おまけ Slackに毎日状況をグラフ付きで投稿する</h2>\n<p>ここからは完全に余談なのですがせっかくダッシュボード作っても自分で毎日見に行くことはまずありません!!(なぜ作った)</p>\n<p>なので、せっかくなので、こちらのダッシュボードを毎日画面キャプチャし、Slackに投稿する機能も作ってみたいと思います。お勉強がてらキャプチャ機能はCypressで作ることにしました。</p>\n<p>まず、Cypressの設定をしていきます。</p>\n<p>cypressのインストールやpackage.jsonの設定は割愛します。</p>\n<p>specファイル**screenshot.spec.js ** は次のようになりました。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ScreenShotNetatmoDashboard'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'TopPageWithGraphs'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div > span:nth-child(2) > .MuiIconButton-colorInherit:nth-child(1) > .MuiIconButton-label > .MuiSvgIcon-root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">screenshot</span><span class=\"token punctuation\">(</span><span class=\"token string\">'screenShot'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">capture</span><span class=\"token operator\">:</span> <span class=\"token string\">'fullPage'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>変な要素指定がありますが、こちらはMaterial Tableにあるアクションボタンを押している動作です。そうしないとChart.jsで作ったグラフが開かない作りにしてしまったので。</p>\n<p>また、こんな変な要素、よく見つけられたと思ったほうに朗報でCypressにはChrome拡張がありまして、<a href=\"https://chrome.google.com/webstore/detail/cypress-scenario-recorder/fmpgoobcionmfneadjapdabmjfkmfekb?hl=ja\" target=\"_blank\" rel=\"noopener noreferrer\">Cypress Scenario Recorder</a>というものがあります。こちらを使えばツールが自動生成するようなボタンでも要素を取得することが簡単です。</p>\n<p><del>本当はスクラッチで作ってtest-idをつけるべきというのは知ってますよ..!!!!</del></p>\n<p><img src=\"https://i.imgur.com/KaTx1pD.png\" alt=\"img\"></p>\n<p>また、上記SpecだとbaseURLの設定がされていないのでこのままでは動かないのでcypress.jsonも設定する必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://plant-check-graph.vercel.app/\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>これで画面キャプチャが取れるようになったので次はSlackへのアップロードスクリプトです。</p>\n<p>例によってTypeScript化してません!!変換もめんどくさかったのでES modules JSファイルです。恥ずかしい!!<del>本当はDenoで作るつもりだったの!!うまく動かなかったの!!</del></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ApolloClient<span class=\"token punctuation\">,</span> gql<span class=\"token punctuation\">,</span> HttpLink<span class=\"token punctuation\">,</span> InMemoryCache  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n<span class=\"token comment\">// \"fetch\" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor.</span>\n<span class=\"token keyword\">import</span> fetch <span class=\"token keyword\">from</span> <span class=\"token string\">'cross-fetch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'fs'</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span>\n\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">'./cypress/screenshots/screenshot.spec.js/screenShot.png'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> slackWebhookUrl <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">SLACK_WEBHOOK_URL</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> imgurClientId <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">IMGUR_CLIENT_ID</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URI_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://xxxxxxxxxxxxx.hasura.app/v1/graphql'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dashBoardUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://plant-check-graph.vercel.app/'</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">link</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">uri</span><span class=\"token operator\">:</span> <span class=\"token constant\">URI_ENDPOINT</span><span class=\"token punctuation\">,</span> fetch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> base64Data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">encoding</span><span class=\"token operator\">:</span> <span class=\"token string\">'base64'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">image</span><span class=\"token operator\">:</span> base64Data<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.*base64,'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'base64'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">Authorization</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Client-ID </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imgurClientId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\naxios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.imgur.com/3/image'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> imageLink <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>link\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>imageLink<span class=\"token punctuation\">)</span>\n  client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n        query MyQuery {\n            raspi_plant_checker {\n                id\n                light\n                moisture\n                timestamp\n            }\n        }\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> latestData <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>raspi_plant_checker<span class=\"token punctuation\">[</span>resp<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>raspi_plant_checker<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">const</span> slackPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">text</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*How are you?* \\n&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dashBoardUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|Click here> for details! \\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imageLink<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">attachments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">fields</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Moisture'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> latestData<span class=\"token punctuation\">.</span>moisture<span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">short</span><span class=\"token operator\">:</span> <span class=\"token string\">'true'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Light'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> latestData<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\n              <span class=\"token literal-property property\">short</span><span class=\"token operator\">:</span> <span class=\"token string\">'true'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>slackWebhookUrl<span class=\"token punctuation\">,</span> slackPayload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>ポイントとしては、</p>\n<ul>\n<li>画像の投稿にSlackのfileAPIを使わないでimgurのAPIを使っている(ただ使ってみたかっただけ)</li>\n<li>Appolo clientをnodeで使うとfetchが存在しないので個別にcross-fetchをインストールして <strong>link: new HttpLink({ uri: URI_ENDPOINT, fetch })</strong> という具合で設定してやる必要がある</li>\n<li>cypressのscreenshotは./cypress/screenshots/spec名/ファイル名で出力されるのでbase64で読み込んでいる</li>\n</ul>\n<p>さらにCypressやらSlackアップロードスクリプトを定期的に実行するRunnerを作ります。もうお分かりですね？　GitHub Actionsです。</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  \n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Upload Slack\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'10 6 * * *'</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">UploadSlack</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'14'</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> denoland/setup<span class=\"token punctuation\">-</span>deno@v1\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">deno-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'v1.x'</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> npm install\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> run cypress\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run cy<span class=\"token punctuation\">:</span>run\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Upload Slack\n        <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">IMGUR_CLIENT_ID</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.IMGUR_CLIENT_ID <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">SLACK_WEBHOOK_URL</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.SLACK_WEBHOOK_URL <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> node scripts/uploadScreenShot.mjs</code></pre></div>\n<p>これで毎日Slackに植物情報が投稿されるようになりました。</p>\n<p><img src=\"https://i.imgur.com/xNW7WDG.png\" alt=\"img\"></p>\n<h2 id=\"反省\" style=\"position:relative;\"><a href=\"#%E5%8F%8D%E7%9C%81\" aria-label=\"反省 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>反省</h2>\n<p>Denoを使ってSlackアップロードスクリプトは改修します。絶対に。</p>","fields":{"slug":"2021/07/27/hasura-graphql"},"frontmatter":{"tags":["Hasura","GraphQL","Vercel","Next.js","Heroku","imgur"],"templateKey":"blog-post","slug":"2021/07/27/hasura-graphql","id":null,"title":"Hasura CloudのGraphQLが便利すぎた話","url":"2021/07/27/hasura-graphql","date":"2021-07-27T02:45:28.646Z","description":"Hasura Cloudというのを最近知りましたが、簡単にGraphQLエンドポイントが作れてびっくりしました、という感想文です。","headerImage":"https://i.imgur.com/R0GFe6X.png","year":"2021","month":"07"}}},{"node":{"id":"4fd278eb-92a9-5803-88dd-0936a39c2fd0","html":"<p>ラズパイが余っているので活用したいと思います。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E6%9C%89%E5%8A%B9%E6%B4%BB%E7%94%A8\">ラズパイ有効活用</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%81%AA%E3%81%9C%E9%9B%BB%E5%AD%90%E3%83%9A%E3%83%BC%E3%83%91%E3%83%BC\">そもそもなぜ電子ペーパー？</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%88%E4%BA%BA%E3%81%8C%E3%81%84%E3%81%BE%E3%81%97%E3%81%9F\">先人がいました。</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D%E3%81%9D%E3%81%AE1-google%E3%81%AEoauth20%E8%AA%8D%E8%A8%BC%E3%81%8C%E5%8F%96%E3%82%8C%E3%81%AA%E3%81%84\">詰まったところその1 GoogleのoAuth2.0認証が取れない!!</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D%E3%81%9D%E3%81%AE2-27%E3%82%A4%E3%83%B3%E3%83%81%E3%81%AF%E7%94%BB%E9%9D%A2%E5%B0%8F%E3%81%95%E3%81%99%E3%81%8E\">詰まったところその2 2.7インチは画面小さすぎ</a></p>\n<ul>\n<li><a href=\"#%E8%87%AA%E6%85%A2\">自慢</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gpio%E3%81%AE%E3%82%AD%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\">GPIOのキースイッチを使おう！</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D%E3%81%9D%E3%81%AE3-%E3%82%AD%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%81%8C%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AB%E8%BC%89%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%84\">詰まったところその3 キースイッチがデータシートに載ってない！</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F\">できた！</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"ラズパイ有効活用\" style=\"position:relative;\"><a href=\"#%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E6%9C%89%E5%8A%B9%E6%B4%BB%E7%94%A8\" aria-label=\"ラズパイ有効活用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ラズパイ有効活用</h2>\n<p>皆さんは家に余っているラズパイはありますか？</p>\n<p><strong>私はあります...。</strong></p>\n<p>いい加減眠らせておくのももったいなく感じ、かつちょうどカレンダーが家になかった(会社でもらったカレンダーは全部捨ててしまった)のでラズパイと電子ペーパーを使って万年カレンダーでも作ってみようかと思います。</p>\n<p>ラズパイと電子ペーパーのセットアップは過去記事<a href=\"https://blog.tubone-project24.xyz/2021/01/01/mqtt-nenga\" target=\"_blank\" rel=\"noopener noreferrer\">MQTTと電子ペーパーを使って年賀状を作る</a>で実施済みなのでこちらを使うことにします。</p>\n<h2 id=\"そもそもなぜ電子ペーパー\" style=\"position:relative;\"><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E3%81%AA%E3%81%9C%E9%9B%BB%E5%AD%90%E3%83%9A%E3%83%BC%E3%83%91%E3%83%BC\" aria-label=\"そもそもなぜ電子ペーパー permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>そもそもなぜ電子ペーパー？</h2>\n<p>昨今リモートワークも多くなり、オフィスに出向くことも少なくなりました。私はオフィスの机に卓上カレンダーを置いていたのですがリモートワーク中でもカレンダーが常に見れるようにしておきたいです。なぜなら無茶なスケジュールをクライアントから要求されたときに、おおよそ何週間くらい猶予があるのかカレンダーを使うことで直感的にわかるからです。</p>\n<p>しかしながら家に置いておく卓上カレンダーが現在ありません。</p>\n<p>買えばいいじゃんという意見も出てきそうですが過去記事の通り、せっかく<a href=\"https://amzn.to/3BRCQDl\" target=\"_blank\" rel=\"noopener noreferrer\">Waveshare 2.7inch E-Ink Screen Display HAT for Raspberry Pi</a>を買ったのでカレンダーデバイスを作ってみようと思います。</p>\n<h2 id=\"先人がいました\" style=\"position:relative;\"><a href=\"#%E5%85%88%E4%BA%BA%E3%81%8C%E3%81%84%E3%81%BE%E3%81%97%E3%81%9F\" aria-label=\"先人がいました permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>先人がいました。</h2>\n<p>作ろうと思って調べるとすでに電子ペーパーでカレンダーを作っていた人がいました。しかもGoogleカレンダー連携までしているまさにスマートデバイス。</p>\n<p><a href=\"https://blog.mktia.com/e-calendar/?utm_source=pocket_mylist\" target=\"_blank\" rel=\"noopener noreferrer\">Googleと連動した電子ペーパー製カレンダーを作る</a></p>\n<p>一からコードを書くのもめんどくさくなり、上記を<del>パクッて</del>参考に作ればいいという気分になりました。</p>\n<p>コード自体は結構コピペで作って、画面サイズ変更と赤色の印字無効だけで済ませてしまったので公開はしませんが詰まったところを下記に書いていきたいと思います。</p>\n<h2 id=\"詰まったところその1-googleのoauth20認証が取れない\" style=\"position:relative;\"><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D%E3%81%9D%E3%81%AE1-google%E3%81%AEoauth20%E8%AA%8D%E8%A8%BC%E3%81%8C%E5%8F%96%E3%82%8C%E3%81%AA%E3%81%84\" aria-label=\"詰まったところその1 googleのoauth20認証が取れない permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>詰まったところその1 GoogleのoAuth2.0認証が取れない!!</h2>\n<p>これが一番苦戦しました。</p>\n<p><a href=\"https://blog.mktia.com/e-calendar/?utm_source=pocket_mylist\" target=\"_blank\" rel=\"noopener noreferrer\">Googleと連動した電子ペーパー製カレンダーを作る</a>を参考に作っていくとGoogleカレンダーとの連携のため、oAuth2.0のユーザー認証が必要なのですが...。</p>\n<p>Google CloudのAPIコンソールから発行できるクレデンシャル用のJSONがある場合で、認証済みの場合に作成される<strong>token.pickle</strong>が存在しない場合は<strong>google_auth_oauthlib.flow.InstalledAppFlow</strong>のrun_local_serverを使って、ローカル上にWebサーバーを立ててGoogleアカウントでの認証が済んだ場合にローカルサーバーにリダイレクトするようにする認証方式をとるようにしてありました。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> creds <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> creds<span class=\"token punctuation\">.</span>valid<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> creds <span class=\"token keyword\">and</span> creds<span class=\"token punctuation\">.</span>expired <span class=\"token keyword\">and</span> creds<span class=\"token punctuation\">.</span>refresh_token<span class=\"token punctuation\">:</span>\n                creds<span class=\"token punctuation\">.</span>refresh<span class=\"token punctuation\">(</span>Request<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                flow <span class=\"token operator\">=</span> InstalledAppFlow<span class=\"token punctuation\">.</span>from_client_secrets_file<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">'credentials.json'</span><span class=\"token punctuation\">,</span> SCOPES<span class=\"token punctuation\">)</span>\n                creds <span class=\"token operator\">=</span> flow<span class=\"token punctuation\">.</span>run_local_server<span class=\"token punctuation\">(</span>port<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># Save the credentials for the next run</span>\n            <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token.pickle'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> token<span class=\"token punctuation\">:</span>\n                pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>creds<span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span></code></pre></div>\n<p>公式のドキュメントに載っている<a href=\"https://developers.google.com/people/quickstart/python\" target=\"_blank\" rel=\"noopener noreferrer\">クイックスタート</a>でも同様の設定になっているので問題ないと思ってましたが....。</p>\n<p>いざリダイレクトが始まると..。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">エラー 400: redirect_uri_mismatch The redirect URI in the request, http://localhost:58979/, does not match the ones authorized for the OAuth client. To update the authorized redirect URIs, visit: https://console.developers.google.com/apis/credentials/oauthclient/xxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com?project=xxxxxxxxxxxxx</code></pre></div>\n<p>というエラーがブラウザで出てしまい、リダイレクトされず当然認証も通りませんでした。</p>\n<p>エラー内容的にoAuthのリダイレクトURLがミスマッチということなので、リダイレクトURLに <strong><a href=\"http://localhost\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost</a></strong> つまり、<strong><a href=\"http://localhost:80\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:80</a></strong> を設定していたのが悪いのではという仮説のもと、<strong>flow.run_local_server()</strong> のポートを <strong>port=xxxxx</strong>で固定化してリダイレクトURLもポート指定にして再度トライしたのですが、同じエラーでした。</p>\n<p>途方に暮れていたのですが、そもそも自己でリダイレクト先のローカルサーバーを立てることのできないタイプのデバイスもあるはずでそういった場合はどうやって認証するのか調べたところ...。</p>\n<p><strong>テレビと入力機能が限られているデバイス</strong>という認証オプションが用意されてました。</p>\n<p>APIのコンソールでoAuth2.0のクライアント作成時に上記を選んだ後、コード側で、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">creds = flow.run_local_server(port=0)\n↓\ncreds = flow.run_console()</code></pre></div>\n<p>に書いてあげることで、ブラウザ上で認証が完了したらワンタイムコードが表示され、それをコンソール上に入力する形で認証が通るようになりました。めでたしめでたし。</p>\n<h2 id=\"詰まったところその2-27インチは画面小さすぎ\" style=\"position:relative;\"><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D%E3%81%9D%E3%81%AE2-27%E3%82%A4%E3%83%B3%E3%83%81%E3%81%AF%E7%94%BB%E9%9D%A2%E5%B0%8F%E3%81%95%E3%81%99%E3%81%8E\" aria-label=\"詰まったところその2 27インチは画面小さすぎ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>詰まったところその2 2.7インチは画面小さすぎ</h2>\n<p>先人の知恵をお借りして画面サイズとフォントサイズだけ合わせと赤色無効化をして調整して作ったところ...。</p>\n<p><img src=\"https://i.imgur.com/d4TGMVSl.jpg\" alt=\"tiisai\"></p>\n<p>小さいっ！圧倒的に小さい。Zippoと比べてもらうとわかるのですが、こんなの使いものにならない！</p>\n<p><img src=\"https://i.imgur.com/tERPWfnl.jpg\" alt=\"ima\"></p>\n<p>先人、かなり理にかなったデザインをしていたようで、メインのカレンダーの他、右側に予定表と次の月のミニカレンダーを表示するようになっているのですが、さすがに2.7インチには小さすぎました。</p>\n<p>さすがにこのサイズだと予定表とか読めたものではないです。もちろん削ってしまってもいいのですがせっかく苦労してGoogleカレンダーと連携しているので何とかしたい...!</p>\n<h3 id=\"自慢\" style=\"position:relative;\"><a href=\"#%E8%87%AA%E6%85%A2\" aria-label=\"自慢 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>自慢</h3>\n<p>予定表をよく見てほしい。</p>\n<p><img src=\"https://i.imgur.com/mtf5J9v.jpg\" alt=\"imfg\"></p>\n<p>そう。今年色々大変そうですが<a href=\"https://bang-dream.com/9th-live-thebeginning\" target=\"_blank\" rel=\"noopener noreferrer\">BanG Dream! 9th☆LIVE「The Beginning」</a>行きます。</p>\n<p>楽しみだなぁ。</p>\n<h2 id=\"gpioのキースイッチを使おう\" style=\"position:relative;\"><a href=\"#gpio%E3%81%AE%E3%82%AD%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\" aria-label=\"gpioのキースイッチを使おう permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GPIOのキースイッチを使おう！</h2>\n<p>話を戻して、2.7インチだとさすがにいろいろ視認性が悪いですね、という結論になりました。</p>\n<p>そこで、2.7インチHATに搭載されているキースイッチを活用することにしました。</p>\n<p><img src=\"https://i.imgur.com/6L3j6pFl.jpg\" alt=\"img\"></p>\n<p>キースイッチは4つありますので、4画面に分割できます。これならうまくいきそうですね。</p>\n<p>とりあえず下記の通りにしました。</p>\n<ul>\n<li>Key1: 当月カレンダー</li>\n<li>Key2: 来月カレンダー</li>\n<li>Key3: 当月カレンダー&#x26;前月・来月カレンダー</li>\n<li>Key4: 予定表</li>\n</ul>\n<p>とします。</p>\n<p>それぞれを分割してスクリプトを作成します。コードは上記でも申しているとおり、コピペが多いのでさすがに恥ずかしいので載せません..!</p>\n<h2 id=\"詰まったところその3-キースイッチがデータシートに載ってない\" style=\"position:relative;\"><a href=\"#%E8%A9%B0%E3%81%BE%E3%81%A3%E3%81%9F%E3%81%A8%E3%81%93%E3%82%8D%E3%81%9D%E3%81%AE3-%E3%82%AD%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%81%8C%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AB%E8%BC%89%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%84\" aria-label=\"詰まったところその3 キースイッチがデータシートに載ってない permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>詰まったところその3 キースイッチがデータシートに載ってない！</h2>\n<p>さて、それぞれの描画スクリプトは何のことなく作れたので、あとはキースイッチが押されたら画面を切り替えるようにします。</p>\n<p>ではデータシートを見ていきましょう。<a href=\"https://www.waveshare.com/wiki/2.7inch_e-Paper_HAT\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.waveshare.com/wiki/2.7inch_e-Paper_HAT</a></p>\n<p>あれ？キースイッチの記載がない...。</p>\n<p>ちゃんと書いてよぉ...。と思いましたが<a href=\"https://diyprojects.io/test-waveshare-epaper-eink-2-7-spi-screen-raspberry-pi-python/\" target=\"_blank\" rel=\"noopener noreferrer\">https://diyprojects.io/test-waveshare-epaper-eink-2-7-spi-screen-raspberry-pi-python/</a>というサイトに、</p>\n<ul>\n<li>Key 1 on pin 12</li>\n<li>Key 2 on pin 16</li>\n<li>Key 3 on pin 18</li>\n<li>Key 4 on pin 4</li>\n</ul>\n<p>という記載がありました!!GoodJob！</p>\n<p>ということでコードを書いていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> RPi<span class=\"token punctuation\">.</span>GPIO <span class=\"token keyword\">as</span> GPIO\n\n\nBOUNCE_TIME <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n\n\nPIN_KEY1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nPIN_KEY2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nPIN_KEY3 <span class=\"token operator\">=</span> <span class=\"token number\">13</span>\nPIN_KEY4 <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n\nDISPMODE_THIS_MONTH <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nDISPMODE_NEXT_MONTH <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nDISPMODE_BEFORE_NEXT <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nDISPMODE_TODO <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Display</span><span class=\"token punctuation\">:</span>\n    mode <span class=\"token operator\">=</span> DISPMODE_THIS_MONTH\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_mode<span class=\"token operator\">=</span>DISPMODE_THIS_MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> first_mode\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> DISPMODE_NEXT_MONTH <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>draw_next_month<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> DISPMODE_BEFORE_NEXT <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>draw_before_next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">elif</span> DISPMODE_TODO <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>draw_todo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> DISPMODE_THIS_MONTH\n                self<span class=\"token punctuation\">.</span>draw_this_month<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">3600</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">key_pressed</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> PIN_KEY1 <span class=\"token operator\">==</span> pin<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> DISPMODE_THIS_MONTH\n            self<span class=\"token punctuation\">.</span>draw_this_month<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> PIN_KEY2 <span class=\"token operator\">==</span> pin<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> DISPMODE_NEXT_MONTH\n            self<span class=\"token punctuation\">.</span>draw_next_month<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> PIN_KEY3 <span class=\"token operator\">==</span> pin<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> DISPMODE_BEFORE_NEXT\n            self<span class=\"token punctuation\">.</span>draw_before_next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> PIN_KEY4 <span class=\"token operator\">==</span> pin<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>mode <span class=\"token operator\">=</span> DISPMODE_TODO\n            self<span class=\"token punctuation\">.</span>draw_todo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw_this_month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/home/pi/e-calendar/this_month.py\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        proc <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw_next_month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/home/pi/e-calendar/next_month.py\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        proc <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw_before_next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/home/pi/e-calendar/before_next.py\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        proc <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n    <span class=\"token decorator annotation punctuation\">@staticmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw_todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        command <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"python3\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/home/pi/e-calendar/todo.py\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        proc <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>Popen<span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span>\n        result <span class=\"token operator\">=</span> proc<span class=\"token punctuation\">.</span>communicate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        display <span class=\"token operator\">=</span> Display<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>setmode<span class=\"token punctuation\">(</span>GPIO<span class=\"token punctuation\">.</span>BCM<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span>PIN_KEY1<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>IN<span class=\"token punctuation\">,</span> pull_up_down<span class=\"token operator\">=</span>GPIO<span class=\"token punctuation\">.</span>PUD_UP<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>add_event_detect<span class=\"token punctuation\">(</span>PIN_KEY1<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>FALLING<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>display<span class=\"token punctuation\">.</span>key_pressed<span class=\"token punctuation\">,</span> BOUNCE_TIME<span class=\"token operator\">=</span>BOUNCE_TIME<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span>PIN_KEY2<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>IN<span class=\"token punctuation\">,</span> pull_up_down<span class=\"token operator\">=</span>GPIO<span class=\"token punctuation\">.</span>PUD_UP<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>add_event_detect<span class=\"token punctuation\">(</span>PIN_KEY2<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>FALLING<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>display<span class=\"token punctuation\">.</span>key_pressed<span class=\"token punctuation\">,</span> BOUNCE_TIME<span class=\"token operator\">=</span>BOUNCE_TIME<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span>PIN_KEY3<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>IN<span class=\"token punctuation\">,</span> pull_up_down<span class=\"token operator\">=</span>GPIO<span class=\"token punctuation\">.</span>PUD_UP<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>add_event_detect<span class=\"token punctuation\">(</span>PIN_KEY3<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>FALLING<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>display<span class=\"token punctuation\">.</span>key_pressed<span class=\"token punctuation\">,</span> BOUNCE_TIME<span class=\"token operator\">=</span>BOUNCE_TIME<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span>PIN_KEY4<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>IN<span class=\"token punctuation\">,</span> pull_up_down<span class=\"token operator\">=</span>GPIO<span class=\"token punctuation\">.</span>PUD_UP<span class=\"token punctuation\">)</span>\n        GPIO<span class=\"token punctuation\">.</span>add_event_detect<span class=\"token punctuation\">(</span>PIN_KEY4<span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>FALLING<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>display<span class=\"token punctuation\">.</span>key_pressed<span class=\"token punctuation\">,</span> BOUNCE_TIME<span class=\"token operator\">=</span>BOUNCE_TIME<span class=\"token punctuation\">)</span>\n        display<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span>DISPMODE_THIS_MONTH<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        GPIO<span class=\"token punctuation\">.</span>cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>ポイントは、キースイッチはただのGPIOなので、<strong>RPi.GPIO</strong> を使って制御できます。</p>\n<p>キースイッチが押されたときに何かをする、というのは<strong>GPIO.add_event_detect</strong>でイベントリスナーを登録できます。コールバック関数が設定できるので、こちらにキースイッチが押下された際のふるまいを登録すればいいです。また、コールバック関数にはGPIOのPINが引数でわたりますのでkey_pressedみたいな感じで共通化できます。</p>\n<p>本来はちゃんと作るべきなのですが、ちょっと手探りで画面を作っていたところもあり、subprocessを使って直接Pythonファイルを実行するイケてない実装になってます。恥ずかしい。</p>\n<h2 id=\"できた\" style=\"position:relative;\"><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F\" aria-label=\"できた permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>できた！</h2>\n<p>できました。</p>\n<p>当月カレンダー↓</p>\n<p><img src=\"https://i.imgur.com/3HqmDpil.jpg\" alt=\"mga\"></p>\n<p>翌月カレンダー↓</p>\n<p><img src=\"https://i.imgur.com/pa1jUtbl.jpg\" alt=\"imng\"></p>\n<p>当月カレンダー&#x26;前月・来月カレンダー↓</p>\n<p><img src=\"https://i.imgur.com/QR3FGt8l.jpg\" alt=\"imna\"></p>\n<p>予定表↓</p>\n<p><img src=\"https://i.imgur.com/M6muDFQl.jpg\" alt=\"ima\"></p>\n<p>電子ペーパーの再描画はかなり重たいので切り替えには時間がかかるのが欠点ですが他はまぁまぁ上出来ではないでしょうか？</p>\n<iframe loading=\"lazy\" width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/RuiDxP65nnU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen title=\"2.7inch E-paper Calendar\"></iframe>\n<p>おっそ。</p>","fields":{"slug":"2021/07/26/calendar"},"frontmatter":{"tags":["RaspberryPi","電子ペーパー","Googleカレンダー"],"templateKey":"blog-post","slug":"2021/07/26/calendar","id":null,"title":"ラズパイ活用！電子ペーパーを使ってカレンダーを作ってみる","url":"2021/07/26/calendar","date":"2021-07-25T07:59:27.482Z","description":"ラズパイが余っているので家にないカレンダーを作ってみたいと思います。","headerImage":"https://i.imgur.com/QR3FGt8.jpg","year":"2021","month":"07"}}},{"node":{"id":"b3da3f41-3b41-5166-a894-95722d0872ea","html":"<p>作ってみよう！</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E6%88%91%E3%81%8C%E5%AE%B6%E3%81%AE%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E4%BA%8B%E6%83%85\">我が家のラズパイ事情</a></li>\n<li><a href=\"#%E7%9B%A3%E8%A6%96%E3%82%AB%E3%83%A1%E3%83%A9\">監視カメラ</a></li>\n<li><a href=\"#%E8%B5%A4%E5%A4%96%E7%B7%9A%E3%82%AB%E3%83%A1%E3%83%A9\">赤外線カメラ</a></li>\n<li><a href=\"#motion\">motion</a></li>\n<li><a href=\"#motion%E3%81%A7%E5%8B%95%E4%BD%93%E6%A4%9C%E7%9F%A5%E3%82%92%E3%81%99%E3%82%8Bconfig%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">motionで動体検知をするconfigを設定する。</a></li>\n<li><a href=\"#stream%E9%85%8D%E4%BF%A1\">Stream配信</a></li>\n<li><a href=\"#%E5%8B%95%E7%94%BB%E3%82%92slack%E3%81%AB%E6%8A%95%E7%A8%BF\">動画をSlackに投稿</a></li>\n<li><a href=\"#slack%E3%81%AB%E7%94%BB%E5%83%8F%E3%82%92%E6%8A%95%E7%A8%BF\">Slackに画像を投稿</a></li>\n<li><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F\">できた！</a></li>\n<li><a href=\"#%E5%95%8F%E9%A1%8C%E7%99%BA%E7%94%9F\">問題発生</a></li>\n<li><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></li>\n</ul>\n</div>\n<h2 id=\"我が家のラズパイ事情\" style=\"position:relative;\"><a href=\"#%E6%88%91%E3%81%8C%E5%AE%B6%E3%81%AE%E3%83%A9%E3%82%BA%E3%83%91%E3%82%A4%E4%BA%8B%E6%83%85\" aria-label=\"我が家のラズパイ事情 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我が家のラズパイ事情</h2>\n<p>多くのご家庭でお困りかもしれませんが、使ってないラズパイが転がりまくってます。</p>\n<p>ラズパイって結構直近の進化がすごくて、性能が上がったから買ってみよう！とか、液晶モジュール付けてしまったから特に使ってないけど外すのめんどくさいしそのままにしておこうとか、そういった感じで眠ったラズパイが何種類かあります。</p>\n<p>で、こいつらを眠らせておいても仕方がないので、早速こちらを使って何かHomeIoTチックなことをやってみたいと想います。</p>\n<h2 id=\"監視カメラ\" style=\"position:relative;\"><a href=\"#%E7%9B%A3%E8%A6%96%E3%82%AB%E3%83%A1%E3%83%A9\" aria-label=\"監視カメラ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>監視カメラ</h2>\n<p>そこまで我が家は大したセキュリティ意識はないですが、せっかくなら玄関に監視カメラでもつけたいなと思い始めました。</p>\n<p>とりあえず、人がきたらSlackに検知状況とそのときの画像や動画を投稿します。</p>\n<h2 id=\"赤外線カメラ\" style=\"position:relative;\"><a href=\"#%E8%B5%A4%E5%A4%96%E7%B7%9A%E3%82%AB%E3%83%A1%E3%83%A9\" aria-label=\"赤外線カメラ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>赤外線カメラ</h2>\n<p>いつも玄関は省エネの観点で電気を消してますので、通常のカメラではちょっと明るさがたりません。</p>\n<p>そこで、ラズパイのカメラモジュールに挿すことのできる赤外線カメラを探したところありました。</p>\n<p><a href=\"https://www.amazon.co.jp/gp/product/B07T5DZY73/ref=as_li_tl?ie=UTF8&#x26;camp=247&#x26;creative=1211&#x26;creativeASIN=B07T5DZY73&#x26;linkCode=as2&#x26;tag=tubone2403-22&#x26;linkId=034a4706556d75193eef893e1d8c3e2a\" target=\"_blank\" rel=\"noopener noreferrer\">5MP 1080P Camera for raspberry pi 4 Model b カメラモジュールraspberryカメラモ赤外線ケース付き夜間LEDラズベリーパイ4 / 3 / Pi Zero Wに適して (IR with Case)</a></p>\n<p>値段もお手頃でこいつはいいですね。</p>\n<p>組み立て方も簡単で、カメラ部分に赤外線センサーをねじ止めし、ラズパイのカメラモジュールに差し込むだけです。</p>\n<p><img src=\"https://i.imgur.com/JaW3aQ0l.jpg\" alt=\"inmf\"></p>\n<p>組み立てると上のようになります。</p>\n<p>私の用意していたラズパイがWifi非対応の超古いタイプ<a href=\"https://jp.rs-online.com/web/p/raspberry-pi/8111284/\" target=\"_blank\" rel=\"noopener noreferrer\">Raspberry Pi B+</a>だったので有線LANを引きまして、高さが足りないのでiPadminiの箱の上にガムテープで固定するという何とも残念な仕上がりですが、とりあえず装着完了。</p>\n<p><img src=\"https://i.imgur.com/Eda8D6Il.jpg\" alt=\"img\"></p>\n<p>試しにカメラが使えるか、テストしてみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">raspistill -o test.jpg</code></pre></div>\n<p><img src=\"https://i.imgur.com/YOUDPIcl.jpg\" alt=\"img\"></p>\n<p>無事写真が撮れました。色味がちょっと変なのは赤外線だから仕方ありませんね。</p>\n<h2 id=\"motion\" style=\"position:relative;\"><a href=\"#motion\" aria-label=\"motion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>motion</h2>\n<p><a href=\"https://motion-project.github.io/index.html\" target=\"_blank\" rel=\"noopener noreferrer\">motion</a>という、カメラからのビデオ信号をリアルタイムに解析し、動体検知や録画撮影などができるLinuxプログラムがあります。</p>\n<p>こちらを使えば簡単に監視カメラを作ることができます。</p>\n<p>早速motionをインストールして設定していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt install motion\n\nsudo motion</code></pre></div>\n<p>さきほど写真の撮影には成功したので起動するかなーと思ったのですがダメです！motionが起動しません!!エラーが出ます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[1:ml1] [NTC] [VID] [Jul 21 21:00:03] vid_start: Opening V4L2 device\n[1:ml1] [NTC] [VID] [Jul 21 21:00:03] v4l2_start: Using videodevice /dev/video0 and input -1\n[1:ml1] [ALR] [VID] [Jul 21 21:00:03] v4l2_start: Failed to open video device /dev/video0: No such file or directory\n[1:ml1] [ERR] [VID] [Jul 21 21:00:03] vid_start: V4L2 device failed to open\n[1:ml1] [WRN] [ALL] [Jul 21 21:00:03] mlp_retry: Retrying until successful connection with camera\n[1:ml1] [NTC] [VID] [Jul 21 21:00:03] vid_start: Opening V4L2 device\n[1:ml1] [NTC] [VID] [Jul 21 21:00:03] v4l2_start: Using videodevice /dev/video0 and input -1\n[1:ml1] [ALR] [VID] [Jul 21 21:00:03] v4l2_start: Failed to open video device /dev/video0: No such file or directory\n[1:ml1] [ERR] [VID] [Jul 21 21:00:03] vid_start: V4L2 device failed to open</code></pre></div>\n<p><strong>Failed to open video device /dev/video0: No such file or directory</strong>というエラーが出てますね。</p>\n<p>ラズパイのカメラモジュールは/dev/video0として認識されないのですかね。</p>\n<p>途方に暮れてしまいましたがラズパイのフォーラムに解決策が書いてありました。</p>\n<p><a href=\"https://www.raspberrypi.org/forums/viewtopic.php?t=255442\" target=\"_blank\" rel=\"noopener noreferrer\">Motion -> v4l2_start: Failed to open video device /dev/video0: No such file or directory</a></p>\n<p>どうやらラズパイカメラモジュール用のV4L2ドライバは標準ではロードされず、video0デバイスを取得するには <strong>modprobe bcm2835-v4l2</strong>を実行する必要があったとのこと。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo modprobe bcm2835-v4l2</code></pre></div>\n<p>これで再起動したところ無事、<strong>/dev/video0</strong>ができていました。</p>\n<p>とりあえずmotionを起動させたところ、無事起動しました。</p>\n<h2 id=\"motionで動体検知をするconfigを設定する\" style=\"position:relative;\"><a href=\"#motion%E3%81%A7%E5%8B%95%E4%BD%93%E6%A4%9C%E7%9F%A5%E3%82%92%E3%81%99%E3%82%8Bconfig%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\" aria-label=\"motionで動体検知をするconfigを設定する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>motionで動体検知をするconfigを設定する。</h2>\n<p>motion.confは下記の通りに設定しました。後ほど検知後の動きを設定するスクリプトについてもご紹介しますがインラインで軽く解説していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">daemon on #デーモン化してサービスとして登録\nprocess_id_file /var/run/motion/motion.pid\nsetup_mode off\nlogfile /var/log/motion/motion.log\nlog_level 6\nlog_type all\nvideodevice /dev/video0\nv4l2_palette 17\ninput -1\nnorm 0\nfrequency 0\npower_line_frequency -1\nrotate 180 #画像が反転してたので直す\nwidth 640\nheight 480\nframerate 100 #とりあえず最大。ただし性能的にあんまりぬるぬるにはならなかった。監視カメラだし別にぬるぬるじゃなくてもいい。\nminimum_frame_time 0\nnetcam_keepalive off\nnetcam_tolerant_check off\nrtsp_uses_tcp on\nauto_brightness off\nbrightness 0\ncontrast 0\nsaturation 0\nhue 0\nroundrobin_frames 1\nroundrobin_skip 1\nswitchfilter off\nthreshold 1500\nthreshold_tune off\nnoise_level 32\nnoise_tune on\ndespeckle_filter EedDl\nsmart_mask_speed 0\nlightswitch 0\nminimum_motion_frames 1\npre_capture 0\npost_capture 0\nevent_gap 60 # 動体検知イベントから次のイベント検知までのインターバル。設定しないと連続撮影が続いてクッソ重くなる\nmax_movie_time 120\nemulate_motion off\noutput_pictures best # 動体検知した際に画像を出力する、bestにしていると動体検知イベント中一番大きな動体検知が発生したフレームを切り取ってくれる\noutput_debug_pictures off\nquality 75 # 画像の品質\npicture_type jpeg # 画像のフォーマット、jpgで問題ない\nffmpeg_output_movies on # 動体検知した際に、動体検知イベント中の動画を出力してくれる\nffmpeg_output_debug_movies off\nffmpeg_timelapse 0\nffmpeg_timelapse_mode daily\nffmpeg_bps 700000\nffmpeg_variable_bitrate 0\nffmpeg_video_codec mp4 # 動画コーデック、mp4一択だがmpeg4にするとaviにもできる\nffmpeg_duplicate_frames true\nuse_extpipe off\nsnapshot_interval 0\nlocate_motion_mode on # 動体検知イベントの画像、動画中に検知部分に四角を表示する\nlocate_motion_style redbox # 赤枠にする\ntext_right %Y-%m-%d\\n%T-%q\ntext_changes off\ntext_event %Y%m%d%H%M%S\ntext_double on # 監視カメラの端っこにある時間とか記載してあるテキストを大きくする\ntarget_dir /home/pi/motion/output # 動画、画像出力先\nsnapshot_filename %v-%Y%m%d%H%M%S-snapshot\npicture_filename %v-%Y%m%d%H%M%S-%q\nmovie_filename %v-%Y%m%d%H%M%S\ntimelapse_filename %Y%m%d-timelapse\nipv6_enabled off\nstream_port 8081\nstream_quality 50\nstream_motion off\nstream_maxrate 1\nstream_localhost off # offにしておくと、IPアドレス:8081でアクセスするとリアルタイムに動画ストリーミングされる\nstream_limit 0\nstream_auth_method 0\nwebcontrol_port 8080\nwebcontrol_localhost off　# offにしておくと、IPアドレス:8080でアクセスすると設定変更や再起動が可能なWebコンソールが出てくる\nwebcontrol_html_output on\ntrack_type 0\ntrack_auto off\ntrack_iomojo_id 0\ntrack_step_angle_x 10\ntrack_step_angle_y 10\ntrack_move_wait 10\ntrack_speed 255\ntrack_stepsize 40\nquiet on\non_picture_save \"/bin/sh /home/pi/motion/notify_picture_trigger.sh %f\" # 画像が保存されたときの追加起動スクリプト %fで保存された画像を引数で渡すことができる\non_movie_start \"/usr/bin/python3 /home/pi/motion/notify_fast_trigger.py\" # 動体検知され動画が記録され始めたら追加起動するスクリプト\non_movie_end \"/bin/sh /home/pi/motion/notify_movie_trigger.sh %f\" # 動画の記録が終了したら追加起動するスクリプト\non_camera_found \"/usr/bin/python3 /home/pi/motion/notify_camera_found.py\" # カメラモジュールとの疎通が回復したら起動するスクリプト\non_camera_lost \"/usr/bin/python3 /home/pi/motion/notify_camera_lost.py\" # カメラモジュールとの疎通が取れなくなったら起動するスクリプト</code></pre></div>\n<p>ここでポイントになるのは動体検知実行時に画像や動画を保存できるだけでなく、それを追加起動スクリプトで通知できるということです。</p>\n<p>動画や画像をSlackに送信すれば監視カメラシステム的に十分ですね。</p>\n<p>動画だけの配信でもいいかもしれませんが、モバイルSlackだと、動画の場合プレビューがされないので画像も送信することにします。</p>\n<p><img src=\"https://i.imgur.com/IEF2Q1Rl.png\" alt=\"md\"></p>\n<h2 id=\"stream配信\" style=\"position:relative;\"><a href=\"#stream%E9%85%8D%E4%BF%A1\" aria-label=\"stream配信 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stream配信</h2>\n<p>motion.confで<strong>stream_localhost off</strong>とすることで、他の端末からストリーム配信を視聴できるようになります。例えばVPNとかを自宅に構築済みの場合は気になったら外出先からカメラを確認する、という使い方ができます。</p>\n<p>我が家はOpenVPNでイントラ接続が可能になってます。</p>\n<p><img src=\"https://i.imgur.com/MbyFzmel.png\" alt=\"img\"></p>\n<h2 id=\"動画をslackに投稿\" style=\"position:relative;\"><a href=\"#%E5%8B%95%E7%94%BB%E3%82%92slack%E3%81%AB%E6%8A%95%E7%A8%BF\" aria-label=\"動画をslackに投稿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動画をSlackに投稿</h2>\n<p>さて、ここからが本番のSlackへの画像投稿です。</p>\n<p>Slackへのファイル投稿はAPPSを使います。何番煎じかわからないくらいたくさん記事が転がっているのでここでは解説しませんが、Botトークンを入手する必要があります。</p>\n<p><a href=\"https://note.com/10mohi6/n/n0fd906a5f980\" target=\"_blank\" rel=\"noopener noreferrer\">ご参考: 超簡単PythonでSlackにファイルアップロード＆メッセージ投稿（Slack API利用）新方式</a></p>\n<p>動画が作成完了されたら動くスクリプトは<strong>on_movie_end</strong>で設定できますが今回はshellを呼び出して、shellのなかでSlack投稿用のPythonに連携します。</p>\n<p>特に理由はないですが、Slackアップロード以外に何かやることがある場合にこうしておくと便利かな、というのとアップロード済みの動画をラズパイから削除することを実施するためです。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">FILE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\npython3 /home/pi/motion/upload_slack.py <span class=\"token variable\">$FILE</span> <span class=\"token string\">\"MP4 File\"</span>\n<span class=\"token function\">rm</span> -f <span class=\"token variable\">$FILE</span></code></pre></div>\n<p>upload_slack.pyはこんな感じ.</p>\n<p>SlackのChannelIDはSlackWeb版を使うとURLの最後のパスがそれにあたります。公式は<a href=\"https://api.slack.com/methods/channels.list\" target=\"_blank\" rel=\"noopener noreferrer\">APIを叩いて調べる</a>のを進めてますが、Web版が一番簡単に見つけられます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> requests\n\nFILENAME <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nFILEFORMAT <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nTOKEN <span class=\"token operator\">=</span> <span class=\"token string\">\"xoxb-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"</span> <span class=\"token comment\"># Slackトークン</span>\nCHANNEL <span class=\"token operator\">=</span> <span class=\"token string\">\"C0xxxxxxxxxxxx\"</span> <span class=\"token comment\"># ChannelID</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>FILENAME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>FILENAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    dt_now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    files <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">:</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    param <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span> TOKEN<span class=\"token punctuation\">,</span> \n        <span class=\"token string\">\"channels\"</span> <span class=\"token punctuation\">:</span>CHANNEL<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"filename\"</span> <span class=\"token punctuation\">:</span>FILENAME<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"title\"</span><span class=\"token punctuation\">:</span> FILEFORMAT\n        <span class=\"token punctuation\">}</span>\n    resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span><span class=\"token string\">\"https://slack.com/api/files.upload\"</span><span class=\"token punctuation\">,</span>params<span class=\"token operator\">=</span>param<span class=\"token punctuation\">,</span> files<span class=\"token operator\">=</span>files<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span></code></pre></div>\n<p>何のことはないですね。ファイルをバイナリで読み込んで送るだけです。</p>\n<p>ちなみに、動画の投稿は検知から<strong>1分</strong>ほどかかります。古いラズパイの性能がかなり低いということもありますが、画像ファイル作成にはffmpegでのエンコードが発生するので時間がかかる、というわけです。</p>\n<p>それでは、監視カメラとしてはアウトな気がするので追加で<strong>on_movie_start</strong>を設定します。こちらは動画ファイルが作成されるタイミングでトリガーされるスクリプトなのでほぼ動体検知タイミングで通知を飛ばすことができます。</p>\n<p>投稿はただのincoming webhookです。画像や動画は置いておいてとりあえず何か起きたよ！って通知だけSlackにあげることにしました。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import datetime\nimport json\nimport requests\n\nWEB_HOOK_URL = \"https://hooks.slack.com/services/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\ndt_now = datetime.datetime.now()\nrequests.post(WEB_HOOK_URL, data = json.dumps({\n    \"text\": \"Alarm triggered. Check out the attached video! {}\".format(dt_now.strftime(\"%Y/%m/%d %H:%M:%S\")),\n    'username': \"motion_detect\",\n    'icon_emoji': \":robot_face:\",\n    'link_names': 1,\n}))</code></pre></div>\n<h2 id=\"slackに画像を投稿\" style=\"position:relative;\"><a href=\"#slack%E3%81%AB%E7%94%BB%E5%83%8F%E3%82%92%E6%8A%95%E7%A8%BF\" aria-label=\"slackに画像を投稿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slackに画像を投稿</h2>\n<p>モバイル版のSlackでもプレビュー見たい問題のため、画像も投稿します。ただ、こちらもほぼ上記と同じなのでスクリプトは割愛します。</p>\n<p>ちなみに、<strong>output_pictures best</strong>にすると、動画の作成完了まで画像は保存されませんので、投稿スピードは遅いです。</p>\n<h2 id=\"できた\" style=\"position:relative;\"><a href=\"#%E3%81%A7%E3%81%8D%E3%81%9F\" aria-label=\"できた permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>できた！</h2>\n<p><img src=\"https://i.imgur.com/m5HEdzHl.png\" alt=\"img\"></p>\n<p>このように監視カメラで動体検知をするとSlackに通知が飛び、画像と動画が確認できるようになりました。</p>\n<p>ちょっと検知閾値が低すぎて、シーリングライトのオンオフでも反応しますが、反応しないよりはいいかなと思ってます。</p>\n<h2 id=\"問題発生\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E7%99%BA%E7%94%9F\" aria-label=\"問題発生 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題発生</h2>\n<p>無事完成となったのですが、早速致命的な問題が起きてしまいます。</p>\n<p>motion起動から3～4時間すると、カメラモジュールがハングってしまい釣られてmotion自体もdefunctして完全にOS再起動以外直す手段がなくなってしまう事象が発生しました。</p>\n<p>とりあえず、カメラモジュールがハングった場合最低でも検知できないとまずいので<strong>on_camera_lost</strong>を設定します。</p>\n<p>こちらもスクリプトは割愛しますが、incoming webhookでカメラモジュールのハングを通知する仕組みです。</p>\n<p><img src=\"https://i.imgur.com/tpdlfLfl.png\" alt=\"img\"></p>\n<p>うまく検知できてますね。</p>\n<p>Slackで通知を受け取ることでますます再現性が高いことがわかったので、何か根本的な原因があると思いとりあえず思い当たる2つを修正しました。</p>\n<ul>\n<li>osのdist-upgrade不具合が解消されてるかもしれない</li>\n<li>オーバークロックの無効化</li>\n</ul>\n<p>こちら二つを実施したところ直りました。何だったんでしょうか。。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>とりあえず監視カメラが自作できたのでラズパイ有効活用は成功ではないでしょうか？</p>","fields":{"slug":"2021/07/21/motion-ir"},"frontmatter":{"tags":["RaspberryPi","motion","監視カメラ","Slack"],"templateKey":"blog-post","slug":"2021/07/21/motion-ir","id":null,"title":"赤外線付きカメラモジュールとmotionを古いラズパイにつけてSlackと連動した監視システムを作ろう","url":"2021/07/21/motion-ir","date":"2021-07-21T10:08:14.329Z","description":"ラズパイが家に溢れてもったいないので赤外線付きカメラモジュールとmotionを古いラズパイにつけてSlackと連動した監視システムを作ることにしました","headerImage":"https://i.imgur.com/JaW3aQ0.jpg","year":"2021","month":"07"}}},{"node":{"id":"1f0c4c2a-5b8e-5420-aba9-7e0a166bc2df","html":"<p>壊れたら直そう。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#akg-k712-pro\">AKG K712 PRO</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B7%E3%83%A7%E3%83%83%E3%82%AF\">ショック</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BB%A3%E6%9B%BF%E6%A9%9F%E3%81%AE%E3%82%BC%E3%83%B3%E3%83%8F%E3%82%A4%E3%82%B6%E3%83%BC-hd-599-se\">代替機のゼンハイザー HD 599 SE</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%9B%B4%E3%81%99\">直す</a></p>\n<ul>\n<li><a href=\"#%E5%88%86%E8%A7%A3%E3%81%99%E3%82%8B\">分解する。</a></li>\n<li><a href=\"#%E3%81%AF%E3%82%93%E3%81%A0\">はんだ</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%81%9E%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B\">聞いてみる</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"akg-k712-pro\" style=\"position:relative;\"><a href=\"#akg-k712-pro\" aria-label=\"akg k712 pro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AKG K712 PRO</h2>\n<p>オーディオ好きな皆さんならAKGというメーカーを一度は耳にしたことがあるかもしれませんが、私が家で使っているヘッドホンはAKGです。</p>\n<p><strong>AKG K712 PRO</strong>というモデルで某音楽アニメ界隈で有名なK701に似ている感じの見た目をしてます。</p>\n<p><img src=\"https://i.imgur.com/gGF186z.jpg\" alt=\"img\"></p>\n<p>私は某音楽アニメをリアルタイムでやっているときは高校生だったのですが、それまで過疎っていた軽音部がアニメ放送翌年からめっちゃ人が入ってきたのを覚えてます。</p>\n<p>さて、話を戻してK712の話ですが、いい意味で着色の少ないクリア、そしてオープンイヤーらしいこもりのない低音と抜けのいい高音と、非常に音質が良く、イヤーパッドも優秀で聞き疲れが少ないため非常に気に入っていました。</p>\n<p><strong>いました。</strong></p>\n<p>そうです。壊れました。</p>\n<p>右から音が出なくなったのです。</p>\n<h2 id=\"ショック\" style=\"position:relative;\"><a href=\"#%E3%82%B7%E3%83%A7%E3%83%83%E3%82%AF\" aria-label=\"ショック permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ショック</h2>\n<p>寿命かなぁ...と思ったものの、買って3年そこそこで(毎日使ってますが)、そんなに安くない(32000円ちょい)買い物だったので超ショックでした。</p>\n<h2 id=\"代替機のゼンハイザー-hd-599-se\" style=\"position:relative;\"><a href=\"#%E4%BB%A3%E6%9B%BF%E6%A9%9F%E3%81%AE%E3%82%BC%E3%83%B3%E3%83%8F%E3%82%A4%E3%82%B6%E3%83%BC-hd-599-se\" aria-label=\"代替機のゼンハイザー hd 599 se permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>代替機のゼンハイザー HD 599 SE</h2>\n<p>ヘッドホンが家で使えないのは深夜の音楽視聴やギター演奏をするうえで非常に問題なので、とりあえず、<strong>ゼンハイザー HD 599 SE</strong>をしばらく使ってました。</p>\n<p><img src=\"https://i.imgur.com/rAvUEbg.jpg\" alt=\"img\"></p>\n<p>値段的には16000円ちょっとで価格から考えれば申し分ない音質で大変満足していたのですが、、K712と比べるとオケの分解能というか、<strong>楽器の音が聞き分けずらい</strong>気がしてました。(好みの差なのかもしれません)まぁ倍額するヘッドホンと比べるのはさすがにフェアではないですが。</p>\n<h2 id=\"直す\" style=\"position:relative;\"><a href=\"#%E7%9B%B4%E3%81%99\" aria-label=\"直す permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>直す</h2>\n<p>K712直します。有線ヘッドホンなので、直せるかな？という安直な考えですが直します。</p>\n<p>テスターで確認してもやはり右側が通電してませんね。</p>\n<h3 id=\"分解する\" style=\"position:relative;\"><a href=\"#%E5%88%86%E8%A7%A3%E3%81%99%E3%82%8B\" aria-label=\"分解する permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>分解する。</h3>\n<p>とりあえず右側を分解していきます。Kシリーズ、なんか耐久性がゴミらしく結構分解レビューがネット上に転がってました。表面のボコっとしているところをひねって分解していきます。</p>\n<p><img src=\"https://i.imgur.com/c1zWc7jl.jpg\" alt=\"img\"></p>\n<p>私のゴリラ分解が祟って、オレンジのアクセントがかわいいリングがぶっ壊れました。音質に関係ないので問題ございません。</p>\n<p><img src=\"https://i.imgur.com/gzr5UZSl.jpg\" alt=\"\"></p>\n<p>無事ボコっとしているところをはずせました。</p>\n<p><img src=\"https://i.imgur.com/qLRAKQyl.jpg?1\" alt=\"img\"></p>\n<p>ネジさんが出てきたのでこちらも外します。</p>\n<p><img src=\"https://i.imgur.com/OqwOTGul.jpg\" alt=\"img\"></p>\n<p>ふたっぽいものを開けます。ゴリラ分解にならないようにはんだ用フックでゆっくり開けていきます。</p>\n<p><img src=\"https://i.imgur.com/biqaakzl.jpg\" alt=\"img\"></p>\n<p>とれました。汚いですね。</p>\n<p>構造は意外に単純で、左側から右側へはヘッドの部分から鉄芯が通っていてそれがドライバーの方とつながっているようですね。</p>\n<p>写真では伝わらないですが、白い線がドライバー側から完全に離れてしまってます。これが原因ですね。</p>\n<p>というより、こんな細い線でつながないでくれ。壊れるから。</p>\n<h3 id=\"はんだ\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%82%93%E3%81%A0\" aria-label=\"はんだ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はんだ</h3>\n<p>はんだやります。はんだは、工業高校のオープンスクールの時に教えてもらった知識以外は自己流ですが今まで困ったことはないので進めます。</p>\n<p><del>工業高校電子科の先生、あの折はありがとうございました。結局入学しなくてごめんなさい。</del></p>\n<p>使うはんだは本当は音響機器用のやつがいいと思いますが、鉛が入っていればええんや！という何とも微妙な考えで、小学生の時に作った電子時計の組み立て時に使った普通のはんだがまだ余っていたので使います。</p>\n<p>多分時代的にも鉛フリーではなかったと思いますので。</p>\n<p><img src=\"https://i.imgur.com/O4cj5I6l.jpg\" alt=\"img\"></p>\n<p>できました。</p>\n<p>多少はんだ量が多い気もしますが、いいでしょう。テスターでもちゃんと通電することが確認できました。</p>\n<h2 id=\"聞いてみる\" style=\"position:relative;\"><a href=\"#%E8%81%9E%E3%81%84%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"聞いてみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>聞いてみる</h2>\n<p>さぁ早速聞いてみます。</p>\n<p>おぉ！両耳から聞こえますね！音質も問題ない気がします。</p>\n<p>HD 599 SEと聞き比べてみましょう。課題曲は星屑☆シーカーです。ナナシスですね。</p>\n<iframe src=\"https://open.spotify.com/embed/track/6coUogkTXHl2KnHcAiZAkm\" width=\"100%\" height=\"80\" frameBorder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n<p>HD 599 SEも十分すごいいい感じなのは間違いないです。むしろ全体的なまとまりはHD 599 SEの方がいい気がします。</p>\n<p>しかしK712の音の広がりとステレオ感はやはり軍配が上がります。</p>\n<p>あと、インピーダンスがK712の方が高いのか、K712は結構音量は上げないといけません。お家で聞くのでオーディオインターフェースに刺す使い方しかしないので問題なさそうですね。</p>\n<p><img src=\"https://i.imgur.com/OphzXjLl.jpg\" alt=\"inmg\"></p>\n<p>さぁ、お帰りなさいK712。もうちょっと頑張ってもらいますかね。</p>","fields":{"slug":"2021/07/20/akg-fix"},"frontmatter":{"tags":["AKG","工作","修理"],"templateKey":"blog-post","slug":"2021/07/20/akg-fix","id":null,"title":"AKG K712 PROが断線して音が出なくなったので直した","url":"2021/07/20/akg-fix","date":"2021-07-20T07:06:24.317Z","description":"AKG K712 PROが断線して右から音がでなくなったので直しました。","headerImage":"https://i.imgur.com/OphzXjL.jpg","year":"2021","month":"07"}}},{"node":{"id":"f5502b96-2be3-5a38-9c13-c013842e446d","html":"<p>作りました。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#google-chrome-theme\">Google Chrome Theme</a></li>\n</ul>\n</div>\n<h2 id=\"google-chrome-theme\" style=\"position:relative;\"><a href=\"#google-chrome-theme\" aria-label=\"google chrome theme permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Google Chrome Theme</h2>\n<p>仕事で、複数のユーザーでGoogle Chromeを操作する必要があったので、わかりやすいようにThemeで分けるようにしました。</p>\n<p><img src=\"https://i.imgur.com/LRpecqU.png\" alt=\"imgf\"></p>\n<p>昔撮ったネコちゃんの画像です。</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/sleepy-cat/aamphdljoconhcmnenjpjfakgllipjgl?hl=ja&#x26;authuser=0\" target=\"_blank\" rel=\"noopener noreferrer\">sleepy cat</a></p>\n<p>ダウンロードしてね。</p>","fields":{"slug":"2021/07/08/chrome-theme"},"frontmatter":{"tags":["GoogleChrome","テーマ"],"templateKey":"blog-post","slug":"2021/07/08/chrome-theme","id":null,"title":"Google Chromeのテーマを作った(その2)","url":"2021/07/08/chrome-theme","date":"2021-07-08T14:11:26.832Z","description":"Chromeのユーザー設定を増やす必要があったので、Google Chromeのテーマを作りました。\n\n","headerImage":"https://i.imgur.com/LRpecqU.png","year":"2021","month":"07"}}},{"node":{"id":"405541f2-306e-5f7e-82ec-5b2eb1c64caa","html":"<p>貧乏人はつらいです。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<p><a href=\"#%E7%9A%86%E3%81%95%E3%82%93%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E6%8A%80%E8%A1%93%E3%83%8D%E3%82%BF%E3%82%AD%E3%83%A3%E3%83%83%E3%83%81%E3%82%A2%E3%83%83%E3%83%97%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B\">皆さん、どうやって技術ネタ、キャッチアップしてますか？</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%9A%86%E3%81%95%E3%82%93%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E3%83%96%E3%83%AD%E3%82%B0%E8%A8%98%E4%BA%8B%E3%82%92%E9%80%9A%E7%9F%A5%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B\">皆さん、どうやってブログ記事を通知してますか？</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\">問題点</a></p>\n<ul>\n<li><a href=\"#ifttt%E3%81%AF%E3%81%A9%E3%81%86%E3%81%AA%E3%81%AE\">IFTTTはどうなの？</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E3%81%98%E3%82%83%E3%81%82%E4%BD%9C%E3%82%8D%E3%81%A3%E3%81%8B\">じゃあ作ろっか</a></p>\n</li>\n<li>\n<p><a href=\"#feedparser\">feedparser</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E7%AE%A1%E7%90%86\">ステート管理</a></p>\n<ul>\n<li><a href=\"#harperdb\">HarperDB</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ogp%E7%94%BB%E5%83%8F%E3%82%92%E5%BE%97%E3%82%8B%E3%81%AB%E3%81%AF\">OGP画像を得るには？</a></p>\n<ul>\n<li><a href=\"#opengraph-py3\">opengraph-py3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#favicon\">Favicon</a></p>\n</li>\n<li>\n<p><a href=\"#%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E6%8A%BD%E5%87%BA\">キーワード抽出</a></p>\n<ul>\n<li><a href=\"#rss%E3%81%AEsummarytext%E3%81%A7%E3%81%AF%E7%B2%BE%E5%BA%A6%E3%81%8C%E3%81%A7%E3%81%AA%E3%81%84%E3%81%9D%E3%82%8A%E3%82%83%E3%81%9D%E3%81%86%E3%81%98%E3%82%83\">RSSのSummaryTextでは精度がでない、そりゃそうじゃ。</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#slack%E6%8A%95%E7%A8%BF\">Slack投稿</a></p>\n</li>\n<li>\n<p><a href=\"#github-actions%E5%8C%96\">GitHub Actions化</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AE%8C%E6%88%90\">完成</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h2 id=\"皆さんどうやって技術ネタキャッチアップしてますか\" style=\"position:relative;\"><a href=\"#%E7%9A%86%E3%81%95%E3%82%93%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E6%8A%80%E8%A1%93%E3%83%8D%E3%82%BF%E3%82%AD%E3%83%A3%E3%83%83%E3%83%81%E3%82%A2%E3%83%83%E3%83%97%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B\" aria-label=\"皆さんどうやって技術ネタキャッチアップしてますか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>皆さん、どうやって技術ネタ、キャッチアップしてますか？</h2>\n<p>皆さんはどうやって日々日進月歩な技術ネタをキャッチアップしてますか？</p>\n<p>私はよく企業や個人が書いている技術ブログから情報を得ることが多いです。本当に技術ブログって手軽なのにすごい勉強になりますよね。</p>\n<h2 id=\"皆さんどうやってブログ記事を通知してますか\" style=\"position:relative;\"><a href=\"#%E7%9A%86%E3%81%95%E3%82%93%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E3%83%96%E3%83%AD%E3%82%B0%E8%A8%98%E4%BA%8B%E3%82%92%E9%80%9A%E7%9F%A5%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99%E3%81%8B\" aria-label=\"皆さんどうやってブログ記事を通知してますか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>皆さん、どうやってブログ記事を通知してますか？</h2>\n<p>ブログ記事確認はもちろん定期的にブログに訪問するのが一番ですが、なかなか時間の取れない中でそれは酷なので何かしら皆さん工夫していると思います。</p>\n<p>ブログの更新にあわせてTwitterを更新してくれる企業様であれば、Twitterのフォローをすればいいかもしれませんが、必ずしもそうでもないかもしれませんし、Twitterのフォローには技術以外の話題も飛び交うので、集中して記事を確認することも難しいかもしれません。</p>\n<p>そういったときに役立つのがRSSです。RSSとは<strong>R</strong>ich <strong>S</strong>ite <strong>S</strong>ummaryの略で、ニュースやブログなど各種のWebサイトの更新情報を配信するための仕組みやXMLフォーマットのことです。</p>\n<p>RSSの更新を定期的に取得し、記事更新を教えてくれるRSSリーダーは皆さんお世話になっている人も多いのではないでしょうか？</p>\n<p>私もGoogle Chromeに拡張としてRSSリーダーを入れていた時期もありました。</p>\n<h2 id=\"問題点\" style=\"position:relative;\"><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\" aria-label=\"問題点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>問題点</h2>\n<p>RSSリーダーを使って技術ブログの更新を検知する方法はおそらくデファクトスタンダードだと思いますが、個人的にちょっと問題点がありました。</p>\n<p>それは、<strong>通勤時間の時間をうまく使ってキャッチアップするのが面倒ということです。</strong></p>\n<ul>\n<li>携帯にPCと同じRSSを登録するのがめんどくさい</li>\n<li>RSSリーダーを開かない\n<ul>\n<li>電車に乗っているとTwitterやSlackを開いている時間がほぼすべて</li>\n<li>Kindleで読書するのも細かく乗り換えがあって中断が多く発生するためストレス</li>\n</ul>\n</li>\n<li>(RSSリーダーによって違うのかもしれませんが)タイトルを見て中身を判断するのが難しい</li>\n</ul>\n<p>このような悩みがあるため、私は<strong>Slack</strong>の**/feed**機能を使ってRSSを購読してました。</p>\n<p>が、しかしこれもまたもや問題点。Slackの無料ワークスペースには、Appsが10個までしか登録できないのです。(/feedもAppsを消費します)</p>\n<p>Slackには他にもAppsをいくつか作って入れているため、実際登録できるRSSは5個くらいになってしまいちょっと心もとない感じになってしまいました。</p>\n<h3 id=\"iftttはどうなの\" style=\"position:relative;\"><a href=\"#ifttt%E3%81%AF%E3%81%A9%E3%81%86%E3%81%AA%E3%81%AE\" aria-label=\"iftttはどうなの permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IFTTTはどうなの？</h3>\n<p>ちょっと詳しい人だと「じゃあIFTTT」はどうなんです？という意見が聞こえてきそうですが結果的にこちらも不採用。</p>\n<p>理由は上記とほぼ同じで、無料版だと設定できる数に制限があるためこちらもあえなく不採用。</p>\n<p>というより、お金出せよって声が聞こえてきますね。</p>\n<h2 id=\"じゃあ作ろっか\" style=\"position:relative;\"><a href=\"#%E3%81%98%E3%82%83%E3%81%82%E4%BD%9C%E3%82%8D%E3%81%A3%E3%81%8B\" aria-label=\"じゃあ作ろっか permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>じゃあ作ろっか</h2>\n<p>ということで、作ります。</p>\n<p>要求は次の通りのことを満たす必要があります。</p>\n<ul>\n<li>無制限にRSSを登録できること</li>\n<li>更新がある場合のみSlackに投稿すること</li>\n<li>SlackもAppsを消費しないこと(Custom Integration)</li>\n<li>できれば内容を要約したものや、OGP画像も一緒に投稿して記事の選別に役立てられる付加機能を作ること</li>\n</ul>\n<h2 id=\"feedparser\" style=\"position:relative;\"><a href=\"#feedparser\" aria-label=\"feedparser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>feedparser</h2>\n<p>今回は時間もない中だったのでサクッとPythonで作っていきます。</p>\n<p>RSSの購読には<a href=\"https://pythonhosted.org/feedparser/\" target=\"_blank\" rel=\"noopener noreferrer\">feedparser</a>を使うと便利です。</p>\n<p>RSS2.0だけでなく、Atomや古いRSSの形式でも難なく読み込んでくれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> feedparser\nentries <span class=\"token operator\">=</span> feedparser<span class=\"token punctuation\">.</span>parse<span class=\"token punctuation\">(</span><span class=\"token string\">'http://feedparser.org/docs/examples/rss20.xml'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> e <span class=\"token keyword\">in</span> entries<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>summary<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Entry Itemへのアクセスはイテレーターになっているので取り出しもかんたんです。</p>\n<p>RSSのEntry Itemの取り出しはこれで進めます。本当にかんたんでありがたい。</p>\n<p>さらに便利なのは<strong>published_parsed</strong>という項目がEntry Itemから取れます。</p>\n<p>こちら、RSSのpublished_dateをdatetimeオブジェクトにパースしてくれます。</p>\n<p>おかげで、フォーマット差分をあまり意識することなく、更新差分チェック実装ができました。</p>\n<h2 id=\"ステート管理\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E7%AE%A1%E7%90%86\" aria-label=\"ステート管理 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ステート管理</h2>\n<p>RSSには記事の作成日付(Publish Date)があり、RSSの取得のたびに差分チェックとして活用できます。</p>\n<p>なので、以前取得した記事のPublish Dateを記憶して、更新があった場合のみ記事を取得するようにしたいのですが、それには何かしらのDB、もしくはデータ保存する仕組みが必要となります。</p>\n<p>今回は無料という縛りがあるため、当初はGitHubのレポジトリ上にステートファイルをコミットするようにしようとも思ったのですが、コミットが伸び過ぎてしまうのは色々問題なのでやはりDBを使いたいです。</p>\n<h3 id=\"harperdb\" style=\"position:relative;\"><a href=\"#harperdb\" aria-label=\"harperdb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HarperDB</h3>\n<p>HarperDBは、データ管理を容易にすることに重点を置いた分散型データベースで、ジョインを含むNoSQLとSQLをサポートしています。</p>\n<p>NoSQLでSQLがかけるのは便利ですね!!</p>\n<p>日本ではあまり聞きませんが、<a href=\"https://dev.to/\" target=\"_blank\" rel=\"noopener noreferrer\">dev.to</a>とかだとちょこちょこ話題に上がっております。</p>\n<p>こちらのHarperDB、HarperDB Cloud Instanceというマネージドサービスも提供されており、インスタンスタイプを選ぶだけで、手軽にHarperDBを使うことができるようになっております。</p>\n<p><img src=\"https://i.imgur.com/CA1sLCU.png\" alt=\"harperdb\"></p>\n<p><img src=\"https://i.imgur.com/48qXVQw.png\" alt=\"img\"></p>\n<p>え？でもお高いんじゃない？そんな声が聞こえてきますね。</p>\n<p>なんと、今だけかもしれませんがHarperDB Cloud Instanceの一番最小のInstance構成だと無料で使うことができます！これは嬉しいですね。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RAM</td>\n<td>0.5GB</td>\n</tr>\n<tr>\n<td>DISK</td>\n<td>1GB</td>\n</tr>\n<tr>\n<td>VERSION</td>\n<td>3.0.0</td>\n</tr>\n<tr>\n<td>IOPS</td>\n<td>3000</td>\n</tr>\n</tbody>\n</table>\n<p>正直今回の使い方ではこのレベルで十分です。</p>\n<p>Python上でのHarperDB操作も<a href=\"https://pypi.org/project/harperdb/\" target=\"_blank\" rel=\"noopener noreferrer\">専用のライブラリ</a>が用意されているためかんたんに実装できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">HARPERDB_URL <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_URL\"</span><span class=\"token punctuation\">)</span>\nHARPERDB_USERNAME <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_USERNAME\"</span><span class=\"token punctuation\">)</span>\nHARPERDB_PASSWORD <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_PASSWORD\"</span><span class=\"token punctuation\">)</span>\nHARPERDB_SCHEMA <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_SCHEMA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prd\"</span><span class=\"token punctuation\">)</span>\nFILEPATH <span class=\"token operator\">=</span> <span class=\"token string\">\"entry.csv\"</span>\n\ndb <span class=\"token operator\">=</span> harperdb<span class=\"token punctuation\">.</span>HarperDB<span class=\"token punctuation\">(</span>\n    url<span class=\"token operator\">=</span>HARPERDB_URL<span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">=</span>HARPERDB_USERNAME<span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">=</span>HARPERDB_PASSWORD<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\ntest <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>search_by_hash<span class=\"token punctuation\">(</span>HARPERDB_SCHEMA<span class=\"token punctuation\">,</span> <span class=\"token string\">\"last_published\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> get_attributes<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> test<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>このようにNoSQLライクにHash Attributeを使って検索する感じで実装できます。もちろんValue引きも可能です。(遅くなるのかは不明だがNoSQLなら全走査になりそうなので多分遅い)</p>\n<p>UpdateやInsertも同様な感じで実施できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ef insert_last_published<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    db<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>HARPERDB_SCHEMA<span class=\"token punctuation\">,</span> <span class=\"token string\">\"last_published\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">123456789</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">123456789</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">update_last_published</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>HARPERDB_SCHEMA<span class=\"token punctuation\">,</span> <span class=\"token string\">\"last_published\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"time\"</span><span class=\"token punctuation\">:</span> time<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>また、便利だなと思ったのはやはりSQLでの走査です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_entry_urls</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"url\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"icon\"</span><span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">\"icon\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> db<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"select * from </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>HARPERDB_SCHEMA<span class=\"token punctuation\">}</span></span><span class=\"token string\">.entry_urls\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>といった具合にテーブルの＊Selectやジョインなんかも書くことができます。テーブル全体をなめたいとき、これは楽でいいですね。</p>\n<p>また、CSV load機能もあり、CSVをHarperDBに食わせることもできちゃったりします。</p>\n<p>今回はこちらの機能はRSSのEntryURL登録機能として便利に使用させていただきました。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> harperdb\n\nHARPERDB_URL <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_URL\"</span><span class=\"token punctuation\">)</span>\nHARPERDB_USERNAME <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_USERNAME\"</span><span class=\"token punctuation\">)</span>\nHARPERDB_PASSWORD <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_PASSWORD\"</span><span class=\"token punctuation\">)</span>\nHARPERDB_SCHEMA <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"HARPERDB_SCHEMA\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"prd\"</span><span class=\"token punctuation\">)</span>\nFILEPATH <span class=\"token operator\">=</span> <span class=\"token string\">\"entry.csv\"</span>\n\ndb <span class=\"token operator\">=</span> harperdb<span class=\"token punctuation\">.</span>HarperDB<span class=\"token punctuation\">(</span>\n    url<span class=\"token operator\">=</span>HARPERDB_URL<span class=\"token punctuation\">,</span>\n    username<span class=\"token operator\">=</span>HARPERDB_USERNAME<span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">=</span>HARPERDB_PASSWORD<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\ndb<span class=\"token punctuation\">.</span>csv_data_load<span class=\"token punctuation\">(</span>HARPERDB_SCHEMA<span class=\"token punctuation\">,</span> <span class=\"token string\">\"entry_urls\"</span><span class=\"token punctuation\">,</span> FILEPATH<span class=\"token punctuation\">,</span> action<span class=\"token operator\">=</span><span class=\"token string\">\"upsert\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>無料開発で一番ネックになるのがDBですが、正直これだけで大概のアプリは作れてしまうのではないでしょうか？</p>\n<h2 id=\"ogp画像を得るには\" style=\"position:relative;\"><a href=\"#ogp%E7%94%BB%E5%83%8F%E3%82%92%E5%BE%97%E3%82%8B%E3%81%AB%E3%81%AF\" aria-label=\"ogp画像を得るには permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OGP画像を得るには？</h2>\n<p>OGPとは<strong>O</strong>pen <strong>G</strong>raph <strong>P</strong>rotocolの略で、TwitterやFacebookにURLリンクを貼り付けると出てくるあれです。</p>\n<p><img src=\"https://i.imgur.com/4LAaL3b.png\" alt=\"img\"></p>\n<p>実際OGP作成を実装されたほうならわかりますが、OGPはHTMLのHeaderに決まりきったmetaタグを記載して表現しております。</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>article<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://blog.tubone-project24.xyz/2021/01/01/mqtt-nenga<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MQTTと電子ペーパーを使って年賀状を作る<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年賀書きたくないマン Table of Contents 一年の計は元旦にあり 注意 年末年始はやってみようBOX MQTT React Hooks Tailwind CSS 電子ペーパー やらないことにしようBOX アーキテクチャー 辛かったこと Hooks…<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://i.imgur.com/tmkmoVA.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>twitter:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MQTTと電子ペーパーを使って年賀状を作る<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>twitter:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>年賀書きたくないマン Table of Contents 一年の計は元旦にあり 注意 年末年始はやってみようBOX MQTT React Hooks Tailwind CSS 電子ペーパー やらないことにしようBOX アーキテクチャー 辛かったこと Hooks…<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>twitter:image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://i.imgur.com/tmkmoVA.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-react-helmet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Slackのattachmentsに入れる画像はOGPのImageから取るようにします。</p>\n<h3 id=\"opengraph-py3\" style=\"position:relative;\"><a href=\"#opengraph-py3\" aria-label=\"opengraph py3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>opengraph-py3</h3>\n<p>PythonでOGPを解析するなら<a href=\"https://pypi.org/project/opengraph_py3/\" target=\"_blank\" rel=\"noopener noreferrer\">opengraph</a>ライブラリが便利です。ただし、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install opengraph</code></pre></div>\n<p>でインストールするとPython2用のライブラリがインストールされてしまいまともに動かないので、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pip install opengraph_py3</code></pre></div>\n<p>でインストールするようにします。</p>\n<p>使い方もかんたんで、<strong>opengraph_py3.OpenGraph</strong>でインスタンスを作ってあげれば、**ogp[\"image\"]**にOGPイメージURLが保存されます。</p>\n<p>一点注意としてopengraphは裏でBeautifulSoapが動いているようで、Headerのないページに対してOGPを取得しようとするとAttributeErrorが出てしまうので例外処理を入れております。</p>\n<p>本家にPR出すか迷いましたが、2017年から更新がないので骨折り損になりそうなので、やめておきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> opengraph_py3\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_ogp_image</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        ogp <span class=\"token operator\">=</span> opengraph_py3<span class=\"token punctuation\">.</span>OpenGraph<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>link<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> ogp<span class=\"token punctuation\">.</span>is_valid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> ogp<span class=\"token punctuation\">[</span><span class=\"token string\">\"image\"</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">except</span> AttributeError <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"No Head contents: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>e<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span></code></pre></div>\n<h2 id=\"favicon\" style=\"position:relative;\"><a href=\"#favicon\" aria-label=\"favicon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Favicon</h2>\n<p>できれば、Slack投稿するときに技術ブログのアイコンをブログごとに変えたいなと思ったので、Faviconを取る実装も入れます。</p>\n<p>Pythonにはfavicon取るためのライブラリ<a href=\"https://pypi.org/project/favicon/\" target=\"_blank\" rel=\"noopener noreferrer\">favicon</a>があります。</p>\n<p>使い方も超かんたんで、<strong>favicon.get</strong>で取得したオブジェクトの配列0番目が一番大きなfaviconなのでそれを取るだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> favicon\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_favicon</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    icons <span class=\"token operator\">=</span> favicon<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>icons<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> icons<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>url</code></pre></div>\n<h2 id=\"キーワード抽出\" style=\"position:relative;\"><a href=\"#%E3%82%AD%E3%83%BC%E3%83%AF%E3%83%BC%E3%83%89%E6%8A%BD%E5%87%BA\" aria-label=\"キーワード抽出 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>キーワード抽出</h2>\n<p>さて、今回の醍醐味のキーワード抽出ですがこちらもかんたんに実装できます。</p>\n<p><a href=\"http://gensen.dl.itc.u-tokyo.ac.jp/pytermextract/\" target=\"_blank\" rel=\"noopener noreferrer\">pytermextract</a>という専門用語抽出ツールと形態素解析ライブラリ<a href=\"https://mocobeta.github.io/janome/\" target=\"_blank\" rel=\"noopener noreferrer\">janome</a>を組み合わせることでかんたんに実現できます。</p>\n<p>janomeは本当に便利で、特にCIに乗っけてぐるぐるしたい人にはmecabをインストールする必要も辞書をコンパイルする必要もなく、pipで一発入れれば使えるので重宝しています。</p>\n<p>pytermextractはPyPI登録されているライブラリではないのでインストールは公式サイトから落としたZIPを展開しsetup.pyから行います。</p>\n<p>また、janomeもpipでインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">unzip</span> pytermextract-0_01.zip\n<span class=\"token builtin class-name\">cd</span> pytermextract-0_01\npython setup.py <span class=\"token function\">install</span>\n\npip <span class=\"token function\">install</span> janome</code></pre></div>\n<p>まずは、キーワード抽出したいテキストをjanomeのTokenizerにかけて、結果を頻出度から単名詞の左右の連接情報スコア(LR)を算出し、</p>\n<p>重要度スコアとしてはじき出す、という仕組みらしいです。とは言っても私にはよくわからなったのでサンプルコード丸パクリです。</p>\n<p>得られる結果は**{\"単語\": スコア}**となってますので、こちらをスコア順にリバースソートして上位6位を取得する形にしました。</p>\n<p>しょうもない知識ですが、janomeのTokenizerインスタンス作るところは処理コストがちょっと高いので、リファクタでモジュールトップレベルでの宣言にしてます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> janome<span class=\"token punctuation\">.</span>tokenizer <span class=\"token keyword\">import</span> Tokenizer\n<span class=\"token keyword\">import</span> termextract<span class=\"token punctuation\">.</span>janome\n<span class=\"token keyword\">import</span> termextract<span class=\"token punctuation\">.</span>core\n\nt <span class=\"token operator\">=</span> Tokenizer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">extract_keyword</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tokenize_text <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>tokenize<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    frequency <span class=\"token operator\">=</span> termextract<span class=\"token punctuation\">.</span>janome<span class=\"token punctuation\">.</span>cmp_noun_dict<span class=\"token punctuation\">(</span>tokenize_text<span class=\"token punctuation\">)</span>\n    lr <span class=\"token operator\">=</span> termextract<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>score_lr<span class=\"token punctuation\">(</span>\n        frequency<span class=\"token punctuation\">,</span>\n        ignore_words<span class=\"token operator\">=</span>termextract<span class=\"token punctuation\">.</span>janome<span class=\"token punctuation\">.</span>IGNORE_WORDS<span class=\"token punctuation\">,</span>\n        lr_mode<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> average_rate<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    term_imp <span class=\"token operator\">=</span> termextract<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>term_importance<span class=\"token punctuation\">(</span>frequency<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">)</span>\n    score_sorted_term_imp <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>term_imp<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    logger<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"keywords: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>score_sorted_term_imp<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> score_sorted_term_imp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"rssのsummarytextでは精度がでないそりゃそうじゃ\" style=\"position:relative;\"><a href=\"#rss%E3%81%AEsummarytext%E3%81%A7%E3%81%AF%E7%B2%BE%E5%BA%A6%E3%81%8C%E3%81%A7%E3%81%AA%E3%81%84%E3%81%9D%E3%82%8A%E3%82%83%E3%81%9D%E3%81%86%E3%81%98%E3%82%83\" aria-label=\"rssのsummarytextでは精度がでないそりゃそうじゃ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RSSのSummaryTextでは精度がでない、そりゃそうじゃ。</h3>\n<p>当初はfeedparserから取得できるEntry ItemのSummaryをpytermextractに食わせてましたが、SummaryTextが短すぎて全く期待する動作になりませんでしたので、BeautifulSoupを使って、実際の記事の本文を取得しpytermextractに食わせる実装に変更しました。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>request <span class=\"token keyword\">as</span> req\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">extract_html_text</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token string\">\"html.parser\"</span><span class=\"token punctuation\">)</span>\n    p_tag_list <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>find_all<span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span>get_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> p_tag_list<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>本文はpタグと判断しfind_allするちんけな実装です。ごめんなさい。</p>\n<h2 id=\"slack投稿\" style=\"position:relative;\"><a href=\"#slack%E6%8A%95%E7%A8%BF\" aria-label=\"slack投稿 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Slack投稿</h2>\n<p>いよいよSlack投稿部分の作成です。</p>\n<p>Slack投稿はCustomIntegrationのIncoming Webhookで作ります。</p>\n<p>なので、<a href=\"https://api.slack.com/reference/messaging/attachments\" target=\"_blank\" rel=\"noopener noreferrer\">Slack attachment</a>が使えます。</p>\n<p>特質したことはないのですが、OGP画像はimage_urlに、faviconはauthor_imageにキーワードはfieldsに入れてます。</p>\n<h2 id=\"github-actions化\" style=\"position:relative;\"><a href=\"#github-actions%E5%8C%96\" aria-label=\"github actions化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions化</h2>\n<p>最後にGitHub Actionsに載せて、定期実行させます。</p>\n<p>その前にの<a href=\"#harperdb\">#harperdb</a>でも書いたとおり、RSS追加時のHarperDBへのEntry追加の定義を書いていきます。</p>\n<p>特定のファイルに更新があった場合のみ動くGitHub Actionsを作る場合は、 on_pushなどの条件にpathsを入れることで実現できます。これだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"entry.csv\"</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n    <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"entry.csv\"</span></code></pre></div>\n<p>また、定期実行にはschedule cronが便利です。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> main\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*/30 * * * *\"</span></code></pre></div>\n<h2 id=\"完成\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%88%90\" aria-label=\"完成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成</h2>\n<p>ということでできました。</p>\n<p><img src=\"https://i.imgur.com/Ip4IaYs.png\" alt=\"img\"></p>\n<p>entry.csvに書いたRSS feedを30分ごとに確認しにいき、前回よりpublish_dateの更新があったばあいはOGP, favicon, キーワード付きでSlack投稿します。</p>\n<p>レポジトリはこちらです。</p>\n<p><a href=\"https://github.com/tubone24/tech_blog_spider\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/tubone24/tech_blog_spider</a></p>\n<p>ForkするとGitHubA　ctionsがうまく発火しないっぽいので、もし利用する際はgit cloneして自身のレポジトリに再Pushして使っていただければと思います。</p>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>HarperDBを使って何でもつくれそうな予感がするこの頃です。</p>","fields":{"slug":"2021/06/25/tech-blog-spider"},"frontmatter":{"tags":["RSS","HarperDB","feedparser","termextract"],"templateKey":"blog-post","slug":"2021/06/25/tech-blog-spider","id":null,"title":"スーパー完全無料でRSSをSlackに投稿できるやつを作った","url":"2021/06/25/tech-blog-spider","date":"2021-06-25T11:59:57.951Z","description":"貧乏人なので、完全無料でRSSを制限なくSlackできるやつがほしかったので作ることにしました。","headerImage":"https://i.imgur.com/Ip4IaYs.png","year":"2021","month":"06"}}}],"pathPrefix":"pages","first":false,"last":false,"index":2,"pageCount":11,"additionalContext":{"totalCount":110}}},"staticQueryHashes":["2959249232"]}