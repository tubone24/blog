{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020/1/24/elixir-loadtest","result":{"data":{"content":{"edges":[{"node":{"id":"61b313eb-74e7-5671-953b-5b6dea098319","excerpt":"Elixirを使ってAPIの負荷試験ツールを作りましたな話です。 Table of Contents 負荷試験について本気出して考えてみた ElixirでHttpリクエストをするならHttpoison Elixirで並列処理するならTask.asyncでしょ CSV…","fields":{"slug":"2020/1/24/elixir-loadtest"},"frontmatter":{"id":null,"title":"Elixirでパラレルな負荷試験ツールを作る","slug":"2020/1/24/elixir-loadtest","date":"2020-01-24T02:18:13.067Z","headerImage":"https://i.imgur.com/xBXKG7q.png","tags":["Elixir","Load Test"]}}}]}},"pageContext":{"id":"61b313eb-74e7-5671-953b-5b6dea098319","index":44,"repHtml":"<p>Elixirを使ってAPIの負荷試験ツールを作りましたな話です。</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li><a href=\"#%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E6%9C%AC%E6%B0%97%E5%87%BA%E3%81%97%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F\">負荷試験について本気出して考えてみた</a></li>\n<li><a href=\"#elixir%E3%81%A7http%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%82%92%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89httpoison\">ElixirでHttpリクエストをするならHttpoison</a></li>\n<li><a href=\"#elixir%E3%81%A7%E4%B8%A6%E5%88%97%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89taskasync%E3%81%A7%E3%81%97%E3%82%87\">Elixirで並列処理するならTask.asyncでしょ</a></li>\n<li><a href=\"#csv%E3%81%AB%E5%87%BA%E5%8A%9B\">CSVに出力</a></li>\n<li><a href=\"#%E5%AE%8C%E6%88%90\">完成</a></li>\n</ul>\n</div>\n<h2 id=\"負荷試験について本気出して考えてみた\" style=\"position:relative;\"><a href=\"#%E8%B2%A0%E8%8D%B7%E8%A9%A6%E9%A8%93%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E6%9C%AC%E6%B0%97%E5%87%BA%E3%81%97%E3%81%A6%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%81%9F\" aria-label=\"負荷試験について本気出して考えてみた permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>負荷試験について本気出して考えてみた</h2>\n<p>業務のなかで、負荷試験について考える機会が多かった年始明けでしたので、せっかくなのでよりいい<strong>負荷試験ツール</strong>を自作してみようかと思いました。</p>\n<p>負荷といえば並列なリクエスト、並列といえばやっぱ<del>ジャイアンツ</del><strong>Elixir</strong>ということで、Elixirで実装することにしました。</p>\n<h2 id=\"elixirでhttpリクエストをするならhttpoison\" style=\"position:relative;\"><a href=\"#elixir%E3%81%A7http%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E3%82%92%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89httpoison\" aria-label=\"elixirでhttpリクエストをするならhttpoison permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ElixirでHttpリクエストをするならHttpoison</h2>\n<p><a href=\"https://hex.pm/packages/httpoison\" target=\"_blank\" rel=\"noopener noreferrer\">HTTPoison</a>はElixirで使えるHTTPクライアントです。</p>\n<p>使い方もとっても簡単で、GET、POSTは下記のように実施できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token comment\"># GET</span>\n<span class=\"token module class-name\">HTTPoison</span><span class=\"token punctuation\">.</span><span class=\"token function\">get!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:timeout</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:infinity</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:recv_timeout</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:infinity</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># POST</span>\npayload <span class=\"token operator\">=</span> <span class=\"token module class-name\">Poison</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">%</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"contentType\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"key\"</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nret <span class=\"token operator\">=</span> <span class=\"token module class-name\">HTTPoison</span><span class=\"token punctuation\">.</span><span class=\"token function\">post!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://example.com\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:timeout</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:infinity</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom symbol\">:recv_timeout</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:infinity</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nupload_id <span class=\"token operator\">=</span> <span class=\"token module class-name\">Poison</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode!</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"upload_id\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>GETは<strong>HTTPoison.get()</strong>、POSTは<strong>HTTPoison.post!()</strong> で実施できます。簡単ですね。</p>\n<p><strong>!</strong> がついているかついていないかは例外を上げるか上げないかの違いです。</p>\n<p>ナオキ「例外あ、あげますね・・・。」</p>\n<p>1つ目の引数はURLですね。</p>\n<p>Payloadは2つ目の引数。<strong>Posion.encode!()</strong> にMapでKVを入れれば実現できます。これも簡単ですね!!残念ながら、GETのbodyは許容しません。</p>\n<p>3つ目はHeader。今回は使いませんね。</p>\n<p>4つ目はOptions。Timeoutなどを設定します。</p>\n<p>Timeoutは**:recv_timeout<strong>と</strong>:timeout**の２つを指定します。 負荷試験なので、Infinityにしておきます。</p>\n<p>ResponseがJsonの場合は**Poison.decode!()**でKVでアクセスできます。簡単ですね!!</p>\n<h2 id=\"elixirで並列処理するならtaskasyncでしょ\" style=\"position:relative;\"><a href=\"#elixir%E3%81%A7%E4%B8%A6%E5%88%97%E5%87%A6%E7%90%86%E3%81%99%E3%82%8B%E3%81%AA%E3%82%89taskasync%E3%81%A7%E3%81%97%E3%82%87\" aria-label=\"elixirで並列処理するならtaskasyncでしょ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Elixirで並列処理するならTask.asyncでしょ</h2>\n<p>正直ここらへんは<a href=\"https://qiita.com/kaonash/items/904fd165891b2070bb41\" target=\"_blank\" rel=\"noopener noreferrer\">ElixirのHttpoisonでAPI負荷検証ツールをつくった</a>を参考にしてます。</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">  <span class=\"token keyword\">def</span> <span class=\"token function\">send_requests_parallel</span><span class=\"token punctuation\">(</span>process_num<span class=\"token punctuation\">,</span>count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    time_total <span class=\"token operator\">=</span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">..</span>process_num<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token module class-name\">Task</span><span class=\"token punctuation\">.</span><span class=\"token function\">async</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fn</span> <span class=\"token operator\">-></span>\n      <span class=\"token argument variable\">&amp;1</span>\n      <span class=\"token function\">send_requests</span><span class=\"token punctuation\">(</span><span class=\"token attribute variable\">@url</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">|></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token module class-name\">Task</span><span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span><span class=\"token number\">1000_000</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token operator\">|></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">fn</span> x<span class=\"token punctuation\">,</span>total <span class=\"token operator\">-></span> total <span class=\"token operator\">+</span> x <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\n    <span class=\"token module class-name\">IO</span><span class=\"token punctuation\">.</span>inspect <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>count<span class=\"token delimiter punctuation\">}</span></span>, average_time: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>time_total <span class=\"token operator\">/</span> process_num <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token delimiter punctuation\">}</span></span> ms, time_total: <span class=\"token interpolation\"><span class=\"token delimiter punctuation\">#{</span>time_total <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token delimiter punctuation\">}</span></span> ms\"</span>\n  <span class=\"token keyword\">end</span></code></pre></div>\n<p>とやることで、並列処理&#x26;返ってきた実行時間を<strong>reduce</strong>で集計できます。すごいすごい。</p>\n<h2 id=\"csvに出力\" style=\"position:relative;\"><a href=\"#csv%E3%81%AB%E5%87%BA%E5%8A%9B\" aria-label=\"csvに出力 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSVに出力</h2>\n<p>こちらも超簡単。<a href=\"https://hexdocs.pm/csv/CSV.html\" target=\"_blank\" rel=\"noopener noreferrer\">CSV</a>という便利なライブラリをmixから落とせば簡単に実現できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"> <span class=\"token keyword\">def</span> <span class=\"token function\">write_csv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    file <span class=\"token operator\">=</span> <span class=\"token module class-name\">File</span><span class=\"token punctuation\">.</span><span class=\"token function\">open!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"response.csv\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token atom symbol\">:append</span><span class=\"token punctuation\">,</span> <span class=\"token atom symbol\">:utf8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    table_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    table_data <span class=\"token operator\">|></span> <span class=\"token module class-name\">CSV</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token attr-name\">headers:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> <span class=\"token module class-name\">Enum</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token module class-name\">IO</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> <span class=\"token argument variable\">&amp;1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">end</span></code></pre></div>\n<p>簡単ですね！</p>\n<h2 id=\"完成\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%88%90\" aria-label=\"完成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完成</h2>\n<p>完成しました。</p>\n<p><a href=\"https://github.com/tubone24/elixir_performance_tool\" target=\"_blank\" rel=\"noopener noreferrer\">elixir_performance_tool</a></p>\n<p>ついでにElixirのドキュメントツール<a href=\"https://github.com/elixir-lang/ex_doc\" target=\"_blank\" rel=\"noopener noreferrer\">ex_doc</a>を使ってドキュメントも作ってみました。</p>\n<p><a href=\"https://tubone24.github.io/elixir_performance_tool/readme.html\" target=\"_blank\" rel=\"noopener noreferrer\">Ebook Homebrew: ElixirPerformanceTool</a></p>\n<p>Elixirとっつきにくいかなぁと思いましたが、意外に簡単でした。</p>\n<p>こんな感じでAPIのレスポンスタイムを取得できました。</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\">iex<span class=\"token operator\">></span> <span class=\"token module class-name\">ElixirPerformanceTool</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"0, average_time: 1422.0 ms, time_total: 1422.0 ms\"</span>\n<span class=\"token string\">\"2, average_time: 843.0 ms, time_total: 843.0 ms\"</span>\n<span class=\"token string\">\"1, average_time: 1969.0 ms, time_total: 1969.0 ms\"</span>\n<span class=\"token string\">\"3, average_time: 844.0 ms, time_total: 844.0 ms\"</span>\n<span class=\"token string\">\"4, average_time: 844.0 ms, time_total: 844.0 ms\"</span>\n</code></pre></div>","words":1100,"minutes":3}},"staticQueryHashes":["1319877725","2959249232"]}