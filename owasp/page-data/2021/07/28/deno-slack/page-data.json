{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2021/07/28/deno-slack","result":{"data":{"content":{"edges":[{"node":{"id":"67afdae9-bf1f-591f-8c9b-b72773ab4edb","excerpt":"体重が落ちてきました！ Table of Contents スクリプトのTypeScript化 Denoとは？ 書いたコード 結論 スクリプトのTypeScript化 前回Hasura CloudのGraphQLが便利すぎた話の記事の最後の方でSlack…","fields":{"slug":"2021/07/28/deno-slack"},"frontmatter":{"id":null,"title":"Denoを使ってGraphQLを叩きながらSlackに投稿する","slug":"2021/07/28/deno-slack","date":"2021-07-27T15:07:09.874Z","headerImage":"https://i.imgur.com/iXpteuJ.jpg","tags":["Deno","GraphQL","Slack"]}}}]}},"pageContext":{"id":"67afdae9-bf1f-591f-8c9b-b72773ab4edb","index":13,"repHtml":"<p>体重が落ちてきました！</p>\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<div class=\"toc\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AEtypescript%E5%8C%96\">スクリプトのTypeScript化</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#deno%E3%81%A8%E3%81%AF\">Denoとは？</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\">書いたコード</a></p>\n</li>\n<li>\n<p><a href=\"#%E7%B5%90%E8%AB%96\">結論</a></p>\n</li>\n</ul>\n</div>\n<h3 id=\"スクリプトのtypescript化\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AEtypescript%E5%8C%96\" aria-label=\"スクリプトのtypescript化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>スクリプトのTypeScript化</h3>\n<p>前回<a href=\"https://blog.tubone-project24.xyz/2021/07/27/hasura-graphql#%E5%8F%8D%E7%9C%81\" target=\"_blank\" rel=\"noopener noreferrer\">Hasura CloudのGraphQLが便利すぎた話</a>の記事の最後の方でSlackにダッシュボードの情報をあげるスクリプトを作って定期的に実行させることをしました。</p>\n<p>がしかし、あろうことかスクリプトは<strong>TypeScript</strong>じゃなく、**JavaScript(ES module)**でした。</p>\n<p>どうして、TypeScriptにしなかったかというと、</p>\n<ul>\n<li>Projectで設定しているtsconfigをいじりたくなかった(Next.jsと単なるNode.jsスクリプトを共存させたくなかった)</li>\n<li>Buildしたdistの取り回しがめんどくさい</li>\n<li>ならばとDenoを使おうと思ったが色々失敗した</li>\n</ul>\n<p>という理由で、まぁただの付加機能でしかないのでmjsでぱぱっと作ってしまった、というわけです。</p>\n<p>今回はロジックは特に変えずにランタイムをDenoに変更し、ついでにTypeScript化させちゃいましょう。</p>\n<h2 id=\"denoとは\" style=\"position:relative;\"><a href=\"#deno%E3%81%A8%E3%81%AF\" aria-label=\"denoとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Denoとは？</h2>\n<p>Denoとは、Node.jsの作者であるRyan Dahlによって作られた、新しいJavaScript/TypeScriptランタイムです。</p>\n<p>Node.jsに関する10の反省点という講演のなかで氏がNode.jsのここがまずかった！ということをあげて、Denoのプロトタイプ版を出したのが始まりとか。</p>\n<p>ちなみに、Nodeを並べ替えるとDeno。</p>\n<p>ちなみにアイコンは恐竜らしい。ダイナソーでDeno。</p>\n<p>アイコンについてのおもしろ話は、</p>\n<iframe loading=\"lazy\" src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fhashrock.hatenablog.com%2Fentry%2F2019%2F02%2F04%2F040505\" title=\"Deno公式にアニメロゴが採用されたことと、許容的なリーダーの話 - No Regrets in Bathing\" class=\"embed-card embed-blogcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;\"></iframe>\n<p>を参照しよう！直接作者と会話できるのはいいですね。</p>\n<h2 id=\"書いたコード\" style=\"position:relative;\"><a href=\"#%E6%9B%B8%E3%81%84%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\" aria-label=\"書いたコード permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>書いたコード</h2>\n<p>実際、Denoで動かそうとNodeで動かそうとあまり違いがないと思ってたのですが細かい違いがありました。(初心者)</p>\n<p>まず、基本的なことですがビルトインの機能がすべて<strong>Deno</strong>に内包されてます。</p>\n<p>なので環境変数は、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const imgurClientId = Deno.env.get('IMGUR_CLIENT_ID') as string;</code></pre></div>\n<p>のように取得します。<strong>process.env</strong>ではないんですね。\r\nあとas stringという記述がありますがas stringしておかないと、fetch関数に渡すときTypeErrorとなってしまいます。</p>\n<p>Denoにはnpmやらpackage.jsonのようなモジュール管理がランタイムに内蔵されているため、importはURLで参照します。</p>\n<p>もちろんCommonJSのrequireなんてありません。なので、requireしていた部分も書き直しです。</p>\n<p>やはり便利だなと思ったのは<strong>サーバーでfetchが使える</strong>ことでしょうか？cross-fetchとか入れないでいいんですよ！</p>\n<p>(でもaxios使いたいマンなので、喜び半分くらいですね。)</p>\n<p>あと便利だなと思ったのはtop levelのコードで<strong>await</strong>って書いていいことですね。これはありがたい。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>encode<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'https://deno.land/std/encoding/base64.ts'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URI_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://xxxxx.hasura.app/v1/graphql'</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> filePath <span class=\"token operator\">=</span> <span class=\"token string\">'./cypress/screenshots/screenshot.spec.js/screenShot.png'</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> dashBoardUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://plant-check-graph.vercel.app/'</span>\r\n<span class=\"token keyword\">const</span> slackWebhookUrl <span class=\"token operator\">=</span> Deno<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SLACK_WEBHOOK_URL'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> imgurClientId <span class=\"token operator\">=</span> Deno<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'IMGUR_CLIENT_ID'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> readImageData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Deno<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">const</span> encodedData <span class=\"token operator\">=</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>readImageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">const</span> imgurPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  image<span class=\"token operator\">:</span> encodedData<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data.*base64,'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'base64'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> imgurHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">'Authorization'</span><span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Client-ID </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imgurClientId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> imgurRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.imgur.com/3/image'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> imgurHeaders<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>imgurPayload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> imgurJson <span class=\"token operator\">=</span> imgurRes<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> imgurData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> imgurJson\r\n<span class=\"token keyword\">const</span> imgurLink <span class=\"token operator\">=</span> imgurData<span class=\"token punctuation\">.</span>link\r\n\r\n<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  query<span class=\"token operator\">:</span> <span class=\"token string\">'query MyQuery {\\nraspi_plant_checker(order_by: {timestamp: desc}, limit: 1) {\\n      light\\n      moisture\\n      timestamp\\n      id\\n  }\\n}'</span><span class=\"token punctuation\">,</span>\r\n  variables<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\r\n  operationName<span class=\"token operator\">:</span> <span class=\"token string\">'MyQuery'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> hasuraHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> hasuraRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URI_ENDPOINT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> hasuraHeaders<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> hasuraJson <span class=\"token operator\">=</span> hasuraRes<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">const</span> hasuraData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> hasuraJson\r\n<span class=\"token keyword\">const</span> latestHasuraData <span class=\"token operator\">=</span> hasuraData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>raspi_plant_checker<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>latestHasuraData<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">const</span> slackPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  text<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">*How are you?* \\n&lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>dashBoardUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|Click here> for details! \\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>imgurLink<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\r\n  attachments<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n    <span class=\"token punctuation\">{</span>\r\n      fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\r\n        <span class=\"token punctuation\">{</span>\r\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'Moisture'</span><span class=\"token punctuation\">,</span>\r\n          value<span class=\"token operator\">:</span> latestHasuraData<span class=\"token punctuation\">.</span>moisture<span class=\"token punctuation\">,</span>\r\n          short<span class=\"token operator\">:</span> <span class=\"token string\">'true'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token punctuation\">{</span>\r\n          title<span class=\"token operator\">:</span> <span class=\"token string\">'Light'</span><span class=\"token punctuation\">,</span>\r\n          value<span class=\"token operator\">:</span> latestHasuraData<span class=\"token punctuation\">.</span>light<span class=\"token punctuation\">,</span>\r\n          short<span class=\"token operator\">:</span> <span class=\"token string\">'true'</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">]</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">]</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">const</span> slackHeaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token string-property property\">'Accept'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token string-property property\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>slackWebhookUrl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> headers<span class=\"token operator\">:</span> slackHeaders<span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>slackPayload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"結論\" style=\"position:relative;\"><a href=\"#%E7%B5%90%E8%AB%96\" aria-label=\"結論 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>結論</h2>\n<p>使いどころはまだ限られる気もしますが、徐々にDenoに慣れていこうと思います!!!！</p>","words":1218,"minutes":4}},"staticQueryHashes":["1319877725","2959249232"]}